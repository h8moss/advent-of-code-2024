##[pylyzer] succeed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/numpy/_expired_attrs_2_0.py 1734628981 3903

.__expired_attributes__: global::Dict!({{"round_"}: {"Use `np.round` instead."}, {"issctype"}: {"Use `issubclass(rep, np.generic)` instead."}, {"tracemalloc_domain"}: {"It\'s now available from `np.lib`."}, {"lookfor"}: {"Search NumPy\'s documentation directly."}, {"add_newdoc"}: {"It\'s still available as `np.lib.add_newdoc`."}, {"sctype2char"}: {"Use `np.dtype(obj).char` instead."}, {"alltrue"}: {"Use `np.all` instead."}, {"NINF"}: {"Use `-np.inf` instead."}, {"add_docstring"}: {"It\'s still available as `np.lib.add_docstring`."}, {"byte_bounds"}: {"Now it\'s available under `np.lib.array_utils.byte_bounds`"}, {"longfloat"}: {"Use `np.longdouble` instead."}, {"compare_chararrays"}: {"It\'s still available as `np.char.compare_chararrays`."}, {"longcomplex"}: {"Use `np.clongdouble` instead."}, {"singlecomplex"}: {"Use `np.complex64` instead."}, {"source"}: {"Use `inspect.getsource` instead."}, {"asfarray"}: {"Use `np.asarray` with a proper dtype instead."}, {"fastCopyAndTranspose"}: {"Use `arr.T.copy()` instead."}, {"who"}: {"Use an IDE variable explorer or `locals()` instead."}, {"cfloat"}: {"Use `np.complex128` instead."}, {"PZERO"}: {"Use `0.0` instead."}, {"geterrobj"}: {"Use the np.errstate context manager instead."}, {"nbytes"}: {"Use `np.dtype(<dtype>).itemsize` instead."}, {"disp"}: {"Use your own printing function instead."}, {"Inf"}: {"Use `np.inf` instead."}, {"get_array_wrap"}: {""}, {"NZERO"}: {"Use `-0.0` instead."}, {"recfromcsv"}: {"Use `np.genfromtxt` with comma delimiter instead."}, {"NaN"}: {"Use `np.nan` instead."}, {"complex_"}: {"Use `np.complex128` instead."}, {"cast"}: {"Use `np.asarray(arr, dtype=dtype)` instead."}, {"issubclass_"}: {"Use `issubclass` builtin instead."}, {"unicode_"}: {"Use `np.str_` instead."}, {"issubsctype"}: {"Use `np.issubdtype` instead."}, {"float_"}: {"Use `np.float64` instead."}, {"obj2sctype"}: {"Use `np.dtype(obj).type` instead."}, {"infty"}: {"Use `np.inf` instead."}, {"deprecate_with_doc"}: {"Emit `DeprecationWarning` with `warnings.warn` directly, or use `typing.deprecated`."}, {"DataSource"}: {"It\'s still available as `np.lib.npyio.DataSource`."}, {"PINF"}: {"Use `np.inf` instead."}, {"maximum_sctype"}: {"Use a specific dtype instead. You should avoid relying on any implicit mechanism and select the largest dtype of a kind explicitly in the code."}, {"set_numeric_ops"}: {"For the general case, use `PyUFunc_ReplaceLoopBySignature`. For ndarray subclasses, define the ``__array_ufunc__`` method and override the relevant ufunc."}, {"deprecate"}: {"Emit `DeprecationWarning` with `warnings.warn` directly, or use `typing.deprecated`."}, {"compat"}: {"There\'s no replacement, as Python 2 is no longer supported."}, {"seterrobj"}: {"Use the np.errstate context manager instead."}, {"add_newdoc_ufunc"}: {"It\'s an internal function and doesn\'t have a replacement."}, {"safe_eval"}: {"Use `ast.literal_eval` instead."}, {"recfromtxt"}: {"Use `np.genfromtxt` instead."}, {"mat"}: {"Use `np.asmatrix` instead."}, {"sctypes"}: {"Access dtypes explicitly instead."}, {"string_"}: {"Use `np.bytes_` instead."}, {"find_common_type"}: {"Use `numpy.promote_types` or `numpy.result_type` instead. To achieve semantics for the `scalar_types` argument, use `numpy.result_type` and pass the Python values `0`, `0.0`, or `0j`."}, {"Infinity"}: {"Use `np.inf` instead."}, {"clongfloat"}: {"Use `np.clongdouble` instead."}, {"format_parser"}: {"It\'s still available as `np.rec.format_parser`."}, {"sometrue"}: {"Use `np.any` instead."}, {"set_string_function"}: {"Use `np.set_printoptions` instead with a formatter for custom printing of NumPy objects."}})
