##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/numpy/_core/numeric.py 1734628981 81726
.functools = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.itertools = pyimport "<failure>"


.operator = pyimport "<failure>"


.sys = pyimport "<failure>"


.warnings = pyimport "<failure>"


.numbers = pyimport "<failure>"


.builtins = pyimport "<failure>"


.math = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "__init__"

.multiarray: Never
.___v_desugar_2 = pyimport "__init__"

.nt: Never
.___v_desugar_3 = pyimport "multiarray"
.multiarray = pyimport "multiarray"
.ALLOW_THREADS: Never
.BUFSIZE: Never
.CLIP: Never
.MAXDIMS: Never
.MAY_SHARE_BOUNDS: Never
.MAY_SHARE_EXACT: Never
.RAISE: Never
.WRAP: Never
.arange: Never
.array: Never
.asarray: Never
.asanyarray: Never
.ascontiguousarray: Never
.asfortranarray: Never
.broadcast: Never
.can_cast: |Type_25689: Type|(from_: Type_25689, to: Obj, casting: Obj := Obj) -> global::Tuple([Type_25689])
.concatenate: |T :> {Type_v_global_24815: Obj | Type_v_global_24815 != None}|(arrays: global::List!(T, _: Nat), axis: Obj := Obj, out: Obj := Obj, dtype: Obj := Obj, casting: Obj := Obj) -> global::List!(T, _: Nat)
.copyto: |Type_25798: Type, Type_25808: Type, Type_25795: Type|(dst: Type_25795, src: Type_25798, casting: Obj := Obj, where: Type_25808 := Type_25808) -> global::Tuple([Type_25795, Type_25798, Type_25808])
.dot: |Type_25717: Type, Type_25721: Type, Type_25726: Type|(a: Type_25717, b: Type_25721, out: Type_25726 := Type_25726) -> global::Tuple([Type_25717, Type_25721, Type_25726])
.dtype: Never
.empty: Never
.empty_like: |Type_25576: Type|(prototype: Type_25576, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_25576])
.flatiter: Never
.frombuffer: Never
.from_dlpack: Never
.fromfile: Never
.fromiter: Never
.fromstring: Never
.inner: |Type_25651: Type, Type_25650: Type|(a: Type_25650, b: Type_25651) -> global::Tuple([Type_25650, Type_25651])
.lexsort: (keys: Obj, axis: Obj := Obj) -> Never
.matmul: Never
.may_share_memory: |Type_25883: Type, Type_25886: Type|(a: Type_25883, b: Type_25886, max_work: Obj := Obj) -> global::Tuple([Type_25883, Type_25886])
.min_scalar_type: |Type_25704: Type|(a: Type_25704) -> global::Tuple([Type_25704])
.ndarray: Never
.nditer: Never
.nested_iters: Never
.promote_types: Never
.putmask: |Type_25813: Type, Type_25823: Type, Type_25825: Type|(a: Type_25813, mask: Type_25823, values: Type_25825) -> global::Tuple([Type_25813, Type_25823, Type_25825])
.result_type: |Type_25713: Type|(*arrays_and_dtypes: Type_25713) -> global::List(Type_25713, _: Nat)
.shares_memory: |Type_25871: Type, Type_25868: Type|(a: Type_25868, b: Type_25871, max_work: Obj := Obj) -> global::Tuple([Type_25868, Type_25871])
.vdot: |Type_25732: Type, Type_25737: Type|(a: Type_25732, b: Type_25737) -> global::Tuple([Type_25732, Type_25737])
.where: |Type_25668: Type, Type_25670: Type, Type_25662: Type|(condition: Type_25662, x: Type_25668 := Type_25668, y: Type_25670 := Type_25670) -> global::Tuple([Type_25662, Type_25668, Type_25670])
.zeros: Never
.normalize_axis_index: Never
.vecdot: Never
.___v_desugar_4 = pyimport "__init__"

.overrides: Never
.___v_desugar_5 = pyimport "__init__"

.umath: Never
.___v_desugar_6 = pyimport "__init__"

.shape_base: Never
.___v_desugar_7 = pyimport "overrides"
.overrides = pyimport "overrides"
.finalize_array_function_like: |Type_956: Type|(public_api: Type_956) -> Type_956
.set_module: Never
.___v_desugar_8 = pyimport "umath"
.umath = pyimport "umath"
.multiply: Never
.invert: Never
.sin: Never
.PINF: Never
.NAN: Never
.___v_desugar_9 = pyimport "__init__"

.numerictypes: Never
.___v_desugar_10 = pyimport "<failure>"

.AxisError: Never
.___v_desugar_11 = pyimport "_ufunc_config"
._ufunc_config = pyimport "_ufunc_config"
.errstate: Never
.bitwise_not: Never
.ufunc: ClassType
.newaxis: {None}
.array_function_dispatch: Never
.__all__: global::List!({"empty_like", "lexsort", "isfortran", "convolve", "ones", "argwhere", "empty", "dot", "ones_like", "ufunc", "fromfile", "min_scalar_type", "tensordot", "ndarray", "concatenate", "newaxis", "identity", "can_cast", "asanyarray", "result_type", "True_", "may_share_memory", "array", "promote_types", "zeros_like", "full", "shares_memory", "asarray", "inner", "zeros", "isclose", "binary_repr", "isscalar", "from_dlpack", "copyto", "flatiter", "vecdot", "frombuffer", "full_like", "fromstring", "array_equal", "putmask", "flatnonzero", "base_repr", "count_nonzero", "inf", "nditer", "asfortranarray", "allclose", "ascontiguousarray", "where", "cross", "little_endian", "outer", "roll", "False_", "dtype", "indices", "nested_iters", "arange", "moveaxis", "matmul", "nan", "correlate", "astype", "fromfunction", "array_equiv", "broadcast", "vdot", "rollaxis", "bitwise_not", "fromiter"}, 72)
._zeros_like_dispatcher: |Type_36167: Type|(a: Type_36167, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_36167])
.zeros_like: |Type_25576: Type|(a: Type_25576, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_25576])
.ones: (shape: Obj, dtype: Obj := Obj, order: Obj := Obj, device: Obj := Obj, like: Obj := Obj) -> Never
._ones_with_like: Never
._ones_like_dispatcher: |Type_36270: Type|(a: Type_36270, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_36270])
.ones_like: |Type_25576: Type|(a: Type_25576, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_25576])
._full_dispatcher: |Type_36358: Type|(shape: Obj, fill_value: Obj, dtype: Obj := Obj, order: Obj := Obj, device: Obj := Obj, like: Type_36358 := Type_36358) -> global::Tuple([Type_36358])
.full: |Type_36397: Type, Type_36369 <: Structural({.dtype = ?38078}), Type_38078: Type|(shape: Obj, fill_value: Type_36369, dtype: Type_36397 := Type_36397, order: Obj := Obj, device: Obj := Obj, like: Obj := Obj) -> Never
._full_with_like: Never
._full_like_dispatcher: |Type_36417: Type|(a: Type_36417, fill_value: Obj, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_36417])
.full_like: |Type_25576: Type|(a: Type_25576, fill_value: Obj, dtype: Obj := Obj, order: Obj := Obj, subok: Obj := Obj, shape: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_25576])
._count_nonzero_dispatcher: |Type_36493: Type|(a: Type_36493, axis: Obj := Obj, keepdims: Obj := Obj) -> global::Tuple([Type_36493])
.count_nonzero: (a: Obj, axis: Obj := Obj, keepdims: Obj := Obj) -> Never
.isfortran: |Type_36522 <: Structural({.flags = ?38377}), Type_38377: Type|(a: Type_36522) -> Never
._argwhere_dispatcher: |Type_36527: Type|(a: Type_36527) -> global::Tuple([Type_36527])
.argwhere: (a: Obj) -> global::Indexable(Obj, Never)
._flatnonzero_dispatcher: |Type_36535: Type|(a: Type_36535) -> global::Tuple([Type_36535])
.flatnonzero: (a: Obj) -> Never
._correlate_dispatcher: |Type_36542: Type, Type_36545: Type|(a: Type_36542, v: Type_36545, mode: Obj := Obj) -> global::Tuple([Type_36542, Type_36545])
.correlate: (a: Obj, v: Obj, mode: Obj := Obj) -> Never
._convolve_dispatcher: |Type_36568: Type, Type_36566: Type|(a: Type_36566, v: Type_36568, mode: Obj := Obj) -> global::Tuple([Type_36566, Type_36568])
.convolve: (a: Obj, v: Obj, mode: Obj := Obj) -> Never
._outer_dispatcher: |Type_36595: Type, Type_36588: Type, Type_36592: Type|(a: Type_36588, b: Type_36592, out: Type_36595 := Type_36595) -> global::Tuple([Type_36588, Type_36592, Type_36595])
.outer: (a: Obj, b: Obj, out: Obj := Obj) -> Never
._tensordot_dispatcher: |Type_36614: Type, Type_36611: Type|(a: Type_36611, b: Type_36614, axes: Obj := Obj) -> global::Tuple([Type_36611, Type_36614])
.tensordot: (a: Obj, b: Obj, axes: Never := Never) -> Never
._roll_dispatcher: |Type_36634: Type|(a: Type_36634, shift: Obj, axis: Obj := Obj) -> global::Tuple([Type_36634])
.roll: (a: Obj, shift: Obj, axis: Obj := Obj) -> Never
._rollaxis_dispatcher: |Type_36649: Type|(a: Type_36649, axis: Obj, start: Obj := Obj) -> global::Tuple([Type_36649])
.rollaxis: |Type_36654 <: Structural({.__getitem__ = (self: Obj, ?40118) -> ?40119; .ndim = ?R; .transpose = (self: Obj, ?40162) -> ?40163}), Type_40118: Type, Type_40163: Type, Type_40162: Type, Type_40119: Type, R: Type|(a: Type_36654, axis: Obj, start: Obj := {0}) -> Type_40163
.normalize_axis_tuple: |Type_36673 :> {0}|(axis: Type_36673, ndim: Obj, argname: {None} := {None} and {None}, allow_duplicate: Obj := Obj) -> Type_36673
._moveaxis_dispatcher: |Type_36675: Type|(a: Type_36675, source: Obj, destination: Obj) -> global::Tuple([Type_36675])
.moveaxis: |Type_40843: Type, T: Type, Type_36684 <: Structural({.ndim = ?Type_36666 and ?Type_36666; .transpose = (global::List!(?T, _: Nat)) -> ?40843}), Type_36666: Type|(a: Type_36684, source: {0}, destination: {0}) -> Type_40843
._cross_dispatcher: |Type_36701: Type, Type_36699: Type|(a: Type_36699, b: Type_36701, axisa: Obj := Obj, axisb: Obj := Obj, axisc: Obj := Obj, axis: Obj := Obj) -> global::Tuple([Type_36699, Type_36701])
.cross: |Type_40843 <: global::List(Type, _: Nat), Type_40843: Type, R :> Int|(a: Type_40843, b: Type_40843, axisa: Obj := R, axisb: Obj := R, axisc: Obj := R, axis: Obj := Obj) -> Type_40843
.little_endian: Never
.indices: (dimensions: global::Iterable(Never), dtype: Obj := Obj, sparse: Bool := Bool) -> Never
.fromfunction: |Type_41715: Type|(function: () -> Type_41715, shape: global::Iterable(Never), dtype: Obj := {Float}, like: Obj := {None}, **kwargs := ?36776) -> Type_41715
._fromfunction_with_like: Never
._frombuffer: (buf: Obj, dtype: Obj, shape: Obj, order: Obj) -> Never
.isscalar: (element: Obj) -> Bool
.binary_repr: (num: Obj, width: Never := Never) -> Never
.base_repr: |Type_36814 <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), R <: Bool, R: Type, R <: Nat|(number: Type_36814, base: R := {2} and R, padding: R := {0} and R) -> Str
._maketup: (descr: Obj, val: Obj) -> Never
.identity: (n: Obj, dtype: Obj := Obj, like: Obj := Obj) -> Never
._identity_with_like: Never
._allclose_dispatcher: |Type_36850: Type, Type_36844: Type, Type_36841: Type, Type_36846: Type|(a: Type_36841, b: Type_36844, rtol: Type_36846 := Type_36846, atol: Type_36850 := Type_36850, equal_nan: Obj := Obj) -> global::Tuple([Type_36841, Type_36844, Type_36846, Type_36850])
.allclose: (a: Obj, b: Obj, rtol: Obj := Obj, atol: Obj := Obj, equal_nan: Bool := Bool) -> Never
._isclose_dispatcher: |Type_36890: Type, Type_36893: Type, Type_36898: Type, Type_36902: Type|(a: Type_36890, b: Type_36893, rtol: Type_36898 := Type_36898, atol: Type_36902 := Type_36902, equal_nan: Obj := Obj) -> global::Tuple([Type_36890, Type_36893, Type_36898, Type_36902])
.isclose: (a: Obj, b: Obj, rtol: Obj := Obj, atol: Obj := Obj, equal_nan: Bool := Bool) -> global::Iterable(Bool)
._array_equal_dispatcher: |Type_36937: Type, Type_36941: Type|(a1: Type_36937, a2: Type_36941, equal_nan: Obj := Obj) -> global::Tuple([Type_36937, Type_36941])
._no_nan_types: global::Set(ClassType, 5)
._dtype_cannot_hold_nan: (dtype: Obj) -> Bool
.array_equal: (a1: Obj, a2: Obj, equal_nan: Bool := Bool) -> Never
._array_equiv_dispatcher: |Type_36979: Type, Type_36976: Type|(a1: Type_36976, a2: Type_36979) -> global::Tuple([Type_36976, Type_36979])
.array_equiv: (a1: Obj, a2: Obj) -> Never
._astype_dispatcher: |Type_36993: Type, Type_36998: Type|(x: Type_36993, dtype: Type_36998, copy: Obj := Obj, device: Obj := Obj) -> global::Tuple([Type_36993, Type_36998])
.astype: (x: Obj, dtype: Obj, copy: Obj := Obj, device: Obj := Obj) -> Never
.inf: Never
.nan: Never
.False_: Never
.True_: Never
.extend_all: |Type_37036 <: Structural({.__all__ = ?42903}), Type_42903: Type|(module: Type_37036) -> NoneType
.DUMMY = pyimport "umath"

.numerictypes = pyimport "numerictypes"
.___v_desugar_13 = pyimport "__init__"

.fromnumeric: Never
.fromnumeric = pyimport "fromnumeric"
.___v_desugar_14 = pyimport "__init__"

.arrayprint: Never
.arrayprint = pyimport "arrayprint"
.___v_desugar_15 = pyimport "__init__"

._asarray: Never
._asarray = pyimport "_asarray"
.___v_desugar_16 = pyimport "__init__"

._ufunc_config: Never







