##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/numpy/_core/shape_base.py 1734628981 32883
.__all__: global::List!({"atleast_3d", "atleast_2d", "block", "atleast_1d", "hstack", "unstack", "vstack", "stack"}, 8)
.functools = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.itertools = pyimport "<failure>"


.operator = pyimport "<failure>"


.___v_desugar_1 = pyimport "__init__"
.__init__ = pyimport "__init__"
._nx: Never
.___v_desugar_2 = pyimport "__init__"

.overrides = pyimport "overrides"
.___v_desugar_3 = pyimport "multiarray"
.multiarray = pyimport "multiarray"
.array: Never
.asanyarray: Never
.normalize_axis_index: Never
.___v_desugar_4 = pyimport "__init__"

._from_nx: Never
.array_function_dispatch: Never
._atleast_1d_dispatcher: |Type_68351: Type|(*arys: Type_68351) -> global::List(Type_68351, _: Nat)
.atleast_1d: |T: Type|(*arys: T) -> global::Tuple([T])
._atleast_2d_dispatcher: |Type_68357: Type|(*arys: Type_68357) -> global::List(Type_68357, _: Nat)
.atleast_2d: |E: Type, Type_68616: Type, T: Type, Type_68651: Type, Type_68617: Type, T <: Structural({.reshape = (self: Obj, ?68616, ?68617) -> ?T; .ndim = ?E and ?68627; .__getitem__ = (self: Obj, ?68651) -> ?T}), Type_68627: Type|(*arys: T) -> T
._atleast_3d_dispatcher: |Type_68361: Type|(*arys: Type_68361) -> global::List(Type_68361, _: Nat)
.atleast_3d: |E: Type, Type_68846: Type, T: Type, Type_68833: Type, Type_68863: Type, Type_68903: Type, Type_68832: Type, Type_68834: Type, T <: Structural({.__getitem__ = (self: Obj, ?68863) -> ?T and (self: Obj, ?68903) -> ?T; .ndim = ?E and ?68846; .reshape = (self: Obj, ?68832, ?68833, ?68834) -> ?T})|(*arys: T) -> T
._arrays_for_stack_dispatcher: |T: Type|(arrays: global::Iterable(T)) -> global::Tuple([T])
._vhstack_dispatcher: |T: Type|(tup: global::Iterable(T), dtype: Obj := Obj, casting: Obj := Obj) -> global::Tuple([T])
.vstack: (tup: Obj, dtype: Obj := Obj, casting: Obj := Obj) -> Never
.hstack: (tup: Obj, dtype: Obj := Obj, casting: Obj := Obj) -> Never
._stack_dispatcher: |T: Type|(arrays: global::Iterable(T), axis: Obj := Obj, out: Obj := Obj, dtype: Obj := Obj, casting: Obj := Obj) -> global::Tuple([T])
.stack: (arrays: global::Iterable(Structural({.shape = Never; .__getitem__ = (self: Obj, Obj) -> Never})), axis: Obj := Obj, out: Obj := Obj, dtype: Obj := Obj, casting: Obj := Obj) -> Never
._unstack_dispatcher: |Type_68411: Type|(x: Type_68411, axis: Obj := Obj) -> global::Tuple([Type_68411])
.unstack: |E: Type, Type_68415 <: Structural({.ndim = ?E})|(x: Type_68415, axis: Obj := Obj) -> global::Tuple([Never])
._size: Never
._ndim: Never
._concatenate: Never
._block_format_index: (index: Obj) -> Str
._block_check_depths_match: |Type_68426 <: Structural({.__len__ = (self: Never) -> Nat})|(arrays: Type_68426, parent_index: Structural({.__add__ = (self: Never, Obj) -> Never}) := global::List!(Never, 0) and Structural({.__add__ = (self: Never, Obj) -> Never})) -> Never
._atleast_nd: (a: Obj, ndim: Obj) -> Never
._accumulate: (values: Obj) -> global::List!(Never, _: Nat)
._concatenate_shapes: |O <: Structural({.__add__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(shapes: global::Indexable(Obj, global::Indexable(Obj, Structural({.__add__ = (self: Never, Obj) -> O}))) and global::Iterable(global::Indexable(Obj, Never)), axis: Obj) -> global::Tuple([O, Never])
._block_info_recursion: |T: Type, R <: Structural({.__lt__ = (self: Never, ?R) -> Bool; .__add__ = (self: Never, ?R) -> ?O}), O: Type, T :> ?U or ?T, U: Type, Type_68434 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, T <: global::Iterable(?T)|(arrays: T, max_depth: R, result_ndim: Type_68434, depth: R := {0} and R) -> T
._block: |R <: Structural({.__lt__ = (self: Never, ?R) -> Bool; .__add__ = (self: Never, ?R) -> ?O}), R <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(arrays: global::Iterable(global::Iterable(Never)), max_depth: R, result_ndim: Obj, depth: R := {0} and R) -> Never
._block_dispatcher: |T :> NoneType, T: Type|(arrays: global::Iterable(T)) -> T
.block: (arrays: Never) -> Never
._block_setup: |O :> Nat, O <: global::Ord|(arrays: Never) -> global::Tuple([Structural({.__len__ = (self: Never) -> Nat}), Nat, O, Never])
._block_slicing: (arrays: Never, list_ndim: Never, result_ndim: Never) -> Never
._block_concatenate: |Type_68434: Type, O: Type, Type_68434 :> {0}, Type_68434 <: Structural({.__mul__ = (self: Never, ?Type_68434) -> ?O})|(arrays: Type_68434, list_ndim: Type_68434, result_ndim: Type_68434) -> Never
