##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/numpy/_core/getlimits.py 1734628981 26112

.__all__: global::List!({"finfo", "iinfo"}, 2)
.types = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.warnings = pyimport "<failure>"


.___v_desugar_1 = pyimport "<failure>"

.set_module: Never
.___v_desugar_2 = pyimport "_machar"
._machar = pyimport "_machar"
.MachAr: {_machar.MachAr}
.___v_desugar_3 = pyimport "__init__"
.__init__ = pyimport "__init__"
.numeric: Never
.___v_desugar_4 = pyimport "__init__"

.ntypes: Never
.___v_desugar_5 = pyimport "numeric"
.numeric = pyimport "numeric"
.array: Never
.inf: Never
.nan: Never
.___v_desugar_6 = pyimport "umath"
.umath = pyimport "umath"
.log10: Never
.exp2: Never
.nextafter: Never
.isnan: Never
._fr0: |E: Type, Type_66700: Type, Type_66699 <: Structural({.copy = (self: Never) -> ?66699; .shape = ?66700; .ndim = ?E}), Type_66699 <: Structural({.copy = (self: Obj) -> ?66699; .shape = ?66700; .ndim = ?E}), Type_66699: Type|(a: Type_66699) -> Type_66699
._fr1: |E: Type, Type_66718 <: Structural({.size = ?E; .copy = (self: Obj) -> ?66718; .shape = ?66720}), Type_66718: Type, Type_66718 <: Structural({.size = ?E; .copy = (self: Never) -> ?66718; .shape = ?66720}), Type_66720: Type|(a: Type_66718) -> Type_66718
.MachArLike: ClassType
.MachArLike.title: Never
.MachArLike.epsneg: Never
.MachArLike._str_xmax: Never
.MachArLike.params: Never
.MachArLike.xmin: Never
.MachArLike.ftype: Never
.MachArLike.precision: Never
.MachArLike._str_eps: Never
.MachArLike._str_epsneg: Never
.MachArLike._str_xmin: Never
.MachArLike._str_smallest_normal: Never
.MachArLike.resolution: Never
.MachArLike.ibeta: Never
.MachArLike._str_resolution: Never
.MachArLike.__call__: (ftype: Obj, eps: Obj, epsneg: Obj, huge: Obj, tiny: Obj, ibeta: Obj, smallest_subnormal: Obj := Obj, **kwargs := ?66580) -> getlimits.MachArLike
.MachArLike.smallest_subnormal: (self: getlimits.MachArLike) -> Never
.MachArLike._str_smallest_subnormal: (self: getlimits.MachArLike) -> Never
.MachArLike._float_to_float: (self: getlimits.MachArLike, value: Obj) -> Never
.MachArLike._float_conv: (self: getlimits.MachArLike, value: Obj) -> Never
.MachArLike._float_to_str: (self: getlimits.MachArLike, value: (self: getlimits.MachArLike) -> Never) -> Never

._convert_to_float: global::Dict!({Never: Never})
._title_fmt: {"numpy {} precision floating point number"}
._MACHAR_PARAMS: global::Dict!({Never: global::GenericDict})
._KNOWN_TYPES: global::Dict!({Never: Never})
._register_type: (machar: Obj, bytepat: Obj) -> NoneType
._float_ma: global::Dict!({{32, 128, 80, 16, 64}: getlimits.MachArLike})
._register_known_types: () -> NoneType
._get_machar: (ftype: (Obj) -> Structural({.__div__ = (self: Never, Never) -> Never})) -> _machar.MachAr
._discovered_machar: (ftype: Obj) -> _machar.MachAr
.Type_finfo: ClassType
.Type_finfo.__call__: () -> getlimits.Type_finfo
.Type_finfo._finfo_cache: global::Dict!({Never: Never})
.Type_finfo.__class_getitem__: Never
.Type_finfo.__new__: |T <: ClassType, Type_66616 <: Structural({._finfo_cache = ?67583 and ?67614}), Type_67583: Type, Type_67614: Type|(cls: Type_66616, dtype: T) -> Never
.Type_finfo._init: (self: Never, dtype: (Obj) -> Float) -> Never
.Type_finfo.__str__: (self: getlimits.Type_finfo) -> Str
.Type_finfo.__repr__: (self: getlimits.Type_finfo) -> Str
.Type_finfo.smallest_normal: (self: getlimits.Type_finfo) -> Never
.Type_finfo.tiny: (self: getlimits.Type_finfo) -> (self: getlimits.Type_finfo) -> Never

.Type_iinfo: ClassType
.Type_iinfo.key: Never
.Type_iinfo.bits: Never
.Type_iinfo.kind: Never
.Type_iinfo.__call__: (int_type: Obj) -> getlimits.Type_iinfo
.Type_iinfo._min_vals: global::Dict!({Never: Never})
.Type_iinfo._max_vals: global::Dict!({Never: Never})
.Type_iinfo.__class_getitem__: Never
.Type_iinfo.min: (self: getlimits.Type_iinfo) -> Never
.Type_iinfo.max: (self: getlimits.Type_iinfo) -> Never
.Type_iinfo.__str__: (self: getlimits.Type_iinfo) -> Str
.Type_iinfo.__repr__: (self: getlimits.Type_iinfo) -> Str

