##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/numpy/_core/einsumfunc.py 1734628981 52820

.itertools = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.operator = pyimport "<failure>"


.___v_desugar_1 = pyimport "multiarray"
.multiarray = pyimport "multiarray"
.c_einsum: Never
.___v_desugar_2 = pyimport "numeric"
.numeric = pyimport "numeric"
.asanyarray: Never
.tensordot: (a: Obj, b: Obj, axes: Never := Never) -> Never
.___v_desugar_3 = pyimport "overrides"
.overrides = pyimport "overrides"
.array_function_dispatch: Never
.__all__: global::List!({"einsum", "einsum_path"}, 2)
.einsum_symbols: {"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"}
.einsum_symbols_set: global::Set!(Str, _: Nat)
._flop_count: |K: Type, R :> {1}, Type_472364 <: Structural({.__sub__ = (self: Never, R) -> {1}}), R <: Nat|(idx_contraction: global::Iterable(K), inner: Bool, num_terms: Type_472364, size_dictionary: global::Indexable(K, R)) -> Nat
._compute_size_by_dict: |K: Type|(indices: global::Iterable(K), idx_dict: global::Indexable(K, Nat)) -> Nat
._find_contraction: |Type_472371 <: Structural({.__contains__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool}), T: Type, R :> Nat|(positions: Type_472371, input_sets: global::Iterable(T), output_set: Never) -> global::Tuple([T, global::List!(T, 2), Never, Never])
._optimal_path: |R <: Float, R :> {1}, R <: Nat|(input_sets: Never, output_set: Never, idx_dict: global::Indexable(Obj, R), memory_limit: R) -> Never
._parse_possible_contraction: |Type_472396 <: Structural({.__add__ = (self: Never, R) -> O}), K: Type, T <: global::Iterable(K), R <: Float, O <: Structural({.__gt__ = (self: Never, R) -> Bool}), R :> Nat, R: Type, R :> {1}, R <: Nat|(positions: Never, input_sets: global::Iterable(T), output_set: Never, idx_dict: global::Indexable(K, R), memory_limit: R, path_cost: Type_472396, naive_cost: R) -> global::List!(global::Tuple([R, R]) or global::List!(T, 2), 3)
._update_other_results: |Self <: global::Indexable(K, V), T: Type, Self <: Never, Self <: global::Indexable(K, Self), O: Type, N: Nat, K :> {2, 0, 1}, V <: global::List(T, N) or RefMut(global::ByteArray!), K :> {1}, T :> global::Tuple([V, global::Tuple([O, O]), V])|(results: global::Iterable(Self), best: Self) -> global::List!(T, 1)
._greedy_path: (input_sets: Never, output_set: Never, idx_dict: global::Indexable(Obj, Nat), memory_limit: Nat) -> global::List!(global::Tuple([{Type_v_global_4: Int | (Type_v_global_4 >= 0) and (Type_v_global_4 <= pred(1))}]), 2)
._can_dot: |Type_472409 <: Structural({.__len__ = (self: Never) -> Nat})|(inputs: Type_472409, result: Structural({.__contains__ = (self: Never, Obj) -> Bool}), idx_removed: Structural({.__len__ = (self: Never) -> Nat})) -> {True}
._parse_einsum_input: (operands: global::List!(Never, _: Nat)) -> global::Tuple([Str, Str, global::List!(Never, _: Nat)])
._einsum_path_dispatcher: |Type_472416: Type|(*operands: Type_472416, optimize: Obj := Obj, einsum_call: Obj := Obj) -> global::List(Type_472416, _: Nat)
.einsum_path: (*operands: Never, optimize: {"greedy"} := {"greedy"}, einsum_call: Bool := Bool) -> global::Tuple([global::List!(Never, _: Nat + _: Nat), Str])
._einsum_dispatcher: (*operands: Obj, out: Obj := Obj, optimize: Obj := Obj, **kwargs := Type_472435) -> Never
.einsum: |T: Type|(*operands: T, out: Obj := Obj, optimize: {"greedy"} := {"greedy"}, **kwargs := Type_472450) -> T
