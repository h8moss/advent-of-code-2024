##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/numpy/_core/numerictypes.py 1734628981 16125

.numbers = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.warnings = pyimport "<failure>"


.___v_desugar_1 = pyimport "__init__"
.__init__ = pyimport "__init__"
.ma: Never
.___v_desugar_2 = pyimport "multiarray"
.multiarray = pyimport "multiarray"
.ndarray: Never
.dtype: Never
.datetime_data: Never
.datetime_as_string: |Type_25992: Type|(arr: Type_25992, unit: Obj := Obj, timezone: Obj := Obj, casting: Obj := Obj) -> global::Tuple([Type_25992])
.busday_offset: |Type_25940: Type, Type_25922: Type, Type_25955: Type, Type_25929: Type, Type_25947: Type|(dates: Type_25922, offsets: Type_25929, roll: Obj := Obj, weekmask: Type_25940 := Type_25940, holidays: Type_25947 := Type_25947, busdaycal: Obj := Obj, out: Type_25955 := Type_25955) -> global::Tuple([Type_25922, Type_25929, Type_25940, Type_25947, Type_25955])
.busday_count: |Type_25980: Type, Type_25962: Type, Type_25969: Type, Type_25974: Type, Type_25986: Type|(begindates: Type_25962, enddates: Type_25969, weekmask: Type_25974 := Type_25974, holidays: Type_25980 := Type_25980, busdaycal: Obj := Obj, out: Type_25986 := Type_25986) -> global::Tuple([Type_25962, Type_25969, Type_25974, Type_25980, Type_25986])
.is_busday: |Type_25894: Type, Type_25900: Type, Type_25909: Type, Type_25916: Type|(dates: Type_25894, weekmask: Type_25900 := Type_25900, holidays: Type_25909 := Type_25909, busdaycal: Obj := Obj, out: Type_25916 := Type_25916) -> global::Tuple([Type_25894, Type_25900, Type_25909, Type_25916])
.busdaycalendar: Never
.___v_desugar_3 = pyimport "<failure>"

.set_module: Never
.__all__: global::List!({"busday_offset", "busday_count", "isdtype", "ScalarType", "datetime_as_string", "typecodes", "busdaycalendar", "datetime_data", "is_busday", "issubdtype"}, 10)
.___v_desugar_4 = pyimport "_string_helpers"
._string_helpers = pyimport "_string_helpers"
.english_lower: (s: Obj) -> Never
.english_upper: (s: Obj) -> Never
.english_capitalize: (s: Never) -> Never
.LOWER_TABLE: Never
.UPPER_TABLE: Never
.___v_desugar_5 = pyimport "_type_aliases"
._type_aliases = pyimport "_type_aliases"
.sctypeDict: global::Dict!({Str: Obj})
.allTypes: global::Dict!({Str: Obj})
.sctypes: global::Dict!({{"float"}: Never, {"uint"}: Never, {"others"}: Never, {"int"}: Never, {"complex"}: Never})
.___v_desugar_6 = pyimport "_dtype"
._dtype = pyimport "_dtype"
._kind_name: |Type_29712 <: Structural({.kind = ?T}), T: Type|(dtype: Type_29712) -> Never
.___v_desugar_7 = pyimport "<failure>"

.Bool: Never
.Int: Never
.Float: Never
.Complex: Never
.Obj: Never
.Str: Never
.Bytes: Never
.generic: Obj
.genericTypeRank: global::List!({"int32", "uint8", "uint16", "int64", "int128", "uint128", "float96", "float256", "int16", "complex32", "float64", "uint32", "bool", "complex256", "object", "float16", "complex512", "float128", "float80", "int8", "float32", "complex64", "complex128", "complex160", "uint64", "complex192"}, 26)
.maximum_sctype: (t: ClassType) -> Never
.issctype: |E <: Structural({.__and__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(rep: E) -> Never
.obj2sctype: |Type_34273 <: ClassType, Type_25360 :> {None}|(rep: Type_34273, default: Type_25360 := Type_25360 and Type_25360) -> Type_34273
.issubclass_: (arg1: ClassType, arg2: global::HomogenousTuple(ClassType) or ClassType) -> Never
.issubsctype: |Type_34273 <: ClassType|(arg1: Type_34273, arg2: Type_34273) -> Bool
.Type__PreprocessDTypeError: ClassType
.Type__PreprocessDTypeError <: global::Exception

._preprocess_dtype: |R <: Structural({.type = ?R}), R: Type|(dtype: R) -> R
.isdtype: (dtype: Never, kind: {"bool"}) -> {dtype in Never}
.issubdtype: (arg1: ClassType, arg2: ClassType) -> Bool
.sctype2char: (sctype: ClassType) -> Never
._scalar_type_key: (typ: Obj) -> global::Tuple([Never, Never])
.ScalarType: Never
.ScalarType: Never
.ScalarType: Never


.typecodes: global::Dict!({{"Complex"}: {"FDG"}, {"Character"}: {"c"}, {"All"}: {"?bhilqnpBHILQNPefdgFDGSUVOMm"}, {"UnsignedInteger"}: {"BHILQNP"}, {"Datetime"}: {"Mm"}, {"AllFloat"}: {"efdgFDG"}, {"Float"}: {"efdg"}, {"AllInteger"}: {"bBhHiIlLqQnNpP"}, {"Integer"}: {"bhilqnp"}})
.typeDict: global::Dict!({Str: Obj})
._register_types: () -> Never

