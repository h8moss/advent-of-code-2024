##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/ndimage/_ni_docstrings.py 1734628983 8505

.doccer = pyimport "doccer"

.__all__: global::List!({"docfiller"}, 1)
._input_doc: {"input : array_like\n    The input array."}
._axis_doc: {"axis : int, optional\n    The axis of `input` along which to calculate. Default is -1."}
._output_doc: {"output : array or dtype, optional\n    The array in which to place the output, or the dtype of the\n    returned array. By default an array of the same dtype as input\n    will be created."}
._size_foot_doc: {"size : scalar or tuple, optional\n    See footprint, below. Ignored if footprint is given.\nfootprint : array, optional\n    Either `size` or `footprint` must be defined. `size` gives\n    the shape that is taken from the input array, at every element\n    position, to define the input to the filter function.\n    `footprint` is a boolean array that specifies (implicitly) a\n    shape, but also which of the elements within this shape will get\n    passed to the filter function. Thus ``size=(n,m)`` is equivalent\n    to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n    of dimensions of the input array, so that, if the input array is\n    shape (10,10,10), and `size` is 2, then the actual size used is\n    (2,2,2). When `footprint` is given, `size` is ignored."}
._mode_reflect_doc: {"mode : {\'reflect\', \'constant\', \'nearest\', \'mirror\', \'wrap\'}, optional\n    The `mode` parameter determines how the input array is extended\n    beyond its boundaries. Default is \'reflect\'. Behavior for each valid\n    value is as follows:\n\n    \'reflect\' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    \'constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter.\n\n    \'nearest\' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    \'mirror\' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    \'wrap\' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    For consistency with the interpolation functions, the following mode\n    names can also be used:\n\n    \'grid-mirror\'\n        This is a synonym for \'reflect\'.\n\n    \'grid-constant\'\n        This is a synonym for \'constant\'.\n\n    \'grid-wrap\'\n        This is a synonym for \'wrap\'."}
._mode_interp_constant_doc: {"mode : {\'reflect\', \'grid-mirror\', \'constant\', \'grid-constant\', \'nearest\', \'mirror\', \'grid-wrap\', \'wrap\'}, optional\n    The `mode` parameter determines how the input array is extended\n    beyond its boundaries. Default is \'constant\'. Behavior for each valid\n    value is as follows (see additional plots and details on\n    :ref:`boundary modes <ndimage-interpolation-modes>`):\n\n    \'reflect\' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    \'grid-mirror\'\n        This is a synonym for \'reflect\'.\n\n    \'constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter. No\n        interpolation is performed beyond the edges of the input.\n\n    \'grid-constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter. Interpolation\n        occurs for samples outside the input\'s extent  as well.\n\n    \'nearest\' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    \'mirror\' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    \'grid-wrap\' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    \'wrap\' (`d b c d | a b c d | b c a b`)\n        The input is extended by wrapping around to the opposite edge, but in a\n        way such that the last point and initial point exactly overlap. In this\n        case it is not well defined which sample will be chosen at the point of\n        overlap."}
._mode_interp_mirror_doc: Str

._mode_multiple_doc: {"mode : str or sequence, optional\n    The `mode` parameter determines how the input array is extended\n    when the filter overlaps a border. By passing a sequence of modes\n    with length equal to the number of dimensions of the input array,\n    different modes can be specified along each axis. Default value is\n    \'reflect\'. The valid values and their behavior is as follows:\n\n    \'reflect\' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    \'constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter.\n\n    \'nearest\' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    \'mirror\' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    \'wrap\' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    For consistency with the interpolation functions, the following mode\n    names can also be used:\n\n    \'grid-constant\'\n        This is a synonym for \'constant\'.\n\n    \'grid-mirror\'\n        This is a synonym for \'reflect\'.\n\n    \'grid-wrap\'\n        This is a synonym for \'wrap\'."}
._cval_doc: {"cval : scalar, optional\n    Value to fill past edges of input if `mode` is \'constant\'. Default\n    is 0.0."}
._origin_doc: {"origin : int, optional\n    Controls the placement of the filter on the input array\'s pixels.\n    A value of 0 (the default) centers the filter over the pixel, with\n    positive values shifting the filter to the left, and negative ones\n    to the right."}
._origin_multiple_doc: {"origin : int or sequence, optional\n    Controls the placement of the filter on the input array\'s pixels.\n    A value of 0 (the default) centers the filter over the pixel, with\n    positive values shifting the filter to the left, and negative ones\n    to the right. By passing a sequence of origins with length equal to\n    the number of dimensions of the input array, different shifts can\n    be specified along each axis."}
._extra_arguments_doc: {"extra_arguments : sequence, optional\n    Sequence of extra positional arguments to pass to passed function."}
._extra_keywords_doc: {"extra_keywords : dict, optional\n    dict of extra keyword arguments to pass to passed function."}
._prefilter_doc: {"prefilter : bool, optional\n    Determines if the input array is prefiltered with `spline_filter`\n    before interpolation. The default is True, which will create a\n    temporary `float64` array of filtered values if `order > 1`. If\n    setting this to False, the output will be slightly blurred if\n    `order > 1`, unless the input is prefiltered, i.e. it is the result\n    of calling `spline_filter` on the original input."}
.docdict: global::Dict!({{"extra_keywords"}: {"extra_keywords : dict, optional\n    dict of extra keyword arguments to pass to passed function."}, {"mode_interp_mirror"}: {_: Str | _ != "(...)"}, {"origin"}: {"origin : int, optional\n    Controls the placement of the filter on the input array\'s pixels.\n    A value of 0 (the default) centers the filter over the pixel, with\n    positive values shifting the filter to the left, and negative ones\n    to the right."}, {"origin_multiple"}: {"origin : int or sequence, optional\n    Controls the placement of the filter on the input array\'s pixels.\n    A value of 0 (the default) centers the filter over the pixel, with\n    positive values shifting the filter to the left, and negative ones\n    to the right. By passing a sequence of origins with length equal to\n    the number of dimensions of the input array, different shifts can\n    be specified along each axis."}, {"prefilter"}: {"prefilter : bool, optional\n    Determines if the input array is prefiltered with `spline_filter`\n    before interpolation. The default is True, which will create a\n    temporary `float64` array of filtered values if `order > 1`. If\n    setting this to False, the output will be slightly blurred if\n    `order > 1`, unless the input is prefiltered, i.e. it is the result\n    of calling `spline_filter` on the original input."}, {"extra_arguments"}: {"extra_arguments : sequence, optional\n    Sequence of extra positional arguments to pass to passed function."}, {"mode_reflect"}: {"mode : {\'reflect\', \'constant\', \'nearest\', \'mirror\', \'wrap\'}, optional\n    The `mode` parameter determines how the input array is extended\n    beyond its boundaries. Default is \'reflect\'. Behavior for each valid\n    value is as follows:\n\n    \'reflect\' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    \'constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter.\n\n    \'nearest\' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    \'mirror\' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    \'wrap\' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    For consistency with the interpolation functions, the following mode\n    names can also be used:\n\n    \'grid-mirror\'\n        This is a synonym for \'reflect\'.\n\n    \'grid-constant\'\n        This is a synonym for \'constant\'.\n\n    \'grid-wrap\'\n        This is a synonym for \'wrap\'."}, {"axis"}: {"axis : int, optional\n    The axis of `input` along which to calculate. Default is -1."}, {"cval"}: {"cval : scalar, optional\n    Value to fill past edges of input if `mode` is \'constant\'. Default\n    is 0.0."}, {"mode_multiple"}: {"mode : str or sequence, optional\n    The `mode` parameter determines how the input array is extended\n    when the filter overlaps a border. By passing a sequence of modes\n    with length equal to the number of dimensions of the input array,\n    different modes can be specified along each axis. Default value is\n    \'reflect\'. The valid values and their behavior is as follows:\n\n    \'reflect\' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    \'constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter.\n\n    \'nearest\' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    \'mirror\' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    \'wrap\' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    For consistency with the interpolation functions, the following mode\n    names can also be used:\n\n    \'grid-constant\'\n        This is a synonym for \'constant\'.\n\n    \'grid-mirror\'\n        This is a synonym for \'reflect\'.\n\n    \'grid-wrap\'\n        This is a synonym for \'wrap\'."}, {"mode_interp_constant"}: {"mode : {\'reflect\', \'grid-mirror\', \'constant\', \'grid-constant\', \'nearest\', \'mirror\', \'grid-wrap\', \'wrap\'}, optional\n    The `mode` parameter determines how the input array is extended\n    beyond its boundaries. Default is \'constant\'. Behavior for each valid\n    value is as follows (see additional plots and details on\n    :ref:`boundary modes <ndimage-interpolation-modes>`):\n\n    \'reflect\' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    \'grid-mirror\'\n        This is a synonym for \'reflect\'.\n\n    \'constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter. No\n        interpolation is performed beyond the edges of the input.\n\n    \'grid-constant\' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter. Interpolation\n        occurs for samples outside the input\'s extent  as well.\n\n    \'nearest\' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    \'mirror\' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    \'grid-wrap\' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    \'wrap\' (`d b c d | a b c d | b c a b`)\n        The input is extended by wrapping around to the opposite edge, but in a\n        way such that the last point and initial point exactly overlap. In this\n        case it is not well defined which sample will be chosen at the point of\n        overlap."}, {"output"}: {"output : array or dtype, optional\n    The array in which to place the output, or the dtype of the\n    returned array. By default an array of the same dtype as input\n    will be created."}, {"size_foot"}: {"size : scalar or tuple, optional\n    See footprint, below. Ignored if footprint is given.\nfootprint : array, optional\n    Either `size` or `footprint` must be defined. `size` gives\n    the shape that is taken from the input array, at every element\n    position, to define the input to the filter function.\n    `footprint` is a boolean array that specifies (implicitly) a\n    shape, but also which of the elements within this shape will get\n    passed to the filter function. Thus ``size=(n,m)`` is equivalent\n    to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n    of dimensions of the input array, so that, if the input array is\n    shape (10,10,10), and `size` is 2, then the actual size used is\n    (2,2,2). When `footprint` is given, `size` is ignored."}, {"input"}: {"input : array_like\n    The input array."}})
.docfiller: Never
