##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/integrate/_quad_vec.py 1734628983 21519
.sys = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.copy = pyimport "<failure>"


.heapq = pyimport "<failure>"


.collections = pyimport "<failure>"


.functools = pyimport "<failure>"


.warnings = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "_util"
._util = pyimport "_util"
.MapWrapper: {scipy._lib._util.MapWrapper}
._FunctionWrapper: Never
.LRUDict: ClassType
.LRUDict <: Never
.LRUDict.__max_size: Never
.LRUDict.__call__: (max_size: Obj) -> _quad_vec.LRUDict
.LRUDict.__setitem__: (self: Never, key: Obj, value: Obj) -> NoneType
.LRUDict.update: (self: _quad_vec.LRUDict, other: Obj) -> Never

.SemiInfiniteFunc: ClassType
.SemiInfiniteFunc._func: Never
.SemiInfiniteFunc._sgn: Never
.SemiInfiniteFunc._start: Never
.SemiInfiniteFunc._tmin: Never
.SemiInfiniteFunc.__call__: (self: _quad_vec.SemiInfiniteFunc, t: Nat) -> Never
.SemiInfiniteFunc.get_t: |R: Type, Type_129786 <: Structural({.__sub__ = (self: Never, ?R) -> ?R})|(self: _quad_vec.SemiInfiniteFunc, x: Type_129786) -> Float
.SemiInfiniteFunc.__call__: (self: _quad_vec.SemiInfiniteFunc, t: Nat) -> Never

.DoubleInfiniteFunc: ClassType
.DoubleInfiniteFunc._func: Never
.DoubleInfiniteFunc._tmin: Never
.DoubleInfiniteFunc.__call__: (self: _quad_vec.DoubleInfiniteFunc, t: Int) -> Never
.DoubleInfiniteFunc.get_t: |Type_129802 <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), R: Type|(self: _quad_vec.DoubleInfiniteFunc, x: Type_129802) -> Float
.DoubleInfiniteFunc.__call__: (self: _quad_vec.DoubleInfiniteFunc, t: Int) -> Never

._max_norm: (x: global::Num) -> Never
._get_sizeof: (obj: Obj) -> Never
.Type__Bunch: ClassType
.Type__Bunch.__keys: Never
.Type__Bunch.__call__: (**kwargs := ?129820) -> _quad_vec.Type__Bunch
.Type__Bunch.__repr__: (self: _quad_vec.Type__Bunch) -> Str

.quad_vec: |Type_139355 :> {"2"}, Type_139355 <: (?O) -> ?Type_138928, O :> Float, R :> {10000}, R <: Float, Type_129869 <: Bool, O: Type, Type_138928: Type, Type_129828 :> {0.0}, R :> Float, Type_129863 :> {False}, Type_129863 <: Bool, R: Type, R <: Structural({.__mul__ = (self: Never, ?R) -> ?O; .__neg__ = (self: Never) -> ?R})|(f: _quad_vec.DoubleInfiniteFunc, a: R, b: Obj, epsabs: Type_129828 := Type_129828 and Type_129828, epsrel: {0.00000001} := {0.00000001} and {0.00000001}, norm: Type_139355 := Type_139355 and Type_139355, cache_size: {100000000.0} := {100000000.0} and {100000000.0}, limit: R := R and R, workers: {1} := {1} and {1}, points: {None} := {None} and {None}, quadrature: {None} := {None} and {None}, full_output: Type_129863 := Type_129863 and Type_129863, args: Type_129869 := Type_129869 and Type_129869) -> global::Indexable(Obj, R)
._subdivide_interval: (args: global::Indexable(Obj, global::Indexable(Obj, Never))) -> global::Tuple([Never, Never, Never, global::Tuple([global::Tuple([Structural({.__add__ = (self: Never, Never) -> Float}), Float, Never, Never]), global::Tuple([Float, Structural({.__add__ = (self: Never, Never) -> Float}), Never, Never])]), Structural({.__add__ = (self: Never, Obj) -> Never})])
._quadrature_trapezoid: (x1: Float, x2: Float, f: (Float) -> Obj, norm_func: (Obj) -> Never) -> global::Tuple([Float, Float, Float])


._quadrature_gk: |R <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R <: Float, O :> Float, O: Type, R :> Nat, K :> Int, R <: Structural({.__add__ = (self: Never, ?R) -> ?R}), R: Type, R <: global::Num|(a: R, b: R, f: (O) -> R, norm_func: (O) -> Never, x: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, K) -> R}), w: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Int) -> Structural({.__mul__ = (self: Never, R) -> R})}), v: global::Indexable(K, Structural({.__mul__ = (self: Never, R) -> R and (self: Never, R) -> R}))) -> global::Tuple([O, Float, Float])
._quadrature_gk21: |O :> Float|(a: Float, b: Float, f: _quad_vec.DoubleInfiniteFunc, norm_func: (O) -> Never) -> global::Tuple([O, Float, Float])

._quadrature_gk15: |O :> Float|(a: Never, b: Never, f: (O) -> Structural({.__add__ = (self: Never, Never) -> Never}), norm_func: (O) -> Never) -> global::Tuple([O, Float, Float])

