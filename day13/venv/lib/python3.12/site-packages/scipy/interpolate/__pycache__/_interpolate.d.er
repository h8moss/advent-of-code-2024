##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/interpolate/_interpolate.py 1734628983 79425
.__all__: global::List!({"PPoly", "NdPPoly", "interp1d", "lagrange", "interp2d", "BPoly"}, 6)
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.prod: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "__init__"

.array: Never
.asarray: Never
.intp: Never
.poly1d: Never
.searchsorted: Never
.spec = pyimport "__init__"


.___v_desugar_3 = pyimport "_util"
._util = pyimport "_util"
.copy_if_needed: {False}
.___v_desugar_4 = pyimport "__init__"

.comb: Never
.___v_desugar_5 = pyimport "__init__"

._fitpack_py: Never
.___v_desugar_6 = pyimport "_polyint"
._polyint = pyimport "_polyint"
._Interpolator1D: Never
.___v_desugar_7 = pyimport "__init__"

._ppoly: Never
.___v_desugar_8 = pyimport "<failure>"

._ndim_coords_from_arrays: Never
.___v_desugar_9 = pyimport "_bsplines"
._bsplines = pyimport "_bsplines"
.make_interp_spline: |R: Type|(x: Never, y: Obj, k: {0} := {0}, t: Never := Never, bc_type: {"not-a-knot"} := {"not-a-knot"}, axis: Structural({.__lt__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}) := {0} and Structural({.__lt__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}), check_finite: Structural({.__and__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool}) := {True} and Structural({.__and__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool})) -> Never
.BSpline: Never
.lagrange: |E: Type, Type_289798: Type, R: Type, Type_283326 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?E) -> ?289798 and (self: Obj, ?E) -> ?R}), E :> {Type_v_global_4: Int | (Type_v_global_4 >= 0) and (Type_v_global_4 <= pred(<failure>))}|(x: Type_283326, w: global::Indexable(E, Never)) -> Never
.err_mesg: {"`interp2d` has been removed in SciPy 1.14.0.\n\nFor legacy code, nearly bug-for-bug compatible replacements are\n`RectBivariateSpline` on regular grids, and `bisplrep`.`bisplev` for\nscattered 2D data.\n\nIn new code, for regular grids use `RegularGridInterpolator` instead.\nFor scattered data, prefer `LinearNDInterpolator` or\n`CloughTocher2DInterpolator`.\n\nFor more details see\nhttps:..scipy.github.io.devdocs.tutorial.interpolate.interp_transition_guide.html\n"}
.Type_interp2d: ClassType
.Type_interp2d.__call__: (x: Obj, y: Obj, z: Obj, kind: Obj := Obj, copy: Obj := Obj, bounds_error: Obj := Obj, fill_value: Obj := Obj) -> _interpolate.Type_interp2d

._check_broadcast_up_to: |E: Type, Type_289890: Type, Type_289860: Type, E <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?289860) -> ?289861}), Type_289861: Type, R <: Structural({.shape = ?289848 and ?E; .dtype = ?289890; .size = ?E; .ravel = (self: Obj) -> ?289895}), Type_289848: Type, Type_289895: Type|(arr_from: R, shape_to: E, name: Obj) -> Never
._do_extrapolate: (fill_value: Obj) -> {fill_value in {"extrapolate"}}
.Type_interp1d: ClassType
.Type_interp1d <: Never
.Type_interp1d.axis: Never
.Type_interp1d._kind: Never
.Type_interp1d.bounds_error: Never
.Type_interp1d.fill_value: Never
.Type_interp1d.copy: Never
.Type_interp1d.y: Never
.Type_interp1d._y: Never
.Type_interp1d.x: Never
.Type_interp1d.__call__: (x: Obj, y: Obj, kind: Obj := Obj, axis: Obj := Obj, copy: Obj := Obj, bounds_error: Obj := Obj, fill_value: Obj := Obj, assume_sorted: Obj := Obj) -> _interpolate.Type_interp1d
.Type_interp1d.fill_value: (self: _interpolate.Type_interp1d) -> Never
.Type_interp1d.fill_value: (self: _interpolate.Type_interp1d, fill_value: {"extrapolate"}) -> NoneType
.Type_interp1d._check_and_update_bounds_error_for_extrapolation: (self: _interpolate.Type_interp1d) -> NoneType
.Type_interp1d._call_linear_np: (self: _interpolate.Type_interp1d, x_new: Obj) -> Never
.Type_interp1d._call_linear: |K: Type, Type_283373 <: Structural({.__sub__ = (self: Never, ?R) -> ?Self}), Self <: global::Indexable(?K, ?V), R: Type, V: Type|(self: _interpolate.Type_interp1d, x_new: Type_283373) -> Never
.Type_interp1d._call_nearest: (self: _interpolate.Type_interp1d, x_new: Obj) -> Never
.Type_interp1d._call_previousnext: (self: _interpolate.Type_interp1d, x_new: Obj) -> Never
.Type_interp1d._call_spline: (self: _interpolate.Type_interp1d, x_new: Obj) -> Never
.Type_interp1d._call_nan_spline: (self: _interpolate.Type_interp1d, x_new: Obj) -> Never
.Type_interp1d._evaluate: (self: _interpolate.Type_interp1d, x_new: Obj) -> Never
.Type_interp1d._check_bounds: |Type_290516: Type, Type_283391 <: Structural({.__getitem__ = (self: Obj, ?290515) -> ?290516 and (self: Obj, ?290524) -> ?290525; .__gt__ = (self: Never, ?R) -> Bool; .__lt__ = (self: Never, ?R) -> Bool}), Type_290515: Type, Type_290524: Type, Type_290525: Type, R: Type|(self: _interpolate.Type_interp1d, x_new: Type_283391) -> global::Tuple([Bool, Bool])

.Type__PPolyBase: ClassType
.Type__PPolyBase.extrapolate: Never
.Type__PPolyBase.axis: Never
.Type__PPolyBase.c: Never
.Type__PPolyBase.x: Never
.Type__PPolyBase.__call__: (self: Obj, x: Obj, nu: Obj := Obj, extrapolate: Obj := Obj) -> Never
.Type__PPolyBase.__slots__: global::Tuple([{"c"}, {"x"}, {"extrapolate"}, {"axis"}])
.Type__PPolyBase._get_dtype: (self: _interpolate.Type__PPolyBase, dtype: Obj) -> Never
.Type__PPolyBase.construct_fast: (cls: Obj, c: Obj, x: Obj, extrapolate: Obj := Obj, axis: Obj := Obj) -> Never
.Type__PPolyBase._ensure_c_contiguous: (self: _interpolate.Type__PPolyBase) -> NoneType
.Type__PPolyBase.extend: (self: _interpolate.Type__PPolyBase, c: Obj, x: Obj) -> NoneType
.Type__PPolyBase.__call__: (self: Obj, x: Obj, nu: Obj := Obj, extrapolate: Obj := Obj) -> Never

.PPoly: ClassType
_interpolate = pyimport "_interpolate"
.PPoly <: .Type__PPolyBase
.PPoly._evaluate: (self: _interpolate.PPoly, x: Obj, nu: Obj, extrapolate: Obj, out: Obj) -> Never
.PPoly.derivative: (self: _interpolate.PPoly, nu: {0} := {0}) -> Never
.PPoly.antiderivative: (self: _interpolate.PPoly, nu: Int := Int) -> Never
.PPoly.integrate: |R <: Structural({.__sub__ = (self: Never, ?R) -> ?R and (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?R; .__le__ = (self: Never, ?R) -> Bool; .__lt__ = (self: Never, ?R) -> Bool}), R: Type, O: Type|(self: _interpolate.PPoly, a: R, b: R, extrapolate: {"periodic"} := {None} and {"periodic"}) -> Never
.PPoly.solve: (self: _interpolate.PPoly, y: Obj := Obj, discontinuity: Obj := Obj, extrapolate: Obj := Obj) -> Never
.PPoly.roots: (self: _interpolate.PPoly, discontinuity: Obj := Obj, extrapolate: Obj := Obj) -> Never
.PPoly.from_spline: (cls: _interpolate.Type__PPolyBase, tck: global::Indexable(Obj, Structural({.__len__ = (self: Never) -> Nat; .__add__ = (self: Never, Obj) -> Never; .__sub__ = (self: Never, Int) -> Never})), extrapolate: Obj := Obj) -> Never
.PPoly.from_bernstein_basis: |Type_283404: Type, Type_283464 <: Structural({.extrapolate = ?291731; .axis = ?Type_283407; .c = ?291656 and ?291661; .x = ?291654 and ?Type_283404}), Type_291656: Type, Type_291654: Type, Type_283405: Type, Type_291661: Type, Type_291731: Type, Type_283407: Type|(cls: _interpolate.Type__PPolyBase, bp: Type_283464, extrapolate: Type_283405 := Type_283405) -> Never

.BPoly: ClassType
.BPoly <: .Type__PPolyBase
.BPoly._evaluate: (self: _interpolate.BPoly, x: Obj, nu: Obj, extrapolate: Obj, out: Obj) -> Never
.BPoly.derivative: |Type_283410 <: _interpolate.BPoly|(self: Type_283410, nu: {1} := {1} and {1}) -> Type_283410
.BPoly.antiderivative: |Type_283410 <: _interpolate.BPoly|(self: Type_283410, nu: Int := Int and Int) -> Type_283410
.BPoly.integrate: (self: (Structural({.__sub__ = (self: Never, Never) -> global::Mul(Never); .__add__ = (self: Never, Obj) -> Never and (self: Never, Obj) -> Structural({.__add__ = (self: Never, Obj) -> Structural({.__sub__ = (self: Never, Never) -> Never})})})) -> Structural({.__sub__ = (self: Never, Never) -> Never}), a: Never, b: Never, extrapolate: {"periodic"} := {None} and {"periodic"}) -> Never
.BPoly.extend: |Self <: global::Indexable(?K, ?V), K: Type, Type_283489 <: Structural({.shape = ?Self and ?Self}), V: Type, Self <: global::Indexable(?K, ?V)|(self: _interpolate.BPoly, c: Type_283489, x: Obj) -> Never
.BPoly.from_power_basis: |Type_292277: Type, Type_292345: Type, Type_283404: Type, Type_283405: Type, Type_283407: Type, Type_292272: Type, Type_292270: Type, Type_283493 <: Structural({.extrapolate = ?292345; .axis = ?Type_283407; .c = ?292272 and ?292277; .x = ?292270 and ?Type_283404})|(cls: _interpolate.Type__PPolyBase, pp: Type_283493, extrapolate: Type_283405 := Type_283405) -> Never
.BPoly.from_derivatives: |Type_292482: Type, Type_283499 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Int) -> ?292479 and (self: Obj, ?292482) -> ?292483}), Type_292483: Type, Type_283503: Type, Type_292479: Type, Type_292643: Type|(cls: (Obj, Obj, Type_283503) -> Type_292643, xi: Obj, yi: Type_283499, orders: Never := Never, extrapolate: Type_283503 := {None} and Type_283503) -> Type_292643
.BPoly._construct_from_derivatives: |Type_283506 <: Structural({.__sub__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O}), R: Type, O: Type|(xa: R, xb: Type_283506, ya: Obj, yb: Obj) -> Never
.BPoly._raise_degree: |Self <: global::Indexable(?K, ?V), K: Type, Type_283489 <: Structural({.shape = ?Self and ?Self}), V: Type, Self <: global::Indexable(?K, ?V)|(c: Type_283489, d: {0}) -> Never

.NdPPoly: ClassType
.NdPPoly.extrapolate: Never
.NdPPoly.x: Never
.NdPPoly.c: Never
.NdPPoly.__call__: (self: _interpolate.NdPPoly, x: Obj, nu: Structural({.ndim = Obj; .shape = global::Indexable(Obj, Nat)}) := Structural({.ndim = Obj; .shape = global::Indexable(Obj, Nat)}), extrapolate: Obj := Obj) -> Never
.NdPPoly.construct_fast: (cls: Obj, c: Obj, x: Obj, extrapolate: Obj := Obj) -> Never
.NdPPoly._get_dtype: (self: _interpolate.NdPPoly, dtype: Obj) -> Never
.NdPPoly._ensure_c_contiguous: (self: _interpolate.NdPPoly) -> NoneType
.NdPPoly.__call__: (self: _interpolate.NdPPoly, x: Obj, nu: Structural({.ndim = Obj; .shape = global::Indexable(Obj, Nat)}) := Structural({.ndim = Obj; .shape = global::Indexable(Obj, Nat)}), extrapolate: Obj := Obj) -> Never
.NdPPoly._derivative_inplace: |R: Type, O <: Structural({.__mod__ = (self: Never, ?R) -> ?O}), O: Type|(self: _interpolate.NdPPoly, nu: {0}, axis: O) -> NoneType
.NdPPoly._antiderivative_inplace: |R: Type, O <: Structural({.__mod__ = (self: Never, ?R) -> ?O}), O: Type|(self: _interpolate.NdPPoly, nu: Int, axis: O) -> NoneType
.NdPPoly.derivative: (self: _interpolate.NdPPoly, nu: global::Iterable(Never)) -> Never
.NdPPoly.antiderivative: (self: _interpolate.NdPPoly, nu: global::Iterable(Never)) -> Never
.NdPPoly.integrate_1d: (self: _interpolate.NdPPoly, a: Never, b: Never, axis: Obj, extrapolate: Bool := Bool) -> Never
.NdPPoly.integrate: |Type_283557 <: Structural({.__len__ = (self: Never) -> Nat})|(self: _interpolate.NdPPoly, ranges: Type_283557, extrapolate: Bool := {None} and Bool) -> Never

