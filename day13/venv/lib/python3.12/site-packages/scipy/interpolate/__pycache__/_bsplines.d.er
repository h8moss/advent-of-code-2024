##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/interpolate/_bsplines.py 1734628983 75674
.operator = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.___v_desugar_1 = pyimport "<failure>"

.prod: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "_util"
._util = pyimport "_util"
.normalize_axis_index: |R: Type, Type_85609 <: Structural({.__lt__ = (self: Never, ?R) -> Bool and (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool}), R <: Nat|(axis: Type_85609, ndim: R) -> Type_85609
.___v_desugar_3 = pyimport "__init__"

.get_lapack_funcs: Never
.LinAlgError: Never
.cholesky_banded: Never
.cho_solve_banded: Never
.solve: Never
.solve_banded: Never
.___v_desugar_4 = pyimport "__init__"

.minimize_scalar: |Type_261916: Type, Type_258898: Type|(fun: Type_258898, bracket: Obj := Obj, bounds: Obj := Obj, args: Obj := Obj, method: (Type_258898) -> Type_261916 := {None} and (Type_258898) -> Type_261916, tol: Obj := {None}, options: global::Dict({global::Tuple([Obj, Never]): Never}) := {None} and global::Dict({global::Tuple([Obj, Never]): Never})) -> Type_261916
.___v_desugar_5 = pyimport "__init__"

._bspl: Never
.___v_desugar_6 = pyimport "__init__"

._fitpack_impl: Never
.___v_desugar_7 = pyimport "__init__"

.csr_array: Never
.___v_desugar_8 = pyimport "__init__"

.poch: Never
.___v_desugar_9 = pyimport "<failure>"

.combinations: Never
.__all__: global::List!({"BSpline", "make_smoothing_spline", "make_lsq_spline", "make_interp_spline"}, 4)
._get_dtype: (dtype: Obj) -> Never
._as_float_array: (x: Obj, check_finite: Structural({.__and__ = (self: Never, Obj) -> Bool}) := {False} and Structural({.__and__ = (self: Never, Obj) -> Bool})) -> Never
._dual_poly: |K: Type, Type_283614 <: Structural({.__add__ = (self: Never, ?R) -> ?K}), R: Type|(j: Type_283614, k: {0}, t: global::Indexable(K, R), y: Structural({.__sub__ = (self: Never, R) -> Never})) -> Never
._diff_dual_poly: (j: Never, k: {0}, y: Never, d: {0}, t: global::Indexable(Obj, Int)) -> Nat
.BSpline: ClassType
.BSpline.axis: Never
.BSpline.t: Never
.BSpline.c: Never
.BSpline.k: Never
.BSpline.__call__: (self: _bsplines.BSpline, x: Obj, nu: Obj := Obj, extrapolate: Obj := Obj) -> Never
.BSpline.construct_fast: (cls: Obj, t: Obj, c: Obj, k: Obj, extrapolate: Obj := Obj, axis: Obj := Obj) -> Never
.BSpline.tck: (self: _bsplines.BSpline) -> global::Tuple([Never, Never, Never])
.BSpline.basis_element: |Type_283610 <: Structural({.__len__ = (self: Never) -> Nat})|(cls: Obj, t: Type_283610, extrapolate: Obj := {True}) -> Never
.BSpline.design_matrix: |R: Type, O: Type, Type_283610 <: Structural({.__sub__ = (self: Never, ?R) -> ?O})|(cls: Obj, x: Type_283610, t: Never, k: Obj, extrapolate: {"periodic"} := {False} and {"periodic"}) -> Never
.BSpline.__call__: (self: _bsplines.BSpline, x: Obj, nu: Obj := Obj, extrapolate: Obj := Obj) -> Never
.BSpline._evaluate: (self: _bsplines.BSpline, xp: Obj, nu: Obj, extrapolate: Obj, out: Obj) -> Never
.BSpline._ensure_c_contiguous: (self: _bsplines.BSpline) -> NoneType
.BSpline.derivative: (self: _bsplines.BSpline, nu: Obj := Obj) -> Never
.BSpline.antiderivative: (self: _bsplines.BSpline, nu: Obj := Obj) -> Never
.BSpline.integrate: |R <: Structural({.__sub__ = (self: Never, ?R) -> ?R and (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?R; .__le__ = (self: Never, ?R) -> Bool; .__lt__ = (self: Never, ?R) -> Bool}), R: Type, O: Type|(self: _bsplines.BSpline, a: R, b: R, extrapolate: {"periodic"} := {None} and {"periodic"}) -> Never
.BSpline.from_power_basis: |Type_285869: Type, Type_283685 <: Structural({.extrapolate = ?285964; .axis = ?285965; .c = ?285869 and ?285870; .x = ?285868}), Type_285965: Type, Type_285868: Type, Type_285964: Type, Type_285870: Type|(cls: Obj, pp: Type_283685, bc_type: {"not-a-knot"} := {"not-a-knot"}) -> Never
.BSpline.insert_knot: |R: Type, Type_283690 <: Structural({.__lt__ = (self: Never, ?R) -> Bool; .__gt__ = (self: Never, ?R) -> Bool}), R :> {0}|(self: _bsplines.BSpline, x: Type_283690, m: Structural({.__le__ = (self: Never, R) -> Bool}) := {1} and Structural({.__le__ = (self: Never, R) -> Bool})) -> Never

._not_a_knot: |E: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?R; .__mod__ = (self: Never, ?R) -> ?E}), T: Type, R: Type, O: Type, N: Nat|(x: global::List(T, ?N), k: R) -> global::List(T, N)
._augknt: |E: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?R; .__mod__ = (self: Never, ?R) -> ?E}), T: Type, R: Type, O: Type, N: Nat|(x: global::List(T, ?N), k: R) -> global::List(T, N)
._convert_string_aliases: |E :> {"natural"}|(deriv: E, target_shape: Obj) -> E
._process_deriv_spec: (deriv: Obj) -> Never
._woodbury_algorithm: |K: Type, R :> {2}, Self <: global::Indexable(?K, ?V), V: Type, R :> {1}, O: Type, O <: Structural({.__div__ = (self: Never, ?R) -> ?O}), R: Type, Type_283705 <: Structural({.shape = ?Self}), O <: Structural({.__mod__ = (self: Never, ?R) -> ?O})|(A: Type_283705, ur: Obj, ll: Obj, b: Obj, k: Structural({.__sub__ = (self: Never, R) -> O and (self: Never, R) -> O; .__mod__ = (self: Never, R) -> R; .__add__ = (self: Never, R) -> O})) -> O
._periodic_knots: |E: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?R; .__mod__ = (self: Never, ?R) -> ?E}), T: Type, R: Type, O: Type, N: Nat|(x: global::List(T, ?N), k: R) -> global::List(T, N)
._make_interp_per_full_matr: (x: Obj, y: Obj, t: Obj, k: Never) -> Never
._make_periodic_spline: |Self <: global::Indexable(?K, ?V), K: Type, Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V), Type_283720 <: Structural({.shape = ?Self and ?Self; .reshape = (self: Obj, ?V, ?286524) -> ?Self}), V: Type, Type_286524: Type|(x: Obj, y: Type_283720, t: Structural({.__len__ = (self: Never) -> Nat}), k: Never, axis: Obj) -> Never
.make_interp_spline: |R: Type|(x: Never, y: Obj, k: {0} := {0}, t: Never := Never, bc_type: {"not-a-knot"} := {"not-a-knot"}, axis: Structural({.__lt__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}) := {0} and Structural({.__lt__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}), check_finite: Structural({.__and__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool}) := {True} and Structural({.__and__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool})) -> Never
.make_lsq_spline: |O <: Bool, R <: Structural({.__sub__ = (self: Never, Obj) -> ?O}), O: Type, R: Type|(x: Never, y: Obj, t: global::Indexable(Obj, R), k: Obj := Obj, w: Structural({.size = Obj}) := Structural({.size = Obj}), axis: Never := Never, check_finite: Structural({.__and__ = (self: Never, R) -> O and (self: Never, R) -> O}) := {True} and Structural({.__and__ = (self: Never, R) -> O and (self: Never, R) -> O})) -> Never
._compute_optimal_gcv_parameter: ||Never
._coeff_of_divided_diff: |E: Type, K: Type, V: Type, Self <: global::Indexable(?K, ?V), Type_288387: Type, Type_283755 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?288386) -> ?288387 and (self: Obj, ?E) -> ?R}), R: Type, Type_288386: Type|(x: Type_283755) -> Never
.make_smoothing_spline: |R <: {<failure>}, R: Type, R :> {0}, R :> {0.0}|(x: Obj, y: Obj, w: Structural({.__le__ = (self: Never, R) -> Bool; .__getitem__ = (self: Obj, Obj) -> R and (self: Obj, Obj) -> R}) := {None} and Structural({.__le__ = (self: Never, R) -> Bool; .__getitem__ = (self: Obj, Obj) -> R and (self: Obj, Obj) -> R}), lam: Structural({.__lt__ = (self: Never, R) -> Bool; .__mul__ = (self: Never, R) -> R}) := {None} and Structural({.__lt__ = (self: Never, R) -> Bool; .__mul__ = (self: Never, R) -> R})) -> Never
.fpcheck: |R <: Structural({.__add__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O}), R: Type, O: Type|(x: Obj, t: Obj, k: R) -> global::Tuple([])
