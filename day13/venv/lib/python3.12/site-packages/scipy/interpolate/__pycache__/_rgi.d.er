##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/interpolate/_rgi.py 1734628983 31491
.__all__: global::List!({"interpn", "RegularGridInterpolator"}, 2)
.itertools = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.warnings = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.ssl = pyimport "__init__"


.___v_desugar_1 = pyimport "<failure>"

._ndim_coords_from_arrays: Never
.___v_desugar_2 = pyimport "_cubic"
._cubic = pyimport "_cubic"
.PchipInterpolator: {_cubic.PchipInterpolator}
.___v_desugar_3 = pyimport "<failure>"

.evaluate_linear_2d: Never
.find_indices: Never
.___v_desugar_4 = pyimport "_bsplines"
._bsplines = pyimport "_bsplines"
.make_interp_spline: |R: Type|(x: Never, y: Obj, k: {0} := {0}, t: Never := Never, bc_type: {"not-a-knot"} := {"not-a-knot"}, axis: Structural({.__lt__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}) := {0} and Structural({.__lt__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}), check_finite: Structural({.__and__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool}) := {True} and Structural({.__and__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool})) -> Never
.___v_desugar_5 = pyimport "_fitpack2"
._fitpack2 = pyimport "_fitpack2"
.RectBivariateSpline: {_fitpack2.RectBivariateSpline}
.___v_desugar_6 = pyimport "_ndbspline"
._ndbspline = pyimport "_ndbspline"
.make_ndbspl: |Type_300912 <: Structural({.__len__ = (self: Never) -> Nat})|(points: Type_300912, values: Structural({.shape = global::Indexable(Obj, Never); .reshape = (self: Obj, Obj) -> Never}), k: Never := Never, solver: Obj := Obj, **solver_args := ?300918) -> Never
._check_points: |K: Type, R <: Structural({.__gt__ = (self: Never, ?R) -> Bool; .__lt__ = (self: Never, ?R) -> Bool}), T <: global::Indexable(?K, ?R), T <: global::Indexable(?K, R), R: Type, T :> Nat|(points: global::Iterable(T)) -> global::Tuple([global::Tuple([T]), global::Tuple([T])])
._check_dimensionality: |Type_300760 <: Structural({.__len__ = (self: Never) -> Nat})|(points: Type_300760, values: Structural({.ndim = Float; .shape = global::Indexable(Obj, Nat)})) -> NoneType
.RegularGridInterpolator: ClassType
.RegularGridInterpolator.bounds_error: Never
.RegularGridInterpolator.fill_value: Never
.RegularGridInterpolator.method: Never
.RegularGridInterpolator.values: Never
.RegularGridInterpolator.__call__: (self: Obj, xi: NoneType or Int, method: Obj := Obj, nu: Obj := Obj) -> Never
.RegularGridInterpolator._SPLINE_DEGREE_MAP: global::Dict!({{"pchip"}: {3}, {"cubic"}: {3}, {"slinear_legacy"}: {1}, {"quintic_legacy"}: {5}, {"cubic_legacy"}: {3}, {"quintic"}: {5}, {"slinear"}: {1}})
.RegularGridInterpolator._SPLINE_METHODS_recursive: global::Set({"cubic_legacy", "slinear_legacy", "quintic_legacy", "pchip"}, 4)
.RegularGridInterpolator._SPLINE_METHODS_ndbspl: global::Set({"quintic", "slinear", "cubic"}, 3)
.RegularGridInterpolator._SPLINE_METHODS: global::List!({"quintic", "cubic_legacy", "cubic", "pchip", "slinear_legacy", "slinear", "quintic_legacy"}, _: Nat)
.RegularGridInterpolator._ALL_METHODS: global::List!({"quintic", "cubic_legacy", "cubic", "pchip", "slinear_legacy", "slinear", "quintic_legacy"}, _: Nat + _: Nat)
.RegularGridInterpolator._construct_spline: (self: _rgi.RegularGridInterpolator, method: Obj, solver: Obj := Obj, **solver_args := ?300784) -> Never
.RegularGridInterpolator._check_dimensionality: (self: _rgi.RegularGridInterpolator, grid: Obj, values: Obj) -> Never
.RegularGridInterpolator._check_points: (self: _rgi.RegularGridInterpolator, points: Obj) -> Never
.RegularGridInterpolator._check_values: |Type_300794: Type|(self: _rgi.RegularGridInterpolator, values: Type_300794) -> Type_300794
.RegularGridInterpolator._check_fill_value: |Type_300798: Type, Type_301746: Type, Type_300797 <: Structural({.dtype = ?301746})|(self: _rgi.RegularGridInterpolator, values: Type_300797, fill_value: Type_300798) -> Type_300798
.RegularGridInterpolator.__call__: (self: Obj, xi: NoneType or Int, method: Obj := Obj, nu: Obj := Obj) -> Never
.RegularGridInterpolator._prepare_xi: (self: _rgi.RegularGridInterpolator, xi: NoneType or Int) -> global::Tuple([Never, Never, Nat, Never, {None}])
.RegularGridInterpolator._evaluate_linear: (self: _rgi.RegularGridInterpolator, indices: Obj, norm_distances: Obj) -> global::Dict!(_: global::GenericDict)
.RegularGridInterpolator._evaluate_nearest: (self: _rgi.RegularGridInterpolator, indices: Obj, norm_distances: Obj) -> global::Dict!(_: global::GenericDict)
.RegularGridInterpolator._validate_grid_dimensions: |T :> NoneType, T: Type|(self: _rgi.RegularGridInterpolator, points: global::Iterable(T), method: T) -> T
.RegularGridInterpolator._evaluate_spline: |T :> {"pchip"}, T :> {2}, T <: NoneType or Int|(self: _rgi.RegularGridInterpolator, xi: T, method: T) -> global::Dict!(_: global::GenericDict)
.RegularGridInterpolator._do_spline_fit: (x: Never, y: Obj, pt: Obj, k: {0}) -> Never
.RegularGridInterpolator._do_pchip: |K: Type, Type_285057 <: global::Indexable(?K, Type_285057), V: Type, Type_285057 <: global::Indexable(?K, ?V)|(x: Obj, y: Type_285057, pt: Obj, k: Obj) -> Type_285057
.RegularGridInterpolator._find_indices: (self: _rgi.RegularGridInterpolator, xi: Obj) -> global::Indexable(Obj, Never)
.RegularGridInterpolator._find_out_of_bounds: |Self <: global::Indexable(?K, ?V), Type_300840 <: Structural({.shape = ?Self}), K: Type, V: Type|(self: _rgi.RegularGridInterpolator, xi: Type_300840) -> Never

.interpn: |Type_302992: Type, Type_298976: Type, Type_302994: Type, Type_300842 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?302992) -> ?Type_298976 and (self: Obj, ?302994) -> ?Type_298977}), Type_298977: Type|(points: Type_300842, values: Never, xi: Obj, method: {"splinef2d"} := {"linear"} and {"splinef2d"}, bounds_error: Bool := {True} and Bool, fill_value: Obj := Obj) -> Never
