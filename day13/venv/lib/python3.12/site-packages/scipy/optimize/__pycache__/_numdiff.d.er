##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_numdiff.py 1734628983 28792

.functools = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "__init__"

.norm: Never
.___v_desugar_2 = pyimport "__init__"

.LinearOperator: Never
.___v_desugar_3 = pyimport "<failure>"

.issparse: Never
.csc_matrix: Never
.csr_matrix: Never
.coo_matrix: Never
.find: Never
.___v_desugar_4 = pyimport "<failure>"

.group_dense: Never
.group_sparse: Never
.___v_desugar_5 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.atleast_nd: (x: Obj, ndim: Int, xp: Obj := Obj) -> Never
.array_namespace: (*arrays: Obj) -> Never
._adjust_scheme_to_bounds: |R <: Float, O: Type, Type_131303 <: global::Dict!(?D), R <: Structural({.__sub__ = (self: Never, ?R) -> Never; .__add__ = (self: Never, ?R) -> ?O}), D: global::GenericDict, R: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O})|(x0: R, h: Structural({.__getitem__ = (self: Obj, Obj) -> Never; .__mul__ = (self: Never, R) -> R; .copy = (self: Obj) -> Type_131303}), num_steps: R, scheme: {"1-sided"}, lb: R, ub: R) -> global::Tuple([Type_131303, Never])
._eps_for_method: |T: Type|(x0_dtype: Obj, f0_dtype: Obj, method: T) -> T
._compute_absolute_step: |Type_130204 <: Structural({.__mul__ = (self: Never, ?R) -> ?O}), Type_130190: Type, R: Type, O: Type, R <: Structural({.dtype = ?Type_130190; .__add__ = (self: Never, ?R) -> ?O; .__ge__ = (self: Never, ?R) -> Bool})|(rel_step: Type_130204, x0: R, f0: Structural({.dtype = Obj}), method: Never) -> O or O
._prepare_bounds: |Type_134081: Type, Type_130218 <: Structural({.shape = ?134081 and ?134128}), Type_134128: Type|(bounds: Obj, x0: Type_130218) -> global::Tuple([Never, Never])
.group_columns: (A: Obj, order: Structural({.shape = Obj}) := Structural({.shape = Obj})) -> Never
.approx_derivative: (fun: (Structural({.dtype = Ref(Obj)})) -> Never, x0: Obj, method: Never := Never, rel_step: Never := Never, abs_step: Never := Never, f0: Never := Never, bounds: Structural({.__len__ = (self: Never) -> Nat}) := Structural({.__len__ = (self: Never) -> Nat}), sparsity: Structural({.__and__ = (self: Never, Obj) -> Bool}) := {None} and Structural({.__and__ = (self: Never, Obj) -> Bool}), as_linear_operator: Obj := {False}, args: Obj := Obj, kwargs: Obj := global::Dict!({Never: Never})) -> Never
._linear_operator_difference: |Type_137204 <: Structural({.dtype = ?135041}), Type_136776: Type, Type_134554 <: Structural({.dtype = ?Type_135041}), Type_135041 <: Ref(Obj), R: Type, Type_130283 <: Structural({.size = ?136776; .__add__ = (self: Never, ?R) -> ?Type_134554})|(fun: |Type_137204 <: Structural({.dtype = ?135041}), Type_135041 <: Ref(Obj)|(x: Type_137204) -> Obj, x0: Type_130283, f0: Never, h: Never, method: Never) -> Never
._dense_difference: |Type_137204 <: Structural({.dtype = ?135041}), Type_130301 <: Structural({.astype = (self: Obj, ?137202, copy := ?137203) -> ?137204; .copy = (self: Obj) -> Never; .size = ?137113; .__getitem__ = (self: Obj, ?K) -> ?R and (self: Obj, ?K) -> ?R}), K: Type, Type_137204: Type, Type_137113: Type, MAX: Int, K :> {Type_v_global_4: Int | (Type_v_global_4 >= 0) and (Type_v_global_4 <= pred(?MAX))}, Type_137202: Type, Type_137203: Type, Type_135041 <: Ref(Obj), R: Type|(fun: |Type_137204 <: Structural({.dtype = ?135041}), Type_135041 <: Ref(Obj)|(x: Type_137204) -> Obj, x0: Type_130301, f0: Never, h: Never, use_one_sided: global::Indexable(K, Bool), method: {"2-point"}) -> Never
._sparse_difference: |Type_137204 <: Structural({.dtype = ?135041}), K: Type, R <: Structural({.__and__ = (self: Never, ?R) -> ?O}), Type_138089: Type, O: Type, Type_139505: Type, R <: Structural({.__add__ = (self: Never, Never) -> Never and (self: Never, ?R) -> Never; .copy = (self: Obj) -> Never; .size = ?138090; .__getitem__ = (self: Obj, ?K) -> ?R}), Type_138090: Type, R <: Structural({.size = ?138089; .__getitem__ = (self: Obj, ?139505) -> ?R}), Type_135041 <: Ref(Obj), R: Type|(fun: |Type_137204 <: Structural({.dtype = ?135041}), Type_135041 <: Ref(Obj)|(x: Type_137204) -> Obj, x0: R, f0: R, h: Never, use_one_sided: Structural({.__invert__ = (self: Never) -> R; .__and__ = (self: Never, R) -> K; .__getitem__ = (self: Obj, Obj) -> Structural({.__invert__ = (self: Never) -> R})}), structure: Structural({.__len__ = (self: Never) -> Nat}), groups: Obj, method: {"2-point"}) -> Never
.check_derivative: ||Never
