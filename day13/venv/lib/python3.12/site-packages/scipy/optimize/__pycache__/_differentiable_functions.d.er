##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_differentiable_functions.py 1734628983 24735
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.sps = pyimport "__init__"


.___v_desugar_1 = pyimport "_numdiff"
._numdiff = pyimport "_numdiff"
.approx_derivative: (fun: (Structural({.dtype = Ref(Obj)})) -> Never, x0: Obj, method: Never := Never, rel_step: Never := Never, abs_step: Never := Never, f0: Never := Never, bounds: Structural({.__len__ = (self: Never) -> Nat}) := Structural({.__len__ = (self: Never) -> Nat}), sparsity: Structural({.__and__ = (self: Never, Obj) -> Bool}) := {None} and Structural({.__and__ = (self: Never, Obj) -> Bool}), as_linear_operator: Obj := {False}, args: Obj := Obj, kwargs: Obj := global::Dict!({Never: Never})) -> Never
.group_columns: (A: Obj, order: Structural({.shape = Obj}) := Structural({.shape = Obj})) -> Never
.___v_desugar_2 = pyimport "_hessian_update_strategy"
._hessian_update_strategy = pyimport "_hessian_update_strategy"
.HessianUpdateStrategy: {_hessian_update_strategy.HessianUpdateStrategy}
.___v_desugar_3 = pyimport "__init__"

.LinearOperator: Never
.___v_desugar_4 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.atleast_nd: (x: Obj, ndim: Int, xp: Obj := Obj) -> Never
.array_namespace: (*arrays: Obj) -> Never
.FD_METHODS: {Type_v_global_103392: global::Tuple([Str, Str, Str]) | Type_v_global_103392 == ("2-point", "3-point", "cs")}
._wrapper_fun: |Type_193923: Type|(fun: (Obj) -> Type_193923, args: Obj := Obj) -> global::Tuple([(x: Obj) -> Never, global::List!({0}, 1)])
._wrapper_grad: (grad: (Obj) -> Never, fun: (Structural({.dtype = Ref(Obj)})) -> Never := {None} and (Structural({.dtype = Ref(Obj)})) -> Never, args: Obj := Obj, finite_diff_options: Obj := {None}) -> NoneType
._wrapper_hess: Never
.ScalarFunction: ClassType
.ScalarFunction._orig_hess: Never
.ScalarFunction.x_dtype: Never
.ScalarFunction._orig_fun: Never
.ScalarFunction.g_updated: Never
.ScalarFunction.H_updated: Never
.ScalarFunction._lowest_x: Never
.ScalarFunction._orig_grad: Never
.ScalarFunction._lowest_f: Never
.ScalarFunction.f_updated: Never
.ScalarFunction.n: Never
.ScalarFunction.x: Never
.ScalarFunction._args: Never
.ScalarFunction.__call__: (fun: Obj, x0: Obj, args: Obj, grad: Obj, hess: Obj, finite_diff_rel_step: Obj, finite_diff_bounds: Obj, epsilon: Obj := Obj) -> scipy.optimize._differentiable_functions.ScalarFunction
.ScalarFunction.nfev: (self: scipy.optimize._differentiable_functions.ScalarFunction) -> Never
.ScalarFunction.ngev: (self: scipy.optimize._differentiable_functions.ScalarFunction) -> Never
.ScalarFunction.nhev: (self: scipy.optimize._differentiable_functions.ScalarFunction) -> Never
.ScalarFunction._update_x: (self: scipy.optimize._differentiable_functions.ScalarFunction, x: Obj) -> NoneType
.ScalarFunction._update_fun: (self: scipy.optimize._differentiable_functions.ScalarFunction) -> NoneType
.ScalarFunction._update_grad: (self: scipy.optimize._differentiable_functions.ScalarFunction) -> NoneType
.ScalarFunction._update_hess: (self: scipy.optimize._differentiable_functions.ScalarFunction) -> NoneType
.ScalarFunction.fun: (self: Never, x: Obj) -> Never
.ScalarFunction.grad: (self: scipy.optimize._differentiable_functions.ScalarFunction, x: Obj) -> Never
.ScalarFunction.hess: (self: Never, x: Obj) -> Never
.ScalarFunction.fun_and_grad: (self: Never, x: Obj) -> global::Tuple([Never, Never])

.VectorFunction: ClassType
.VectorFunction.x_dtype: Never
.VectorFunction._update_hess_impl: Never
.VectorFunction._update_jac_impl: Never
.VectorFunction.nhev: Never
.VectorFunction.v: Never
.VectorFunction.n: Never
.VectorFunction.x: Never
.VectorFunction.J_updated: Never
.VectorFunction.nfev: Never
.VectorFunction.H_updated: Never
.VectorFunction._update_fun_impl: Never
.VectorFunction._update_x_impl: Never
.VectorFunction.f_updated: Never
.VectorFunction.njev: Never
.VectorFunction.m: Never
.VectorFunction.__call__: (fun: Obj, x0: Obj, jac: Obj, hess: Obj, finite_diff_rel_step: Obj, finite_diff_jac_sparsity: Obj, finite_diff_bounds: Obj, sparse_jacobian: Obj) -> scipy.optimize._differentiable_functions.VectorFunction
.VectorFunction._update_v: (self: scipy.optimize._differentiable_functions.VectorFunction, v: Never) -> NoneType
.VectorFunction._update_x: (self: scipy.optimize._differentiable_functions.VectorFunction, x: Obj) -> NoneType
.VectorFunction._update_fun: (self: scipy.optimize._differentiable_functions.VectorFunction) -> NoneType
.VectorFunction._update_jac: (self: scipy.optimize._differentiable_functions.VectorFunction) -> NoneType
.VectorFunction._update_hess: (self: scipy.optimize._differentiable_functions.VectorFunction) -> NoneType
.VectorFunction.fun: (self: Never, x: Obj) -> Never
.VectorFunction.jac: (self: scipy.optimize._differentiable_functions.VectorFunction, x: Obj) -> Never
.VectorFunction.hess: (self: Never, x: Obj, v: Never) -> Never

.LinearVectorFunction: ClassType
.LinearVectorFunction.x_dtype: Never
.LinearVectorFunction.f_updated: Never
.LinearVectorFunction.H: Never
.LinearVectorFunction.x: Never
.LinearVectorFunction.f: Never
.LinearVectorFunction.v: Never
.LinearVectorFunction.__call__: (A: Obj, x0: Obj, sparse_jacobian: Obj) -> scipy.optimize._differentiable_functions.LinearVectorFunction
.LinearVectorFunction._update_x: (self: scipy.optimize._differentiable_functions.LinearVectorFunction, x: Obj) -> NoneType
.LinearVectorFunction.fun: (self: scipy.optimize._differentiable_functions.LinearVectorFunction, x: Obj) -> Never
.LinearVectorFunction.jac: (self: scipy.optimize._differentiable_functions.LinearVectorFunction, x: Obj) -> Never
.LinearVectorFunction.hess: (self: scipy.optimize._differentiable_functions.LinearVectorFunction, x: Obj, v: Never) -> Never

.IdentityVectorFunction: ClassType
scipy = pyimport "scipy"
.IdentityVectorFunction <: scipy.optimize._differentiable_functions.LinearVectorFunction
.IdentityVectorFunction.__call__: (x0: Obj, sparse_jacobian: Obj) -> scipy.optimize._differentiable_functions.IdentityVectorFunction

