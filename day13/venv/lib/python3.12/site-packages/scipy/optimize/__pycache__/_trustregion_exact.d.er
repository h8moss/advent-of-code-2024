##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_trustregion_exact.py 1734628983 15555

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "__init__"

.norm: Never
.get_lapack_funcs: Never
.solve_triangular: Never
.cho_solve: Never
.___v_desugar_2 = pyimport "_trustregion"
._trustregion = pyimport "_trustregion"
._minimize_trust_region: |R <: Float, T :> {None}, T: Type, R <: global::List(?T, ?M), M: Nat, R <: Bool, R: Type, R <: Structural({.__le__ = (self: Never, ?R) -> Bool})|(fun: Obj, x0: Obj, args: R := R, jac: Obj := Obj, hess: T := T, hessp: (Obj) -> Never := {None} and (Obj) -> Never, subproblem: (Obj, Obj, Obj, T, (x: Never, *wrapper_args: Never) -> Never) -> (R) -> R := {None} and (Obj, Obj, Obj, T, (x: Never, *wrapper_args: Never) -> Never) -> (R) -> R, initial_trust_radius: Never := Never, max_trust_radius: R := {1000.0} and R, eta: R := {0.15} and R, gtol: R := {0.0001} and R, maxiter: R := {None} and R, disp: Bool := {False} and Bool, return_all: Bool := {False} and Bool, callback: Obj := {None}, inexact: Obj := {True}, **unknown_options := ?222109) -> Never
.BaseQuadraticSubproblem: {_trustregion.BaseQuadraticSubproblem}
.__all__: global::List!({"_minimize_trustregion_exact", "IterativeSubproblem", "estimate_smallest_singular_value", "singular_leading_submatrix"}, 4)
._minimize_trustregion_exact: |T :> {None}, T: Type|(fun: Obj, x0: Obj, args: global::List(T, _: Nat) := global::List(T, _: Nat), jac: Obj := Obj, hess: T := T, **trust_region_options := ?224470) -> Never
.estimate_smallest_singular_value: (U: Obj) -> global::Tuple([Never, Never])
.gershgorin_bounds: (H: Obj) -> global::Tuple([Never, Never])
.singular_leading_submatrix: |O: Type|(A: Never, U: global::Indexable(Obj, Structural({.__pow__ = (self: Never, Obj) -> O; .__neg__ = (self: Never) -> Never})), k: {1}) -> global::Tuple([O, Never])
.IterativeSubproblem: ClassType
.IterativeSubproblem <: _trustregion.BaseQuadraticSubproblem
.IterativeSubproblem.niter: Never
.IterativeSubproblem.CLOSE_TO_ZERO: Never
.IterativeSubproblem.dimension: Never
.IterativeSubproblem.previous_tr_radius: Never
.IterativeSubproblem.k_hard: Never
.IterativeSubproblem.k_easy: Never
.IterativeSubproblem.hess_inf: Never
.IterativeSubproblem.hess_fro: Never
.IterativeSubproblem.lambda_lb: Never
.IterativeSubproblem.__call__: (x: Obj, fun: Obj, jac: Obj, hess: Obj, hessp: Obj := Obj, k_easy: Obj := Obj, k_hard: Obj := Obj) -> _trustregion_exact.IterativeSubproblem
.IterativeSubproblem.UPDATE_COEFF: {0.01}
.IterativeSubproblem.EPS: Never
.IterativeSubproblem._initial_values: |R <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), R: Type|(self: Never, tr_radius: R) -> global::Tuple([Nat, {0}, Never])
.IterativeSubproblem.solve: |R: Type, R <: Structural({.__pow__ = (self: Never, ?R) -> ?R and (self: Never, ?R) -> ?R; .__lt__ = (self: Never, ?R) -> Bool})|(self: Never, tr_radius: R) -> global::Tuple([Never, Bool])

