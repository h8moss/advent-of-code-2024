##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_slsqp_py.py 1734628983 18995

.__all__: global::List!({"approx_jacobian", "fmin_slsqp"}, 2)
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.slsqp: Never
.linalg = pyimport "__init__"

.___v_desugar_2 = pyimport "__init__"

.zeros: Never
.array: Never
.append: Never
.concatenate: Never
.finfo: Never
.sqrt: Never
.vstack: Never
.isfinite: Never
.atleast_1d: Never

.___v_desugar_3 = pyimport "_optimize"
._optimize = pyimport "_optimize"
.OptimizeResult: Never
._check_unknown_options: Never
._prepare_scalar_function: Never
._clip_x_for_func: Never
._check_clip_x: Never
.___v_desugar_4 = pyimport "_numdiff"
._numdiff = pyimport "_numdiff"
.approx_derivative: (fun: (Structural({.dtype = Ref(Obj)})) -> Never, x0: Obj, method: Never := Never, rel_step: Never := Never, abs_step: Never := Never, f0: Never := Never, bounds: Structural({.__len__ = (self: Never) -> Nat}) := Structural({.__len__ = (self: Never) -> Nat}), sparsity: Structural({.__and__ = (self: Never, Obj) -> Bool}) := {None} and Structural({.__and__ = (self: Never, Obj) -> Bool}), as_linear_operator: Obj := {False}, args: Obj := Obj, kwargs: Obj := global::Dict!({Never: Never})) -> Never
.___v_desugar_5 = pyimport "_constraints"
._constraints = pyimport "_constraints"
.old_bound_to_new: (bounds: Obj) -> global::Tuple([Never, Never])
._arr_to_scalar: (x: Obj) -> Never
.___v_desugar_6 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.atleast_nd: (x: Obj, ndim: Int, xp: Obj := Obj) -> Never
.array_namespace: (*arrays: Obj) -> Never
.__docformat__: {"restructuredtext en"}
._epsilon: Never
.approx_jacobian: (x: Obj, func: (Structural({.dtype = Ref(Obj)})) -> Never, epsilon: Never, *args: Obj) -> Never
.fmin_slsqp: (func: Obj, x0: Obj, eqcons: Obj := Obj, f_eqcons: Bool := Bool, ieqcons: Obj := Obj, f_ieqcons: Bool := Bool, bounds: Structural({.__len__ = (self: Never) -> Nat}) := Structural({.__len__ = (self: Never) -> Nat}), fprime: Obj := Obj, fprime_eqcons: Obj := Obj, fprime_ieqcons: Obj := Obj, args: Obj := Obj, iter: Obj := Obj, acc: Obj := Obj, iprint: Obj := Obj, disp: Obj := Obj, full_output: Bool := Bool, epsilon: Obj := Obj, callback: Obj := Obj) -> Never
._minimize_slsqp: |Type_226705 :> {False}, Type_226705 <: Bool, Type_226709 :> {None}, Type_227452: Type, Type_226701 :> {0.000001}|(func: Obj, x0: Obj, args: Type_227452 := Type_227452, jac: Obj := Obj, bounds: Structural({.__len__ = (self: Never) -> Nat}) := {None} and Structural({.__len__ = (self: Never) -> Nat}), constraints: Structural({.__add__ = (self: Never, Obj) -> Never}) := Structural({.__add__ = (self: Never, Obj) -> Never}), maxiter: {100} := {100} and {100}, ftol: Type_226701 := Type_226701 and Type_226701, iprint: {0, 1} := {0, 1} and {0, 1}, disp: Type_226705 := Type_226705 and Type_226705, eps: Never := Never, callback: Type_226709 := Type_226709 and Type_226709, finite_diff_rel_step: {None} := {None} and {None}, **unknown_options := ?226713) -> global::Indexable(Obj, Never)
._eval_constraint: (x: Obj, cons: global::Dict({{"eq"}: global::Tuple([]), {"ineq"}: global::Tuple([])})) -> Never
._eval_con_normals: |Self :> global::Dict!({{"eq"}: global::Tuple([]), {"ineq"}: global::Tuple([])}), Self <: global::Dict(?D), R :> Nat, R <: global::Add(?R), D: global::GenericDict, R: Type|(x: Obj, cons: Self, la: Obj, n: Obj, m: Obj, meq: Obj, mieq: R) -> Never
