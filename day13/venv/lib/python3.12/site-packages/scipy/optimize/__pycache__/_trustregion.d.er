##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_trustregion.py 1734628983 10801

.math = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.warnings = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.scipy = pyimport "__init__"


.___v_desugar_1 = pyimport "_optimize"
._optimize = pyimport "_optimize"
._check_unknown_options: Never
._status_message: Never
.OptimizeResult: Never
._prepare_scalar_function: Never
._call_callback_maybe_halt: Never
.___v_desugar_2 = pyimport "_hessian_update_strategy"
._hessian_update_strategy = pyimport "_hessian_update_strategy"
.HessianUpdateStrategy: {_hessian_update_strategy.HessianUpdateStrategy}
.___v_desugar_3 = pyimport "_differentiable_functions"
._differentiable_functions = pyimport "_differentiable_functions"
.FD_METHODS: {Type_v_global_119864: global::Tuple([Str, Str, Str]) | Type_v_global_119864 == ("2-point", "3-point", "cs")}
.__all__: global::List!(Never, 0)
._wrap_function: |Type_222315: Type|(function: (Obj) -> Type_222315, args: global::List(Never, _: Nat)) -> global::Tuple([global::List!({0}, 1), (x: Obj, *wrapper_args: Obj) -> Never])
.BaseQuadraticSubproblem: ClassType
.BaseQuadraticSubproblem._cauchy_point: Never
.BaseQuadraticSubproblem._fun: Never
.BaseQuadraticSubproblem._newton_point: Never
.BaseQuadraticSubproblem._f: Never
.BaseQuadraticSubproblem._hessp: Never
.BaseQuadraticSubproblem._jac: Never
.BaseQuadraticSubproblem._x: Never
.BaseQuadraticSubproblem._hess: Never
.BaseQuadraticSubproblem._g: Never
.BaseQuadraticSubproblem._h: Never
.BaseQuadraticSubproblem._g_mag: Never
.BaseQuadraticSubproblem.__call__: (self: Obj, p: Obj) -> Never
.BaseQuadraticSubproblem.__call__: (self: Obj, p: Obj) -> Never
.BaseQuadraticSubproblem.fun: (self: Never) -> Never
.BaseQuadraticSubproblem.jac: (self: Never) -> Never
.BaseQuadraticSubproblem.hess: (self: _trustregion.BaseQuadraticSubproblem) -> Never
.BaseQuadraticSubproblem.hessp: (self: _trustregion.BaseQuadraticSubproblem, p: Obj) -> Never
.BaseQuadraticSubproblem.jac_mag: (self: Never) -> Never
.BaseQuadraticSubproblem.get_boundaries_intersections: |R: Type, Type_221948 <: Structural({.__pow__ = (self: Never, ?R) -> ?R})|(self: _trustregion.BaseQuadraticSubproblem, z: Obj, d: Obj, trust_radius: Type_221948) -> global::List!(Float, _: Nat)
.BaseQuadraticSubproblem.solve: (self: _trustregion.BaseQuadraticSubproblem, trust_radius: Obj) -> Never

._minimize_trust_region: |R <: Float, T :> {None}, R <: global::List(?T, ?M), T: Type, R <: Structural({.__le__ = (self: Never, ?R) -> Bool}), M: Nat, R <: Bool, R: Type|(fun: Obj, x0: Obj, args: R := R, jac: Obj := Obj, hess: T := T, hessp: (Obj) -> Never := {None} and (Obj) -> Never, subproblem: (Obj, Obj, Obj, T, (x: Never, *wrapper_args: Never) -> Never) -> (R) -> R := {None} and (Obj, Obj, Obj, T, (x: Never, *wrapper_args: Never) -> Never) -> (R) -> R, initial_trust_radius: Never := Never, max_trust_radius: R := {1000.0} and R, eta: R := {0.15} and R, gtol: R := {0.0001} and R, maxiter: R := {None} and R, disp: Bool := {False} and Bool, return_all: Bool := {False} and Bool, callback: Obj := {None}, inexact: Obj := {True}, **unknown_options := ?222061) -> Never
