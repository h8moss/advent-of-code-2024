##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_basinhopping.py 1734628983 30619

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.math = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.inspect = pyimport "<failure>"


.scipy = pyimport "__init__"


.___v_desugar_1 = pyimport "_util"
._util = pyimport "_util"
.check_random_state: (seed: Obj) -> Never
.__all__: global::List!({"basinhopping"}, 1)
._params: Never
._new_accept_test_signature: Never
.Storage: ClassType
.Storage.__call__: (minres: Obj) -> _basinhopping.Storage
.Storage._add: |Type_97078 <: Structural({.x = ?99384}), Type_99384: Type|(self: _basinhopping.Storage, minres: Type_97078) -> NoneType
.Storage.update: (self: _basinhopping.Storage, minres: Never) -> Never
.Storage.get_lowest: (self: _basinhopping.Storage) -> Never

.BasinHoppingRunner: ClassType
.BasinHoppingRunner.res: Never
.BasinHoppingRunner.accept_tests: Never
.BasinHoppingRunner.storage: Never
.BasinHoppingRunner.energy: Never
.BasinHoppingRunner.disp: Never
.BasinHoppingRunner.nstep: Never
.BasinHoppingRunner.step_taking: Never
.BasinHoppingRunner.incumbent_minres: Never
.BasinHoppingRunner.x: Never
.BasinHoppingRunner.minimizer: Never
.BasinHoppingRunner.__call__: (x0: Obj, minimizer: Obj, step_taking: Obj, accept_tests: Obj, disp: Obj := Obj) -> _basinhopping.BasinHoppingRunner
.BasinHoppingRunner._monte_carlo_step: (self: _basinhopping.BasinHoppingRunner) -> global::Tuple([Bool, Never])
.BasinHoppingRunner.one_cycle: (self: _basinhopping.BasinHoppingRunner) -> {False}
.BasinHoppingRunner.print_report: (self: _basinhopping.BasinHoppingRunner, energy_trial: Obj, accept: Obj) -> NoneType

.AdaptiveStepsize: ClassType
.AdaptiveStepsize.target_accept_rate: Never
.AdaptiveStepsize.verbose: Never
.AdaptiveStepsize.naccept: Never
.AdaptiveStepsize.interval: Never
.AdaptiveStepsize.nstep_tot: Never
.AdaptiveStepsize.nstep: Never
.AdaptiveStepsize.factor: Never
.AdaptiveStepsize.takestep: Never
.AdaptiveStepsize.__call__: (self: _basinhopping.AdaptiveStepsize, x: Obj) -> Never
.AdaptiveStepsize.__call__: (self: _basinhopping.AdaptiveStepsize, x: Obj) -> Never
.AdaptiveStepsize._adjust_step_size: (self: _basinhopping.AdaptiveStepsize) -> NoneType
.AdaptiveStepsize.take_step: (self: _basinhopping.AdaptiveStepsize, x: Obj) -> Never
.AdaptiveStepsize.report: (self: _basinhopping.AdaptiveStepsize, accept: Bool, **kwargs := ?97281) -> NoneType

.RandomDisplacement: ClassType
.RandomDisplacement.stepsize: Never
.RandomDisplacement.random_gen: Never
.RandomDisplacement.__call__: |Type_97321: Type|(self: _basinhopping.RandomDisplacement, x: Type_97321) -> Type_97321
.RandomDisplacement.__call__: |Type_97321: Type|(self: _basinhopping.RandomDisplacement, x: Type_97321) -> Type_97321

.MinimizerWrapper: ClassType
.MinimizerWrapper.kwargs: Never
.MinimizerWrapper.func: Never
.MinimizerWrapper.minimizer: Never
.MinimizerWrapper.__call__: (self: _basinhopping.MinimizerWrapper, x0: Obj) -> Never
.MinimizerWrapper.__call__: (self: _basinhopping.MinimizerWrapper, x0: Obj) -> Never

.Metropolis: ClassType
.Metropolis.beta: Never
.Metropolis.random_gen: Never
.Metropolis.__call__: (self: _basinhopping.Metropolis, res_new: Obj, res_old: Obj) -> Bool
.Metropolis.accept_reject: |Type_106228: Type, O :> Bool, Type_97389 <: Structural({.success = ?106228; .fun = ?106049}), R: Type, Type_106049: Type|(self: _basinhopping.Metropolis, res_new: Type_97389, res_old: Structural({.success = Obj; .fun = R})) -> O
.Metropolis.__call__: (self: _basinhopping.Metropolis, res_new: Obj, res_old: Obj) -> Bool

.basinhopping: |R <: Float, R :> {2}, R :> {1.0}, R :> {0.0}|(func: Obj, x0: Obj, niter: Structural({.__add__ = (self: Never, R) -> {_: R and NoneType | _ == None}}) := {100} and Structural({.__add__ = (self: Never, R) -> {_: R and NoneType | _ == None}}), T: _basinhopping.Metropolis := {1.0} and _basinhopping.Metropolis, stepsize: Obj := {0.5}, minimizer_kwargs: Obj := {None}, take_step: Obj := {None}, accept_test: Obj := {None}, callback: (Obj, Obj, {True}) -> Never := {None} and (Obj, Obj, {True}) -> Never, interval: Obj := {50}, disp: Obj := {False}, niter_success: R := {None} and R, seed: Obj := {None}, target_accept_rate: Structural({.__le__ = (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}) := {0.5} and Structural({.__le__ = (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}), stepwise_factor: Structural({.__le__ = (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool}) := {0.9} and Structural({.__le__ = (self: Never, R) -> Bool; .__ge__ = (self: Never, R) -> Bool})) -> Never
