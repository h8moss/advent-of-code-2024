##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_lsq/trf_linear.py 1734628983 7642

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "__init__"

.norm: Never
.___v_desugar_2 = pyimport "__init__"

.qr: Never
.solve_triangular: Never
.___v_desugar_3 = pyimport "__init__"

.lsmr: Never
.___v_desugar_4 = pyimport "__init__"

.OptimizeResult: Never
.___v_desugar_5 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.givens_elimination: Never
.___v_desugar_6 = pyimport "common"
.common = pyimport "common"
.EPS: Never
.step_size_to_bound: |K: Type, Self <: global::Indexable(?K, ?R), Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V), V: Type, R: Type, Type_178954 <: Structural({.__sub__ = (self: Never, ?R) -> ?Self})|(x: R, s: Self, lb: Type_178954, ub: Structural({.__sub__ = (self: Never, R) -> Self})) -> global::Tuple([Never, Never])
.find_active_constraints: |R <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R <: Structural({.__le__ = (self: Never, ?R) -> Bool; .__sub__ = (self: Never, ?R) -> ?O; .__ge__ = (self: Never, ?R) -> Bool}), R: Type, O: Type|(x: R, lb: R, ub: R, rtol: {0} := {0.0000000001} and {0}) -> Never
.in_bounds: |R: Type, Type_178945 <: Structural({.__le__ = (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool})|(x: Type_178945, lb: R, ub: R) -> Never
.make_strictly_feasible: (x: Never, lb: Never, ub: Never, rstep: {0} := {0}) -> Never
.build_quadratic_1d: |R: Type, O: Type, Type_178886 <: Structural({.__mul__ = (self: Never, ?R) -> ?O})|(J: Obj, g: Obj, s: Type_178886, diag: Obj := {None}, s0: Obj := {None}) -> Never
.evaluate_quadratic: |Type_178922 <: Structural({.T = ?192153; .ndim = ?E; .__mul__ = (self: Never, ?R) -> ?O; .__pow__ = (self: Never, ?R) -> ?R}), E: Type, Type_192153: Type, R: Type, O: Type|(J: Obj, g: Obj, s: Type_178922, diag: Obj := {None}) -> Float
.minimize_quadratic_1d: |R: Type, Type_178903 <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), R <: Nat|(a: {0}, b: R, lb: Type_178903, ub: Obj, c: R := {0} and R) -> global::Tuple([Never, Never])
.CL_scaling_vector: Never
.reflective_transformation: (y: Never, lb: Never, ub: Never) -> global::Tuple([global::Dict!(_: global::GenericDict), Never])
.print_header_linear: () -> NoneType
.print_iteration_linear: (iteration: Obj, cost: Obj, cost_reduction: Obj, step_norm: Obj, optimality: Obj) -> NoneType
.compute_grad: |Type_179027 <: Structural({.T = Never})|(J: Type_179027, f: Obj) -> Never
.regularized_lsq_operator: |Type_179044 <: Structural({.__mul__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?R}), R: Type, O: Type|(J: Obj, diag: Type_179044) -> Never
.right_multiplied_operator: (J: Obj, d: Never) -> Never
.regularized_lsq_with_qr: |Self <: global::Copy and global::Indexable(?K, ?V), K: Type, Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V), V: Type, Self <: global::Indexable(?Self, ?V), R <: global::Ord|(m: global::Iterable(R), n: R, R: Obj, QTb: Self, perm: Self, diag: Self, copy_R: Bool := Bool) -> Never
.backtracking: |R <: Float, R <: Structural({.__add__ = (self: Never, ?R) -> Never and (self: Never, ?R) -> Never}), R :> {1}, R: Type, R <: Nat|(A: Obj, g: Obj, x: R, p: R, theta: Structural({.__mul__ = (self: Never, R) -> Structural({.__mul__ = (self: Never, R) -> R})}), p_dot_g: R, lb: Never, ub: Never) -> global::Tuple([R, Never, Float])
.select_step: |R <: Structural({.__add__ = (self: Never, ?R) -> ?R and (self: Never, Never) -> ?Type_178945}), Type_178945 <: Structural({.__le__ = (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool}), R: Type, R <: Nat|(x: R, A_h: Obj, g_h: Structural({.__neg__ = (self: Never) -> Never}), c_h: Obj, p: Never, p_h: Never, d: Structural({.__mul__ = (self: Never, R) -> global::Indexable(Obj, R) and (self: Never, R) -> global::Indexable(Obj, R)}), lb: Never, ub: Never, theta: R) -> Never
.trf_linear: |E :> {"auto"}, E <: global::Ord, E :> {2}|(A: Never, b: Obj, x_lsq: Never, lb: Never, ub: Never, tol: Obj, lsq_solver: {"exact"}, lsmr_tol: E, max_iter: {_: Int}, verbose: E, lsmr_maxiter: Obj := Obj) -> Never
