##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_lsq/least_squares.py 1734628983 39672

.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.warn: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "__init__"

.norm: Never
.___v_desugar_3 = pyimport "__init__"

.issparse: Never
.___v_desugar_4 = pyimport "__init__"

.LinearOperator: Never
.___v_desugar_5 = pyimport "__init__"

._minpack: Never
.OptimizeResult: Never
.___v_desugar_6 = pyimport "_numdiff"
._numdiff = pyimport "_numdiff"
.approx_derivative: (fun: (Structural({.dtype = Ref(Obj)})) -> Never, x0: Obj, method: Never := Never, rel_step: Never := Never, abs_step: Never := Never, f0: Never := Never, bounds: Structural({.__len__ = (self: Never) -> Nat}) := Structural({.__len__ = (self: Never) -> Nat}), sparsity: Structural({.__and__ = (self: Never, Obj) -> Bool}) := {None} and Structural({.__and__ = (self: Never, Obj) -> Bool}), as_linear_operator: Obj := {False}, args: Obj := Obj, kwargs: Obj := global::Dict!({Never: Never})) -> Never
.group_columns: (A: Obj, order: Structural({.shape = Obj}) := Structural({.shape = Obj})) -> Never
.___v_desugar_7 = pyimport "_minimize"
._minimize = pyimport "_minimize"
.Bounds: {_constraints.Bounds}
.___v_desugar_8 = pyimport "trf"
.trf = pyimport "trf"
.trf: ||Never
.___v_desugar_9 = pyimport "dogbox"
.dogbox = pyimport "dogbox"
.dogbox: ||Never
.___v_desugar_10 = pyimport "common"
.common = pyimport "common"
.EPS: Never
.in_bounds: |R: Type, Type_178945 <: Structural({.__le__ = (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool})|(x: Type_178945, lb: R, ub: R) -> Never
.make_strictly_feasible: (x: Never, lb: Never, ub: Never, rstep: {0} := {0}) -> Never
.TERMINATION_MESSAGES: Never
.FROM_MINPACK_TO_COMMON: Never
.call_minpack: ||Never
.prepare_bounds: (bounds: Obj, n: Obj) -> global::Tuple([Never, Never])
.check_tolerance: (ftol: Never, xtol: Never, gtol: Never, method: Obj) -> global::Tuple([Structural({.__lt__ = (self: Never, Obj) -> Bool}), Structural({.__lt__ = (self: Never, Obj) -> Bool}), Structural({.__lt__ = (self: Never, Obj) -> Bool})])
.check_x_scale: |Type_262834 <: Structural({.shape = ?266202 and ?E}), Type_266202: Type, E: Type|(x_scale: {"jac"}, x0: Type_262834) -> {"jac"}
.check_jac_sparsity: |E: Type, Type_262836 <: Structural({.shape = ?E}), Type_262837: Type, Type_262838: Type|(jac_sparsity: Type_262836, m: Type_262837, n: Type_262838) -> global::Tuple([Type_262836, Never])
.huber: |Type_262840 <: Structural({.__le__ = (self: Never, ?R) -> Bool; .__getitem__ = (self: Obj, ?266248) -> ?V and (self: Obj, ?266262) -> ?266263}), R: Type, Type_266263: Type, V: Type, Type_266248: Type, Type_266262: Type|(z: Type_262840, rho: global::Dict!(_: global::GenericDict), cost_only: Bool) -> NoneType
.soft_l1: (z: Nat, rho: global::Dict!(_: global::GenericDict), cost_only: Bool) -> NoneType
.cauchy: (z: Nat, rho: global::Dict!(_: global::GenericDict), cost_only: Bool) -> NoneType
.arctan: (z: Never, rho: global::Dict!(_: global::GenericDict), cost_only: Bool) -> NoneType
.IMPLEMENTED_LOSSES: Never
.construct_loss_function: |Type_266514 <: Structural({.__div__ = (self: Never, ?R) -> ?O}), R: Type, O: Type, R <: Structural({.__pow__ = (self: Never, ?R) -> ?R})|(m: Obj, loss: Obj, f_scale: R) -> |R: Type, O: Type, Type_266514 <: Structural({.__div__ = (self: Never, ?R) -> ?O})|(f: Type_266514, cost_only: Bool := {False}) -> Never
.least_squares: (fun: (Obj) -> Never, x0: Obj, jac: (Obj) -> Never := {"2-point"} and (Obj) -> Never, bounds: {"lm"} := {"lm"}, method: Never := Never, ftol: Never := Never, xtol: Never := Never, gtol: {"jac"} := {0.00000001} and {"jac"}, x_scale: {"linear"} := {1.0} and {"linear"}, loss: Never := Never, f_scale: Never := Never, diff_step: {"exact"} := {None} and {"exact"}, tr_solver: Obj := {None}, tr_options: Never := Never, jac_sparsity: {100} := {None} and {100}, max_nfev: Obj := {None}, verbose: Obj := {0}, args: Obj := Obj, kwargs: Obj := global::Dict!({Never: Never})) -> Never
