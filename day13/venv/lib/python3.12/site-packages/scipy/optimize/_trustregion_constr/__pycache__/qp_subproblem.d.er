##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/optimize/_trustregion_constr/qp_subproblem.py 1734628983 22592

.linalg = pyimport "__init__"
.__init__ = pyimport "__init__"
.___v_desugar_1 = pyimport "__init__"

.bmat: Never
.csc_matrix: Never

.___v_desugar_2 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.copysign: Never
.np = pyimport "__init__"


.___v_desugar_3 = pyimport "__init__"

.norm: Never
.__all__: global::List!({"sphere_intersections", "inside_box_boundaries", "box_intersections", "projected_cg", "modified_dogleg", "eqp_kktfact", "box_sphere_intersections"}, 7)
.eqp_kktfact: |Type_177630 <: Structural({.__neg__ = (self: Never) -> ?R}), R: Type|(H: Obj, c: Type_177630, A: Structural({.T = Obj}), b: Structural({.__neg__ = (self: Never) -> R})) -> global::Tuple([Never, R])
.sphere_intersections: |R: Type, Type_177652 <: Structural({.__pow__ = (self: Never, ?R) -> ?R})|(z: Obj, d: Obj, trust_radius: Type_177652, entire_line: Bool := {False} and Bool) -> global::Tuple([Float, Float, Bool])
.box_intersections: (z: Obj, d: Obj, lb: Obj, ub: Obj, entire_line: Bool := Bool) -> global::Tuple([Never, Never, Bool])
.box_sphere_intersections: (z: Obj, d: Obj, lb: Obj, ub: Obj, trust_radius: Never, entire_line: Bool := Bool, extra_info: Bool := Bool) -> Never
.inside_box_boundaries: |R: Type, R <: Structural({.__le__ = (self: Never, ?R) -> Bool})|(x: R, lb: Structural({.__le__ = (self: Never, R) -> Bool}), ub: R) -> Never
.reinforce_box_boundaries: (x: Obj, lb: Obj, ub: Obj) -> Never
.modified_dogleg: |Type_187442: Type, Type_177740 <: Structural({.T = Never; .dot = (self: Obj, ?186293) -> ?186294 and (self: Obj, ?187441) -> ?187442}), Type_186294: Type, Type_186293: Type, Type_187441: Type, R: Type|(A: Type_177740, Y: Obj, b: R, trust_radius: Never, lb: Never, ub: Never) -> Never
.projected_cg: |R <: Float, Type_177769 <: Structural({.__neg__ = (self: Never) -> ?R}), R: Type|(H: Obj, c: R, Z: Obj, Y: Obj, b: Type_177769, trust_radius: Never := Never, lb: Never := Never, ub: R := {None} and R, tol: {_: Never | True} := {None} and {_: Never | True}, max_iter: R := {None} and R, max_infeasible_iter: Bool := {None} and Bool, return_all: Obj := {False}) -> global::Tuple([Never, global::Dict!({{"hits_boundary"}: Bool, {"stop_cond"}: Nat, {"niter"}: Nat})])
