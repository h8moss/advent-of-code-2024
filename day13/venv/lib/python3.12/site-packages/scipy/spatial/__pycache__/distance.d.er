##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/spatial/distance.py 1734628983 91483

.__all__: global::List!({"rogerstanimoto", "is_valid_y", "minkowski", "cdist", "hamming", "directed_hausdorff", "canberra", "correlation", "jensenshannon", "cosine", "yule", "num_obs_y", "seuclidean", "is_valid_dm", "num_obs_dm", "squareform", "cityblock", "kulczynski1", "euclidean", "pdist", "dice", "sqeuclidean", "jaccard", "sokalmichener", "sokalsneath", "braycurtis", "mahalanobis", "russellrao", "chebyshev"}, 29)
.math = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.warnings = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.dataclasses = pyimport "<failure>"


.___v_desugar_1 = pyimport "<failure>"

.Optional: Never
.Callable: Never
.___v_desugar_2 = pyimport "<failure>"

.partial: Never
.___v_desugar_3 = pyimport "_util"
._util = pyimport "_util"
._asarray_validated: (a: Obj, check_finite: Bool := Bool, sparse_ok: Bool := Bool, objects_ok: Bool := Bool, mask_ok: Bool := Bool, as_inexact: Bool := Bool) -> Never
.___v_desugar_4 = pyimport "__init__"

._distance_wrap: Never
.___v_desugar_5 = pyimport "__init__"

._hausdorff: Never
.___v_desugar_6 = pyimport "<failure>"

.norm: Never
.___v_desugar_7 = pyimport "<failure>"

.rel_entr: Never
.___v_desugar_8 = pyimport "__init__"

._distance_pybind: Never
._copy_array_if_base_present: |Type_120672 <: Structural({.base = ?120964; .copy = (self: Obj) -> ?120965}), Type_120965: Type, Type_120964: Type, Type_120672 <: Structural({.base = ?120964; .copy = (self: Never) -> ?120965})|(a: Type_120672) -> Type_120672
._correlation_cdist_wrap: (XA: Obj, XB: Obj, dm: Obj, **kwargs := ?120677) -> Never
._correlation_pdist_wrap: (X: Obj, dm: Obj, **kwargs := ?120681) -> Never
._convert_to_type: (X: Obj, out_type: Obj) -> Never
._nbool_correspond_all: (u: Never, v: Never, w: Obj := Obj) -> global::Tuple([Never, Never, Never, Never])
._nbool_correspond_ft_tf: (u: Never, v: Never, w: Obj := Obj) -> global::Tuple([Never, Never])
._validate_cdist_input: ||Never
._validate_weight_with_size: ||(X: Obj, m: Obj, n: Obj, **kwargs := ?120707) -> global::Dict({Str: Never})
._validate_hamming_kwargs: ||(X: Obj, m: Obj, n: Obj, **kwargs := global::List(?T, ?N)) -> global::Dict({Str: global::List(Never, _: Nat)})
._validate_mahalanobis_kwargs: |Type_120715 <: Structural({.__le__ = (self: Never, ?R) -> Bool}), R: Type|(X: Obj, m: Type_120715, n: R, **kwargs := ?120717) -> global::Dict({Str: Never})
._validate_minkowski_kwargs: ||(X: Obj, m: Obj, n: Obj, **kwargs := Structural({.__le__ = (self: Never, ?R) -> Bool})) -> global::Dict({Str: Structural({.__le__ = (self: Never, Obj) -> Bool})})
._validate_pdist_input: ||Never
._validate_seuclidean_kwargs: ||(X: Obj, m: Obj, n: Obj, **kwargs := ?120733) -> global::Dict({Str: Never})
._validate_vector: (u: Obj, dtype: Obj := Obj) -> Never
._validate_weights: |Default: Type, Type_120735 :> ?Default or ?V, Type_120735 <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), V: Type, R: Type, Type_120740: Type|(w: Type_120735, dtype: Type_120740 := Type_120740 and Type_120740) -> Type_120735
.directed_hausdorff: (u: Obj, v: Obj, seed: Obj := Obj) -> Never
.minkowski: |R: Type, Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?R})|(u: Type_120735, v: R, p: {1} := {2} and {1}, w: Obj := {None}) -> Never
.euclidean: (u: Never, v: Obj, w: Obj := Obj) -> Never
.sqeuclidean: |Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?R; .dtype = ?121657}), Type_121664: Type, R: Type, Type_121657: Type, R <: Structural({.dtype = ?121664})|(u: Type_120735, v: R, w: Obj := {None}) -> Never
.correlation: |Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?Type_120735; .__mul__ = (self: Never, ?R) -> ?O}), Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?Type_120735; .__mul__ = (self: Never, ?R) -> ?O}), R: Type, Type_120735: Type, O: Type|(u: Type_120735, v: Type_120735, w: Obj := {None}, centered: Bool := {True} and Bool) -> Never
.cosine: (u: Never, v: Never, w: Obj := Obj) -> Never
.hamming: |E <: global::List(Type, _: Nat)|(u: E, v: E, w: Obj := Obj) -> Never
.jaccard: |E :> {0}|(u: E, v: E, w: Obj := Obj) -> {0}
.kulczynski1: (u: Never, v: Never, w: Obj := Obj) -> Never
.seuclidean: (u: Never, v: global::List(Never, _: Nat), V: Obj) -> Never
.cityblock: |Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(u: Type_120735, v: R, w: Obj := {None}) -> Never
.mahalanobis: |Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(u: Type_120735, v: R, VI: Obj) -> Never
.chebyshev: (u: Never, v: global::Indexable(Obj, global::Indexable(Obj, Obj)), w: Obj := Obj) -> Never
.braycurtis: |Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(u: Type_120735, v: R, w: Obj := {None}) -> O
.canberra: |R <: global::Num, R: Type, Type_120735 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), O: Type|(u: Type_120735, v: R, w: Obj := {None}) -> Never
.jensenshannon: |O <: Structural({.__add__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(p: O, q: R, base: Obj := {None}, axis: Obj := {0}, keepdims: Obj := {False}) -> Never
.yule: (u: Never, v: Never, w: Obj := Obj) -> Never
.dice: |Type_120694: Type, Type_120735 <: Structural({.__and__ = (self: Never, ?R) -> ?O; .__mul__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O}), R: Type, O: Type|(u: Type_120735, v: R, w: Type_120694 := {None} and Type_120694) -> Float
.rogerstanimoto: (u: Never, v: Never, w: Obj := Obj) -> Float
.russellrao: |Type_120735 <: Structural({.__and__ = (self: Never, ?R) -> ?O; .__len__ = (self: Never) -> Nat; .__mul__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O}), O :> Float, R: Type, O: Type|(u: Type_120735, v: R, w: Never := Never) -> O
.sokalmichener: (u: Never, v: Never, w: Obj := Obj) -> Float
.sokalsneath: |Type_120735 <: Structural({.__and__ = (self: Never, Never) -> ?O; .__mul__ = (self: Never, Never) -> ?O and (self: Never, Never) -> ?O}), O: Type, O :> Float|(u: Type_120735, v: Never, w: Never := Never) -> O
._convert_to_double: Never
._convert_to_bool: Never


.CDistMetricWrapper: ClassType
.CDistMetricWrapper.metric_name: Str
.CDistMetricWrapper.__call__: |D: global::GenericDict, Type_120927 <: global::Dict!(?D)|(self: distance.CDistMetricWrapper, XA: Obj, XB: Obj, out: Type_120927 := Type_120927, **kwargs := ?120865) -> Type_120927
.CDistMetricWrapper.__call__: |D: global::GenericDict, Type_120927 <: global::Dict!(?D)|(self: distance.CDistMetricWrapper, XA: Obj, XB: Obj, out: Type_120927 := Type_120927, **kwargs := ?Type_120702) -> Type_120927

.PDistMetricWrapper: ClassType
.PDistMetricWrapper.metric_name: Str
.PDistMetricWrapper.__call__: (self: distance.PDistMetricWrapper, X: Obj, out: global::Dict!(_: global::GenericDict) := global::Dict!(_: global::GenericDict), **kwargs := ?120871) -> Never
.PDistMetricWrapper.__call__: (self: distance.PDistMetricWrapper, X: Obj, out: global::Dict!(_: global::GenericDict) := global::Dict!(_: global::GenericDict), **kwargs := ?Type_120728) -> Never

.MetricInfo: ClassType
.MetricInfo.aka: Never
.MetricInfo.canonical_name: Str
.MetricInfo.cdist_func: Never
.MetricInfo.dist_func: Never
.MetricInfo.pdist_func: Never
.MetricInfo.__call__: () -> distance.MetricInfo
.MetricInfo.validator: Never
.MetricInfo.types: Never
.MetricInfo.requires_contiguous_out: Bool

._METRIC_INFOS: Never
._METRICS: Never
._METRIC_ALIAS: Never
._METRICS_NAMES: global::List!(Never, _: Nat)
._TEST_METRICS: Never
.pdist: (X: Obj, metric: Obj := Obj, out: Obj := Obj, **kwargs := ?Type_120728) -> Never
.squareform: (X: Obj, force: Structural({.lower = (self: Obj) -> {"tomatrix"} and (self: Obj) -> Never}) := {"no"} and Structural({.lower = (self: Obj) -> {"tomatrix"} and (self: Obj) -> Never}), checks: Bool := {True} and Bool) -> Never
.is_valid_dm: |R :> {0.0}, Type_120898 :> {False}, Type_120898 <: Bool|(D: Obj, tol: R := R and R, throw: Bool := Bool, name: {"X"} := {"X"}, warning: Type_120898 := Type_120898 and Type_120898) -> Bool
.is_valid_y: (y: Obj, warning: Bool := Bool, throw: Bool := Bool, name: Bool := Bool) -> Bool
.num_obs_dm: (d: Obj) -> Never
.num_obs_y: (Y: Obj) -> Int
._prepare_out_argument: |D: global::GenericDict, Type_120927 <: global::Dict!(?D)|(out: Type_120927, dtype: Obj, expected_shape: Obj) -> Type_120927
._pdist_callable: |Self <: global::Indexable(?K, ?V), K: Type, Self <: global::Indexable(?K, ?V), T: Type, V: Type, Type_120917 <: Structural({.shape = ?Self and ?Self; .__getitem__ = (self: Obj, ?T) -> ?125377 and (self: Obj, ?T) -> ?125379}), Type_125379: Type, Type_120921 <: global::Dict!(?D), Type_125377: Type, D: global::GenericDict|(X: Type_120917, out: Type_120921, metric: (Type_125377, Type_125379) -> V, **kwargs := ?120920) -> Type_120921
._cdist_callable: |K: Type, Type_125541: Type, T: Type, V: Type, MAX: Int, Type_120927 <: global::Dict!(?D), Self <: global::Indexable(?K, ?V), T :> {Type_v_global_4: Int | (Type_v_global_4 >= 0) and (Type_v_global_4 <= pred(?MAX))}, Type_125546: Type, Self <: global::Indexable(?K, ?V), Type_120922 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?T) -> ?125541}), D: global::GenericDict|(XA: Type_120922, XB: Structural({.shape = Self; .__getitem__ = (self: Obj, T) -> Type_125546}), out: Type_120927, metric: (Type_125541, Type_125546) -> V, **kwargs := ?120926) -> Type_120927
.cdist: (XA: Obj, XB: Obj, metric: (Obj, Obj) -> Never := {"euclidean"} and (Obj, Obj) -> Never, out: global::Dict!(_: global::GenericDict) := {None} and global::Dict!(_: global::GenericDict), **kwargs := ?Type_120702) -> Never
