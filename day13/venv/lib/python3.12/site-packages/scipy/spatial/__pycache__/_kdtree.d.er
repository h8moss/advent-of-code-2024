##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/spatial/_kdtree.py 1734628983 33443
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.cKDTree: Never
.cKDTreeNode: Never
.__all__: global::List!({"minkowski_distance", "minkowski_distance_p", "Rectangle", "KDTree", "distance_matrix"}, 5)
.minkowski_distance_p: (x: Obj, y: Obj, p: Obj := Obj) -> Never
.minkowski_distance: (x: Obj, y: Obj, p: Float := Float) -> Never
.Rectangle: ClassType
.Rectangle.maxes: Never
.Rectangle.mins: Never
.Rectangle.__call__: (maxes: Obj, mins: Obj) -> _kdtree.Rectangle
.Rectangle.__repr__: (self: _kdtree.Rectangle) -> Str
.Rectangle.volume: (self: _kdtree.Rectangle) -> Never
.Rectangle.split: (self: _kdtree.Rectangle, d: Obj, split: Obj) -> global::Tuple([_kdtree.Rectangle, _kdtree.Rectangle])
.Rectangle.min_distance_point: |R: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), O: Type|(self: _kdtree.Rectangle, x: R, p: Float := {2.0} and Float) -> Never
.Rectangle.max_distance_point: |R: Type, O: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O})|(self: _kdtree.Rectangle, x: R, p: Float := {2.0} and Float) -> Never
.Rectangle.min_distance_rectangle: |R: Type, Type_105554: Type, Type_98564 <: Structural({.maxes = ?R; .mins = ?105554})|(self: _kdtree.Rectangle, other: Type_98564, p: Float := Float) -> Never
.Rectangle.max_distance_rectangle: |Type_98572 <: Structural({.maxes = ?105940; .mins = ?R}), R: Type, Type_105940: Type|(self: _kdtree.Rectangle, other: Type_98572, p: Float := Float) -> Never

.KDTree: ClassType
.KDTree <: Never
.KDTree.__call__: (data: Obj, leafsize: Obj := Obj, compact_nodes: Obj := Obj, copy_data: Obj := Obj, balanced_tree: Obj := Obj, boxsize: Obj := Obj) -> _kdtree.KDTree
.KDTree.tree: (self: _kdtree.KDTree) -> Never
.KDTree.query: (self: _kdtree.KDTree, x: Obj, k: Obj := Obj, eps: Obj := Obj, p: Obj := Obj, distance_upper_bound: Obj := Obj, workers: Obj := Obj) -> global::Tuple([Never, Never])
.KDTree.query_ball_point: (self: _kdtree.KDTree, x: Obj, r: Obj, p: Obj := Obj, eps: Obj := Obj, workers: Obj := Obj, return_sorted: Obj := Obj, return_length: Obj := Obj) -> Never
.KDTree.query_ball_tree: (self: _kdtree.KDTree, other: Obj, r: Obj, p: Obj := Obj, eps: Obj := Obj) -> Never
.KDTree.query_pairs: (self: _kdtree.KDTree, r: Obj, p: Obj := Obj, eps: Obj := Obj, output_type: Obj := Obj) -> Never
.KDTree.count_neighbors: (self: _kdtree.KDTree, other: Obj, r: Obj, p: Obj := Obj, weights: Obj := Obj, cumulative: Obj := Obj) -> Never
.KDTree.sparse_distance_matrix: (self: _kdtree.KDTree, other: Obj, max_distance: Obj, p: Obj := Obj, output_type: Obj := Obj) -> Never

.distance_matrix: (x: Obj, y: Obj, p: Float := Float, threshold: Obj := Obj) -> Never
