##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/sparse/_coo.py 1734628983 32040

.__docformat__: {"restructuredtext en"}
.__all__: global::List!({"coo_array", "coo_matrix", "isspmatrix_coo"}, 3)
.math = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.___v_desugar_1 = pyimport "<failure>"

.warn: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "<failure>"

.copy_if_needed: Never
.___v_desugar_3 = pyimport "_matrix"
._matrix = pyimport "_matrix"
.spmatrix: Never
.___v_desugar_4 = pyimport "<failure>"

.coo_tocsr: Never
.coo_todense: Never
.coo_matvec: Never
.___v_desugar_5 = pyimport "_base"
._base = pyimport "_base"
.issparse: (x: Never) -> Never
.SparseEfficiencyWarning: {_base.SparseEfficiencyWarning}
._spbase: Never
.sparray: Never
.___v_desugar_6 = pyimport "_data"
._data = pyimport "_data"
._data_matrix: Never
._minmax_mixin: Never
.___v_desugar_7 = pyimport "_sputils"
._sputils = pyimport "_sputils"
.upcast_char: (*args: Never) -> Never
.to_native: |Type_532276 <: Structural({.dtype = Never})|(A: Type_532276) -> Never
.isshape: |R :> {d in {Type_v_global_906399: Nat | ((Type_v_global_906399 <= 0) and (Type_v_global_906399 != 0) or Type_v_global_906399 == 0)}}, Type_532308 <: Structural({.__len__ = (self: Never) -> Nat}), O <: Bool, O: Type, R :> {ndim in {1}}|(x: Type_532308, nonneg: Structural({.__and__ = (self: Never, R) -> O}) := {False} and Structural({.__and__ = (self: Never, R) -> O}), allow_1d: Structural({.__and__ = (self: Never, R) -> O}) := {False} and Structural({.__and__ = (self: Never, R) -> O})) -> Bool
.getdtype: |E: Type|(dtype: Obj, a: Structural({.dtype = E}) := Structural({.dtype = E}), default: Obj := Obj) -> E
.getdata: (obj: Obj, dtype: Obj := Obj, copy: Obj := Obj) -> Never
.downcast_intp_index: |Type_532274 <: Structural({.astype = (self: Obj, ?532579) -> ?532580 and (self: Obj, ?532593) -> ?532594; .min = (self: Obj) -> ?532584; .dtype = ?532570; .size = ?E; .max = (self: Obj) -> ?532583}), E: Type, Type_532579: Type, Type_532580: Type, Type_532570: Type, Type_532274 <: Structural({.astype = (self: Never, ?532579) -> ?532580 and (self: Never, ?532593) -> ?532594; .min = (self: Never) -> ?532584; .dtype = ?532570; .size = ?E; .max = (self: Never) -> ?532583}), Type_532593: Type, Type_532584: Type, Type_532583: Type, Type_532594: Type|(arr: Type_532274) -> Type_532274
.get_index_dtype: |Type_532749: Type, E: Type, Type_532764 <: Structural({.__le__ = (self: Never, ?R) -> Bool}), T: Type, Type_532764: Type, Type_532762: Type, Type_532765: Type, R: Type, T <: Structural({.min = (self: Obj) -> ?532765; .dtype = ?532749 and ?532762; .size = ?E; .max = (self: Obj) -> ?532764})|(arrays: global::Iterable(T) := global::Iterable(T), maxval: Type_532764 := Type_532764, check_contents: Bool := Bool) -> T
.check_shape: |Type_532971: Type, Type_532317 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?532965) -> ?I and (self: Obj, ?532971) -> ?532972}), T: Type, Type_532965: Type, I <: global::Iterable(?T), Type_532972: Type|(args: Type_532317, current_shape: Obj := {None}, allow_1d: Obj := {False}) -> global::HomogenousTuple(Int)
.check_reshape_kwargs: (kwargs: Never) -> global::Tuple([{Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)}, {Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)}])
.operator = pyimport "<failure>"


.Type__coo_base: ClassType
.Type__coo_base <: Never
.Type__coo_base.__call__: (arg1: Obj, shape: Obj := Obj, dtype: Obj := Obj, copy: Obj := Obj) -> _coo.Type__coo_base
.Type__coo_base._format: {"coo"}
.Type__coo_base.row: (self: _coo.Type__coo_base) -> Never
.Type__coo_base.col: (self: _coo.Type__coo_base) -> Never
.Type__coo_base.col: (self: _coo.Type__coo_base, new_col: Obj) -> NoneType
.Type__coo_base.reshape: (self: Never, *args: Obj, **kwargs := ?545193) -> Never
.Type__coo_base._getnnz: (self: Never, axis: {0} := {0}) -> Never
.Type__coo_base._check: (self: _coo.Type__coo_base) -> NoneType
.Type__coo_base.transpose: (self: _coo.Type__coo_base, axes: Structural({.__len__ = (self: Never) -> Nat}) := {None} and Structural({.__len__ = (self: Never) -> Nat}), copy: Obj := {False}) -> Never
.Type__coo_base.resize: (self: Never, *shape: Obj) -> NoneType
.Type__coo_base.toarray: (self: _coo.Type__coo_base, order: Obj := Obj, out: Obj := Obj) -> Never
.Type__coo_base.tocsc: (self: _coo.Type__coo_base, copy: Obj := Obj) -> Never
.Type__coo_base.tocsr: (self: _coo.Type__coo_base, copy: Bool := Bool) -> Never
.Type__coo_base._coo_to_compressed: |Type_546521 <: Bool, K: Type, Self <: global::Indexable(?K, ?V), V: Type, Self :> global::Tuple([Never, Never, Never, Never]), Self <: global::Indexable(?K, ?V)|(self: _coo.Type__coo_base, swap: (Obj) -> Self, copy: Type_546521 := Type_546521 and Type_546521) -> Self
.Type__coo_base.tocoo: (self: Never, copy: Bool := Bool) -> Never
.Type__coo_base.todia: (self: _coo.Type__coo_base, copy: Obj := Obj) -> Never
.Type__coo_base.todok: (self: _coo.Type__coo_base, copy: Obj := Obj) -> Never
.Type__coo_base.diagonal: (self: Never, k: Structural({.__le__ = (self: Never, Obj) -> Bool; .__ge__ = (self: Never, Obj) -> Bool}) := {0} and Structural({.__le__ = (self: Never, Obj) -> Bool; .__ge__ = (self: Never, Obj) -> Bool})) -> Never
.Type__coo_base._setdiag: |V <: Structural({.__len__ = (self: Never) -> Nat; .ndim = ?546780 and ?546804; .__getitem__ = (self: Obj, ?546852) -> ?546853}), Type_546853: Type, Type_546852: Type, Type_546804 <: Bool, O: Type, Type_546780: Type, R: Type, R <: Structural({.__lt__ = (self: Never, ?R) -> Bool; .__add__ = (self: Never, ?R) -> ?O})|(self: Never, values: V, k: R) -> NoneType
.Type__coo_base._with_data: |Type_546892: Type, Type_545249 <: Structural({.dtype = ?546892})|(self: Never, data: Type_545249, copy: Bool := Bool) -> Never
.Type__coo_base.sum_duplicates: (self: _coo.Type__coo_base) -> NoneType
.Type__coo_base._sum_duplicates: |Self :> global::Tuple([?Self, Never]), Self <: global::Indexable(?K, ?V), K: Type, V: Type, Type_546948: Type, Self <: global::Indexable(?K, ?V) and global::Iterable(?Self), Self <: global::Indexable(?K, ?V), Type_546947: Type, Type_546948 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?546947) -> ?546948}), Self <: global::Indexable(?K, ?V)|(self: _coo.Type__coo_base, coords: Self, data: Type_546948) -> Self
.Type__coo_base.eliminate_zeros: (self: _coo.Type__coo_base) -> NoneType
.Type__coo_base._add_dense: |E: Type, Type_547043: Type, Type_545261 <: Structural({.shape = ?E; .dtype = ?547043})|(self: Never, other: Type_545261) -> Never
.Type__coo_base._matmul_vector: |Type_545264 <: Structural({.dtype = ?547060}), Type_547060: Type|(self: Never, other: Type_545264) -> Never
.Type__coo_base._matmul_multivector: |K: Type, T: Type, V: Type, Type_545267 <: Structural({.T = ?547140; .shape = ?Self and ?Self; .dtype = ?547097}), Type_547097: Type, Type_547140 <: global::Iterable(?T), Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V)|(self: Never, other: Type_545267) -> Never

._ravel_coords: |R: Type, Type_545269 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?547214) -> ?R}), Type_547214: Type|(coords: Type_545269, shape: {Type_v_global_133: (self: global::List(Type, _: Nat)) -> global::List!(Nat, _: Nat) | Type_v_global_133 == shape}, order: {Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)} := {Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)} and {Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)}) -> Int
.isspmatrix_coo: (x: Obj) -> Bool
.Type_coo_array: ClassType
_coo = pyimport "_coo"
.Type_coo_array <: .Type__coo_base

.coo_matrix: ClassType

