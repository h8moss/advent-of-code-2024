##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/sparse/_lil.py 1734628983 20412

.__docformat__: {"restructuredtext en"}
.__all__: global::List!({"lil_array", "isspmatrix_lil", "lil_matrix"}, 3)
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.bisect_left: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "_matrix"
._matrix = pyimport "_matrix"
.spmatrix: Never
.___v_desugar_3 = pyimport "_base"
._base = pyimport "_base"
._spbase: Never
.sparray: Never
.issparse: (x: Never) -> Never
.___v_desugar_4 = pyimport "_index"
._index = pyimport "_index"
.IndexMixin: {_index.IndexMixin}
.INT_TYPES: Never
._broadcast_arrays: |Type_535613 <: Structural({.flags = ?535732}), Type_535732: Type|(a: Type_535613, b: Structural({.flags = Obj})) -> global::Tuple([Never, Never])
.___v_desugar_5 = pyimport "_sputils"
._sputils = pyimport "_sputils"
.getdtype: |E: Type|(dtype: Obj, a: Structural({.dtype = E}) := Structural({.dtype = E}), default: Obj := Obj) -> E
.isshape: |R :> {d in {Type_v_global_906399: Nat | ((Type_v_global_906399 <= 0) and (Type_v_global_906399 != 0) or Type_v_global_906399 == 0)}}, Type_532308 <: Structural({.__len__ = (self: Never) -> Nat}), O <: Bool, O: Type, R :> {ndim in {1}}|(x: Type_532308, nonneg: Structural({.__and__ = (self: Never, R) -> O}) := {False} and Structural({.__and__ = (self: Never, R) -> O}), allow_1d: Structural({.__and__ = (self: Never, R) -> O}) := {False} and Structural({.__and__ = (self: Never, R) -> O})) -> Bool
.isscalarlike: |Type_532911 <: Structural({.ndim = ?E}), E: Type|(x: Type_532911) -> Bool
.upcast_scalar: (dtype: Obj, scalar: Obj) -> Never
.check_shape: |Type_532971: Type, Type_532317 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?532965) -> ?I and (self: Obj, ?532971) -> ?532972}), T: Type, Type_532965: Type, I <: global::Iterable(?T), Type_532972: Type|(args: Type_532317, current_shape: Obj := {None}, allow_1d: Obj := {False}) -> global::HomogenousTuple(Int)
.check_reshape_kwargs: (kwargs: Never) -> global::Tuple([{Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)}, {Type_v_global_179: Int | (Type_v_global_179 >= 0) and (Type_v_global_179 <= 255)}])
.___v_desugar_6 = pyimport "__init__"

._csparsetools: Never
.Type__lil_base: ClassType
.Type__lil_base <: Never
.Type__lil_base.dtype: Never
.Type__lil_base.__call__: (arg1: Obj, shape: Obj := Obj, dtype: Obj := Obj, copy: Obj := Obj) -> _lil.Type__lil_base
.Type__lil_base._format: {"lil"}
.Type__lil_base.__iadd__: (self: Never, other: Obj) -> Never
.Type__lil_base.__isub__: (self: Never, other: Obj) -> Never
.Type__lil_base.__imul__: (self: Never, other: Never) -> Never
.Type__lil_base.__itruediv__: (self: Never, other: Never) -> Never
.Type__lil_base._getnnz: (self: Never, axis: {0} := {0}) -> Never
.Type__lil_base.count_nonzero: (self: _lil.Type__lil_base) -> global::Add(Never)
.Type__lil_base.getrowview: (self: _lil.Type__lil_base, i: Obj) -> Never
.Type__lil_base.getrow: |Type_550703 <: Structural({.__lt__ = (self: Never, ?R) -> Bool and (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool}), R: Type|(self: Never, i: Type_550703) -> Never
.Type__lil_base.__getitem__: (self: Never, key: Never) -> Never
.Type__lil_base._asindices: (self: _lil.Type__lil_base, idx: Obj, N: Obj) -> Never
.Type__lil_base._get_intXint: (self: Never, row: Obj, col: Obj) -> Never
.Type__lil_base._get_sliceXint: (self: Never, row: Obj, col: Int) -> Never
.Type__lil_base._get_arrayXint: (self: _lil.Type__lil_base, row: Obj, col: Int) -> Never
.Type__lil_base._get_intXslice: (self: _lil.Type__lil_base, row: Obj, col: Obj) -> Never
.Type__lil_base._get_sliceXslice: (self: Never, row: Obj, col: Obj) -> Never
.Type__lil_base._get_arrayXslice: |Type_551209 :> global::Tuple([?Type_550725]), Type_551209 <: Structural({.__len__ = (self: Never) -> Nat}), Type_550725: Type|(self: _lil.Type__lil_base, row: Type_551209, col: Obj) -> Never
.Type__lil_base._get_intXarray: |Type_550738 <: Structural({.dtype = ?551130}), Type_551130: Type|(self: _lil.Type__lil_base, row: Obj, col: Type_550738) -> Never
.Type__lil_base._get_sliceXarray: (self: Never, row: Obj, col: Obj) -> Never
.Type__lil_base._get_columnXarray: |Type_550738 <: Structural({.dtype = ?551130}), Type_551130: Type|(self: _lil.Type__lil_base, row: global::Indexable(Obj, Never), col: Type_550738) -> Never
.Type__lil_base._get_arrayXarray: (self: _lil.Type__lil_base, row: Never, col: Never) -> Never
.Type__lil_base._get_row_ranges: |Type_551209 :> global::Tuple([?Type_550725]), Type_551209 <: Structural({.__len__ = (self: Never) -> Nat}), Type_550725: Type|(self: _lil.Type__lil_base, rows: Type_551209, col_slice: global::Slice) -> Never
.Type__lil_base._set_intXint: (self: Never, row: Obj, col: Obj, x: Obj) -> Never
.Type__lil_base._set_arrayXarray: (self: Never, row: Obj, col: Obj, x: Obj) -> Never
.Type__lil_base._set_arrayXarray_sparse: |Type_550749 <: Structural({.flags = Obj})|(self: Never, row: Type_550749, col: Obj, x: Obj) -> Never
.Type__lil_base.__setitem__: |Type_535619 <: Structural({.__len__ = (self: Never) -> Nat})|(self: Never, key: Type_535619, x: Never) -> Never
.Type__lil_base._mul_scalar: (self: _lil.Type__lil_base, other: Obj) -> Never
.Type__lil_base.__truediv__: (self: _lil.Type__lil_base, other: Never) -> Never
.Type__lil_base.copy: (self: _lil.Type__lil_base) -> Never
.Type__lil_base.reshape: (self: Never, *args: Obj, **kwargs := ?550785) -> Never
.Type__lil_base.resize: (self: Never, *shape: Structural({.__lt__ = (self: Never, Obj) -> Bool; .__gt__ = (self: Never, Obj) -> Bool})) -> NoneType
.Type__lil_base.toarray: (self: _lil.Type__lil_base, order: Obj := Obj, out: Obj := Obj) -> Never
.Type__lil_base.transpose: (self: _lil.Type__lil_base, axes: Obj := Obj, copy: Obj := Obj) -> Never
.Type__lil_base.tolil: (self: _lil.Type__lil_base, copy: Bool := Bool) -> Never
.Type__lil_base.tocsr: |Type_552421: Type|(self: _lil.Type__lil_base, copy: Type_552421 := Type_552421 and Type_552421) -> Structural({.__div__ = (self: Never, Obj) -> Never})

._prepare_index_for_memoryview: |Type_552480: Type, Type_552488: Type, Type_552518: Type, Type_552517: Type, Type_552477: Type, Type_552474: Type, Type_552518 <: Structural({.astype = (self: Obj, ?552488) -> ?552518 and (self: Obj, ?552517) -> ?552518; .flags = ?552500; .dtype = ?552477 and ?552480}), R: Type, Type_552500: Type|(i: Type_552518, j: Structural({.astype = (self: Obj, Type_552480) -> Never and (self: Obj, Obj) -> Never; .flags = Obj; .dtype = R and R}), x: Type_552474 := Type_552474 and Type_552474) -> global::Iterable(Never)
.isspmatrix_lil: (x: Obj) -> Bool
.Type_lil_array: ClassType
_lil = pyimport "_lil"
.Type_lil_array <: .Type__lil_base

.lil_matrix: ClassType

