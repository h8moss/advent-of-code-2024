##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/sparse/_compressed.py 1734628983 57133

.__all__: global::List!(Never, 0)
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.warn: Never
.operator = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "_util"
._util = pyimport "_util"
._prune_array: Never
.copy_if_needed: Never
.___v_desugar_3 = pyimport "_base"
._base = pyimport "_base"
._spbase: Never
.issparse: (x: Never) -> Never
.sparray: Never
.SparseEfficiencyWarning: {_base.SparseEfficiencyWarning}
.___v_desugar_4 = pyimport "_data"
._data = pyimport "_data"
._data_matrix: Never
._minmax_mixin: Never
.___v_desugar_5 = pyimport "__init__"

._sparsetools: Never
.___v_desugar_6 = pyimport "<failure>"

.get_csr_submatrix: Never
.csr_sample_offsets: Never
.csr_todense: Never
.csr_sample_values: Never
.csr_row_index: Never
.csr_row_slice: Never
.csr_column_index1: Never
.csr_column_index2: Never
.___v_desugar_7 = pyimport "_index"
._index = pyimport "_index"
.IndexMixin: Never
.___v_desugar_8 = pyimport "_sputils"
._sputils = pyimport "_sputils"
.upcast: (*args: Obj) -> Never
.upcast_char: (*args: Never) -> Never
.to_native: |Type_532276 <: Structural({.dtype = Never})|(A: Type_532276) -> Never
.isdense: |Type_532911 <: Structural({.ndim = ?E}), E: Type|(x: Type_532911) -> Bool
.isshape: |R :> {d in {Type_v_global_906399: Nat | ((Type_v_global_906399 <= 0) and (Type_v_global_906399 != 0) or Type_v_global_906399 == 0)}}, Type_532308 <: Structural({.__len__ = (self: Never) -> Nat}), O <: Bool, O: Type, R :> {ndim in {1}}|(x: Type_532308, nonneg: Structural({.__and__ = (self: Never, R) -> O}) := {False} and Structural({.__and__ = (self: Never, R) -> O}), allow_1d: Structural({.__and__ = (self: Never, R) -> O}) := {False} and Structural({.__and__ = (self: Never, R) -> O})) -> Bool
.getdtype: |E: Type|(dtype: Obj, a: Structural({.dtype = E}) := Structural({.dtype = E}), default: Obj := Obj) -> E
.isscalarlike: |Type_532911 <: Structural({.ndim = ?E}), E: Type|(x: Type_532911) -> Bool
.isintlike: (x: Obj) -> Bool
.downcast_intp_index: |Type_532274 <: Structural({.astype = (self: Obj, ?532579) -> ?532580 and (self: Obj, ?532593) -> ?532594; .min = (self: Obj) -> ?532584; .dtype = ?532570; .size = ?E; .max = (self: Obj) -> ?532583}), E: Type, Type_532579: Type, Type_532580: Type, Type_532570: Type, Type_532274 <: Structural({.astype = (self: Never, ?532579) -> ?532580 and (self: Never, ?532593) -> ?532594; .min = (self: Never) -> ?532584; .dtype = ?532570; .size = ?E; .max = (self: Never) -> ?532583}), Type_532593: Type, Type_532584: Type, Type_532583: Type, Type_532594: Type|(arr: Type_532274) -> Type_532274
.get_sum_dtype: (dtype: Obj) -> Never
.check_shape: |Type_532971: Type, Type_532317 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?532965) -> ?I and (self: Obj, ?532971) -> ?532972}), T: Type, Type_532965: Type, I <: global::Iterable(?T), Type_532972: Type|(args: Type_532317, current_shape: Obj := {None}, allow_1d: Obj := {False}) -> global::HomogenousTuple(Int)
.is_pydata_spmatrix: (m: Obj) -> Bool
.Type__cs_matrix: ClassType
.Type__cs_matrix <: Never
.Type__cs_matrix.__call__: (arg1: Obj, shape: Obj := Obj, dtype: Obj := Obj, copy: Obj := Obj) -> _compressed.Type__cs_matrix
.Type__cs_matrix._getnnz: (self: _compressed.Type__cs_matrix, axis: Nat := Nat) -> Never
.Type__cs_matrix.check_format: (self: _compressed.Type__cs_matrix, full_check: Bool := Bool) -> NoneType
.Type__cs_matrix._scalar_binopt: |Type_535319: Type|(self: _compressed.Type__cs_matrix, other: Type_535319, op: (Obj, Type_535319) -> Structural({.dtype = Never})) -> Never
.Type__cs_matrix.__eq__: (self: Never, other: Never) -> Never
.Type__cs_matrix.__ne__: (self: Never, other: Never) -> Never
.Type__cs_matrix._inequality: (self: Never, other: Never, op: ({0}, Never) -> Bool, op_name: {"_le_"}, bad_scalar_msg: Obj) -> Never
.Type__cs_matrix.__lt__: (self: Never, other: Never) -> Never
.Type__cs_matrix.__gt__: (self: Never, other: Never) -> Never
.Type__cs_matrix.__le__: (self: Never, other: Never) -> Never
.Type__cs_matrix.__ge__: (self: Never, other: Never) -> Never
.Type__cs_matrix._add_dense: |E: Type, Type_538955: Type, Type_535355 <: Structural({.shape = ?E; .dtype = ?538955})|(self: Never, other: Type_535355) -> Never
.Type__cs_matrix._add_sparse: Never
.Type__cs_matrix._sub_sparse: (self: _compressed.Type__cs_matrix, other: Obj) -> Never
.Type__cs_matrix.multiply: (self: _compressed.Type__cs_matrix, other: Never) -> Never
.Type__cs_matrix._matmul_vector: |Type_535373 <: Structural({.dtype = ?540060}), Type_540060: Type|(self: Never, other: Type_535373) -> Never
.Type__cs_matrix._matmul_multivector: |Self <: global::Indexable(?K, ?V), K: Type, Type_535378 <: Structural({.dtype = ?540163; .ravel = (self: Obj) -> ?540177; .shape = ?Self}), V: Type, Type_540177: Type, Type_540163: Type|(self: Never, other: Type_535378) -> Never
.Type__cs_matrix._matmul_sparse: (self: _compressed.Type__cs_matrix, other: Never) -> Never
.Type__cs_matrix.diagonal: (self: Never, k: Structural({.__le__ = (self: Never, Obj) -> Bool; .__ge__ = (self: Never, Obj) -> Bool}) := {0} and Structural({.__le__ = (self: Never, Obj) -> Bool; .__ge__ = (self: Never, Obj) -> Bool})) -> Never
.Type__cs_matrix._maximum_minimum: (self: Never, other: Never, npop: (Obj, Obj) -> Never, op_name: Obj, dense_check: (Never) -> Bool) -> Never
.Type__cs_matrix.maximum: (self: Never, other: Never) -> Never
.Type__cs_matrix.minimum: (self: Never, other: Never) -> Never
.Type__cs_matrix.sum: |E: Type, E :> {1}|(self: _compressed.Type__cs_matrix, axis: Structural({.__mod__ = (self: Never, Obj) -> E}) := {None} and Structural({.__mod__ = (self: Never, Obj) -> E}), dtype: Obj := {None}, out: Structural({.shape = E}) := {None} and Structural({.shape = E})) -> Never
.Type__cs_matrix._minor_reduce: |Type_535424 :> {None}|(self: _compressed.Type__cs_matrix, ufunc: Obj, data: Type_535424 := Type_535424 and Type_535424) -> global::Tuple([Never, Never])
.Type__cs_matrix._get_int: (self: _compressed.Type__cs_matrix, idx: Float) -> Never
.Type__cs_matrix._get_intXint: (self: _compressed.Type__cs_matrix, row: Obj, col: Obj) -> Never
.Type__cs_matrix._get_sliceXslice: (self: _compressed.Type__cs_matrix, row: Obj, col: Obj) -> Never
.Type__cs_matrix._get_arrayXarray: (self: _compressed.Type__cs_matrix, row: Obj, col: Obj) -> ClassType
.Type__cs_matrix._get_columnXarray: (self: _compressed.Type__cs_matrix, row: Obj, col: Obj) -> Never
.Type__cs_matrix._major_index_fancy: (self: _compressed.Type__cs_matrix, idx: Obj) -> Never
.Type__cs_matrix._major_slice: |Type_535451 :> {False}, Type_535451 <: Bool|(self: _compressed.Type__cs_matrix, idx: Obj, copy: Type_535451 := Type_535451 and Type_535451) -> Never
.Type__cs_matrix._minor_index_fancy: (self: _compressed.Type__cs_matrix, idx: Obj) -> Never
.Type__cs_matrix._minor_slice: (self: Never, idx: Obj, copy: Bool := Bool) -> Never
.Type__cs_matrix._get_submatrix: |Type_535466: Type|(self: _compressed.Type__cs_matrix, major: Type_535466 := Type_535466, minor: Type_535466 := Type_535466, copy: Bool := Bool) -> Never
.Type__cs_matrix._set_int: (self: _compressed.Type__cs_matrix, idx: Obj, x: Obj) -> Never
.Type__cs_matrix._set_array: |Self <: global::Indexable(?K, ?V), K: Type, Self <: global::Indexable(?K, ?V), V: Type, Type_535475 <: Structural({.shape = ?Self})|(self: _compressed.Type__cs_matrix, idx: Type_535475, x: Structural({.shape = Self; .data = Obj})) -> Never
.Type__cs_matrix._set_intXint: (self: _compressed.Type__cs_matrix, row: Obj, col: Obj, x: Obj) -> Never
.Type__cs_matrix._set_arrayXarray: (self: _compressed.Type__cs_matrix, row: Obj, col: Obj, x: Obj) -> Never
.Type__cs_matrix._set_arrayXarray_sparse: |K: Type, Self <: global::Indexable(?K, ?V), Type_535489 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?541545) -> ?541546}), Self <: global::Indexable(?K, ?V), V: Type, Type_541546: Type, Type_541497 <: Structural({.__len__ = (self: Never) -> Nat}), Self <: global::Indexable(?K, ?V), Type_541498 <: Structural({.__len__ = (self: Never) -> Nat}), Type_541545: Type, Self <: global::Indexable(?K, ?V)|(self: _compressed.Type__cs_matrix, row: Type_535489, col: Self, x: Structural({.col = Type_541498; .shape = Self and Self; .data = Obj; .row = Type_541497})) -> Never
.Type__cs_matrix._setdiag: |E: Type, Type_541669: Type, Type_541669 <: Structural({.__len__ = (self: Never) -> Nat; .ndim = ?E; .__getitem__ = (self: Obj, ?541668) -> ?541669}), Type_541668: Type|(self: Never, values: Type_541669, k: Structural({.__lt__ = (self: Never, Obj) -> Bool; .__add__ = (self: Never, Obj) -> Never})) -> Never
.Type__cs_matrix._prepare_indices: Never
.Type__cs_matrix._set_many: (self: _compressed.Type__cs_matrix, i: Obj, j: Obj, x: Obj) -> Never
.Type__cs_matrix._zero_many: (self: _compressed.Type__cs_matrix, i: Obj, j: Obj) -> Never
.Type__cs_matrix._insert_many: (self: _compressed.Type__cs_matrix, i: Obj, j: Obj, x: Obj) -> Never
.Type__cs_matrix.tocoo: |Type_535516 :> {True}|(self: _compressed.Type__cs_matrix, copy: Type_535516 := Type_535516 and Type_535516) -> Never
.Type__cs_matrix.toarray: |Type_535520 :> {None}, Type_535522 :> {None}|(self: _compressed.Type__cs_matrix, order: Type_535520 := Type_535520 and Type_535520, out: Type_535522 := Type_535522 and Type_535522) -> Never
.Type__cs_matrix.eliminate_zeros: (self: _compressed.Type__cs_matrix) -> NoneType
.Type__cs_matrix.has_canonical_format: (self: _compressed.Type__cs_matrix) -> Bool
.Type__cs_matrix.has_canonical_format: (self: _compressed.Type__cs_matrix, val: Bool) -> NoneType
.Type__cs_matrix.sum_duplicates: (self: _compressed.Type__cs_matrix) -> NoneType
.Type__cs_matrix.has_sorted_indices: (self: _compressed.Type__cs_matrix) -> Bool
.Type__cs_matrix.has_sorted_indices: (self: _compressed.Type__cs_matrix, val: Bool) -> NoneType
.Type__cs_matrix.sorted_indices: Never
.Type__cs_matrix.sort_indices: (self: _compressed.Type__cs_matrix) -> NoneType
.Type__cs_matrix.prune: (self: _compressed.Type__cs_matrix) -> NoneType
.Type__cs_matrix.resize: (self: _compressed.Type__cs_matrix, *shape: global::Mul(global::Mul(Never))) -> NoneType
.Type__cs_matrix._with_data: |Type_542738 <: Structural({.dtype = ?542742 and ?542743}), Type_542742: Type, Type_542743: Type|(self: _compressed.Type__cs_matrix, data: Type_542738, copy: Bool := Bool) -> Never
.Type__cs_matrix._binopt: Never
.Type__cs_matrix._divide_sparse: |E: Type, Type_535554 <: Structural({.nonzero = (self: Obj) -> ?Self; .shape = ?E}), K: Type, Self <: global::Indexable(?K, ?V), V: Type|(self: Never, other: Type_535554) -> Never

._make_diagonal_csr: |Type_535556 <: Structural({.__len__ = (self: Never) -> Nat})|(data: Type_535556, is_array: {self in Obj} := {False} and {self in Obj}) -> Never
._process_slice: Never
