##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/sparse/_data.py 1734628983 17505

.math = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "_base"
._base = pyimport "_base"
._spbase: Never
.sparray: Never
._ufuncs_with_fixed_point_at_zero: Never
.___v_desugar_2 = pyimport "_sputils"
._sputils = pyimport "_sputils"
.isscalarlike: |Type_532911 <: Structural({.ndim = ?E}), E: Type|(x: Type_532911) -> Bool
.validateaxis: (axis: Float) -> NoneType
.__all__: global::List!(Never, 0)
.Type__data_matrix: ClassType
.Type__data_matrix <: Never
.Type__data_matrix.__call__: (arg1: Obj) -> _data.Type__data_matrix
.Type__data_matrix.dtype: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.dtype: (self: _data.Type__data_matrix, newtype: Obj) -> NoneType
.Type__data_matrix._deduped_data: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.__abs__: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.__round__: (self: _data.Type__data_matrix, ndigits: Obj := Obj) -> Never
.Type__data_matrix._real: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix._imag: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.__neg__: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.__imul__: (self: _data.Type__data_matrix, other: Never) -> Never
.Type__data_matrix.__itruediv__: (self: _data.Type__data_matrix, other: Never) -> Never
.Type__data_matrix.astype: (self: _data.Type__data_matrix, dtype: Obj, casting: Obj := Obj, copy: Bool := Bool) -> Never
.Type__data_matrix.conjugate: (self: _data.Type__data_matrix, copy: Bool := Bool) -> Never
.Type__data_matrix.copy: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.count_nonzero: (self: _data.Type__data_matrix) -> Never
.Type__data_matrix.power: (self: _data.Type__data_matrix, n: Never, dtype: Obj := Obj) -> Never
.Type__data_matrix._mul_scalar: (self: _data.Type__data_matrix, other: Obj) -> Never


._find_missing_index: (ind: global::Iterable(Nat), n: Float) -> Never
.Type__minmax_mixin: ClassType
.Type__minmax_mixin.__call__: () -> _data.Type__minmax_mixin
.Type__minmax_mixin._min_or_max_axis: (self: Never, axis: Nat, min_or_max: (Obj, {0}) -> Never) -> Never
.Type__minmax_mixin._min_or_max: (self: Never, axis: Obj, out: Obj, min_or_max: Obj) -> Never
.Type__minmax_mixin._arg_min_or_max_axis: (self: Never, axis: {0}, argmin_or_argmax: (Obj) -> Never, compare: (Obj, Obj) -> Structural({.__or__ = (self: Never, Obj) -> Bool})) -> Never
.Type__minmax_mixin._arg_min_or_max: |T: Type, T <: Float|(self: Never, axis: T, out: Obj, argmin_or_argmax: (Obj) -> Never, compare: (Obj, Obj) -> Bool) -> T
.Type__minmax_mixin.max: (self: Never, axis: Obj := Obj, out: Obj := Obj) -> Never
.Type__minmax_mixin.min: (self: Never, axis: Obj := Obj, out: Obj := Obj) -> Never
.Type__minmax_mixin.nanmax: (self: Never, axis: Obj := Obj, out: Obj := Obj) -> Never
.Type__minmax_mixin.nanmin: (self: Never, axis: Obj := Obj, out: Obj := Obj) -> Never
.Type__minmax_mixin.argmax: (self: Never, axis: Float := Float, out: Obj := Obj) -> Never
.Type__minmax_mixin.argmin: (self: Never, axis: Float := Float, out: Obj := Obj) -> Never

