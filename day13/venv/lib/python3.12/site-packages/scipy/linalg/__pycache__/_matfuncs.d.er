##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/linalg/_matfuncs.py 1734628983 24412
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.product: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "__init__"

.dot: Never
.diag: Never
.prod: Never
.logical_not: Never
.ravel: Never
.transpose: Never
.conjugate: Never
.absolute: Never
.amax: Never
.sign: Never
.isfinite: Never
.triu: Never
.___v_desugar_3 = pyimport "__init__"

.LinAlgError: Never
.bandwidth: Never
.___v_desugar_4 = pyimport "_misc"
._misc = pyimport "_misc"
.norm: |E: Type, Type_109517: Type, Type_109175: Type, Type_109174: Type, Type_109263: Type, E :> {1}, Type_109538: Type, Type_96945 <: Structural({.T = ?109517 and ?109538; .ndim = ?E and ?E; .dtype = ?109175 and ?109263; .size = ?109174})|(a: Type_96945, ord: E := E, axis: Obj := Obj, keepdims: Obj := Obj, check_finite: Bool := Bool) -> Never
.___v_desugar_5 = pyimport "_basic"
._basic = pyimport "_basic"
.solve: |O :> {False}, O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), Type_109328 :> {True}, Type_109321 :> {False}, O: Type, O :> {False}, O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), Type_109333 :> {False}, Type_109333 <: Bool, R: Type|(a: Obj, b: Obj, lower: Type_109321 := Type_109321 and Type_109321, overwrite_a: O := O and O, overwrite_b: O := O and O, check_finite: Type_109328 := Type_109328 and Type_109328, assume_a: {"gen"} := {"gen"} and {"gen"}, transposed: Type_109333 := Type_109333 and Type_109333) -> Float
.inv: |Type_109431 :> {True}|(a: Obj, overwrite_a: {False} := {False} and {False}, check_finite: Type_109431 := Type_109431 and Type_109431) -> Never
.___v_desugar_6 = pyimport "_decomp_svd"
._decomp_svd = pyimport "_decomp_svd"
.svd: Never
.___v_desugar_7 = pyimport "_decomp_schur"
._decomp_schur = pyimport "_decomp_schur"
.schur: Never
.rsf2csf: Never
.___v_desugar_8 = pyimport "_expm_frechet"
._expm_frechet = pyimport "_expm_frechet"
.expm_frechet: |E: Type, K: Type, Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V), V: Type, Self <: global::Indexable(?K, ?V), Type_91199 <: Structural({.shape = ?Self and ?Self; .ndim = ?E}), Self <: global::Indexable(?K, ?V), E :> {2}|(A: Type_91199, E: Structural({.ndim = E; .shape = Self and Self}), method: {"SPS"} := {"SPS"}, compute_expm: Bool := Bool, check_finite: Bool := Bool) -> Never
.expm_cond: |Type_96053 <: Structural({.__len__ = (self: Never) -> Nat}), Type_90445 <: Structural({.shape = ?96053 and ?Self}), K: Type, Self <: global::Indexable(?K, ?V), V: Type|(A: Type_90445, check_finite: Bool := Bool) -> Never
.___v_desugar_9 = pyimport "_matfuncs_sqrtm"
._matfuncs_sqrtm = pyimport "_matfuncs_sqrtm"
.sqrtm: Never
.___v_desugar_10 = pyimport "<failure>"

.pick_pade_structure: Never
.pade_UV_calc: Never
.__all__: global::List!({"sinm", "sqrtm", "fractional_matrix_power", "tanm", "logm", "tanhm", "coshm", "cosm", "expm_cond", "expm", "funm", "expm_frechet", "signm", "sinhm", "khatri_rao"}, 15)
.eps: Never
.feps: Never
._array_precision: global::Dict!({{"f"}: {0}, {"F"}: {0}, {"d"}: {1}, {"i"}: {1}, {"l"}: {1}, {"D"}: {1}})
._asarray_square: Never
._maybe_real: |Type_123492: Type, Type_123536 <: Structural({.dtype = ?123492; .real = ?123536; .imag = ?123525}), Type_123536: Type, Type_123525: Type|(A: Obj, B: Type_123536, tol: Obj := Obj) -> Type_123536
.fractional_matrix_power: (A: Obj, t: Obj) -> Never
.logm: (A: Obj, disp: Bool := Bool) -> Never
.expm: (A: Obj) -> Structural({.__sub__ = (self: Never, Obj) -> Structural({.T = Never; .ndim = Never; .dtype = Never; .size = Never})})
._exp_sinch: (x: global::Indexable(Obj, global::Indexable(Obj, Never))) -> Structural({.__mul__ = (self: Never, Obj) -> Never})
.cosm: (A: Obj) -> Never
.sinm: (A: Obj) -> Never
.tanm: (A: Obj) -> Structural({.imag = Never; .real = Never; .dtype = Never})
.coshm: (A: Obj) -> Structural({.imag = Never; .real = Never; .dtype = Never})
.sinhm: (A: Obj) -> Structural({.imag = Never; .real = Never; .dtype = Never})
.tanhm: (A: Obj) -> Structural({.imag = Never; .real = Never; .dtype = Never})
.funm: (A: Obj, func: (Obj) -> Never, disp: Bool := {True} and Bool) -> Never
.signm: (A: Obj, disp: Bool := Bool) -> Never
.khatri_rao: (a: Obj, b: Obj) -> Never
