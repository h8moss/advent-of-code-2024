##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/linalg/_decomp_schur.py 1734628983 10731

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "__init__"

.asarray_chkfinite: Never
.single: Never
.asarray: Never
.array: Never
.___v_desugar_2 = pyimport "__init__"

.norm: Never
.___v_desugar_3 = pyimport "_misc"
._misc = pyimport "_misc"
.LinAlgError: Never
._datacopied: Never
.___v_desugar_4 = pyimport "lapack"
.lapack = pyimport "lapack"
.get_lapack_funcs: (names: global::Iterable(Never), arrays: Never := Never, dtype: Obj := Obj, ilp64: Bool := Bool and Bool) -> Never
.___v_desugar_5 = pyimport "_decomp"
._decomp = pyimport "_decomp"
.eigvals: (a: Obj, b: Obj := Obj, overwrite_a: {False} := {False}, check_finite: Bool := Bool, homogeneous_eigvals: Bool := Bool) -> global::Tuple([Never, Never])
.__all__: global::List!({"schur", "rsf2csf"}, 2)
._double_precision: global::List!({"d", "i", "l"}, 3)
.schur: |T :> {"real"}, T <: global::Indexable(K, V), K :> {0, 1}, E :> {None}, Type_488212 :> {True}, Type_488212 <: Bool, V: Type|(a: Obj, output: T := T and T, lwork: E := E and E, overwrite_a: {False} := {False} and {False}, sort: {None} := {None} and {None}, check_finite: Type_488212 := Type_488212 and Type_488212) -> global::Indexable(Obj, Never) or T
.eps: Never
.feps: Never
._array_kind: global::Dict!({{"b"}: {0}, {"l"}: {0}, {"B"}: {0}, {"f"}: {0}, {"F"}: {1}, {"d"}: {0}, {"i"}: {0}, {"D"}: {1}, {"h"}: {0}})
._array_precision: global::Dict!({{"f"}: {0}, {"F"}: {0}, {"d"}: {1}, {"i"}: {1}, {"l"}: {1}, {"D"}: {1}})
._array_type: global::List!(global::List!({"D", "f", "F", "d"}, 2), 2)
._commonType: |T :> {"D", "f", "F", "d"}, Type_490286: Type, T <: Structural({.dtype = Type_490286})|(*arrays: T) -> T
._castCopy: |T <: Structural({.dtype = Type_490544; .copy = (self: Obj) -> Type_490553; .astype = (self: Obj, Type_490621) -> Type_490622}), Type_490553: Type, Type_490544: Type, Type_490622: Type, Type_490621 :> {Type}, T: Type|(Type: Obj, *arrays: T) -> T
.rsf2csf: |V <: global::Dict!(D), D: global::GenericDict, Self <: global::Dict!(D)|(T: Self, Z: V, check_finite: Bool := Bool) -> global::Tuple([Self, V])
