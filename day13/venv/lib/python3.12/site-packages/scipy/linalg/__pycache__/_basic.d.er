##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/linalg/_basic.py 1734628983 69168
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.warn: Never
.___v_desugar_2 = pyimport "<failure>"

.product: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_3 = pyimport "__init__"

.atleast_1d: Never
.atleast_2d: Never
.___v_desugar_4 = pyimport "lapack"
.lapack = pyimport "lapack"
.get_lapack_funcs: (names: global::Iterable(Never), arrays: Never := Never, dtype: Obj := Obj, ilp64: Bool := Bool) -> Never
._compute_lwork: (routine: () -> Never, *args: Obj, **kwargs := ?106687) -> Never
.___v_desugar_5 = pyimport "_misc"
._misc = pyimport "_misc"
.LinAlgError: Never
._datacopied: |Type_96991 <: Structural({.base = ?108697}), Type_108697: Type|(arr: Type_96991, original: Obj) -> {.arr.base in {None}}
.LinAlgWarning: {_misc.LinAlgWarning}
.___v_desugar_6 = pyimport "_decomp"
._decomp = pyimport "_decomp"
._asarray_validated: Never
.___v_desugar_7 = pyimport "__init__"

._decomp: Never
._decomp_svd: Never
.___v_desugar_8 = pyimport "<failure>"

.levinson: Never
.___v_desugar_9 = pyimport "<failure>"

.find_det_from_lu: Never
.__all__: global::List!({"pinv", "det", "lstsq", "matmul_toeplitz", "solve", "inv", "matrix_balance", "solveh_banded", "solve_circulant", "solve_banded", "solve_toeplitz", "pinvh", "solve_triangular"}, 13)
.lapack_cast_dict: Never
._solve_check: ||Never
.solve: |O :> {False}, O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), Type_109328 :> {True}, Type_109321 :> {False}, O: Type, O :> {False}, O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), Type_109333 :> {False}, Type_109333 <: Bool, R: Type|(a: Obj, b: Obj, lower: Type_109321 := Type_109321 and Type_109321, overwrite_a: O := O and O, overwrite_b: O := O and O, check_finite: Type_109328 := Type_109328 and Type_109328, assume_a: {"gen"} := {"gen"} and {"gen"}, transposed: Type_109333 := Type_109333 and Type_109333) -> Float
.solve_triangular: |Type_109351 :> {True}, Type_109347 :> {False}, Type_109343 :> {False}|(a: Obj, b: Obj, trans: {1, 0, 2} := {1, 0, 2} and {1, 0, 2}, lower: Type_109343 := Type_109343 and Type_109343, unit_diagonal: Type_109347 := Type_109347 and Type_109347, overwrite_b: {False} := {False} and {False}, check_finite: Type_109351 := Type_109351 and Type_109351) -> Never
.solve_banded: |O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), R: Type, O: Type, R <: Nat|(l_and_u: global::Indexable(Obj, R), ab: Obj, b: Obj, overwrite_ab: O := {False} and O, overwrite_b: O := {False} and O, check_finite: Obj := {True}) -> Never
.solveh_banded: |O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), R: Type, O: Type, R :> {0}|(ab: Obj, b: Obj, overwrite_ab: O := {False} and O, overwrite_b: O := {False} and O, lower: Bool := {False} and Bool, check_finite: Obj := {True}) -> Structural({.__gt__ = (self: Never, R) -> Bool; .__lt__ = (self: Never, R) -> Bool})
.solve_toeplitz: (c_or_cr: Obj, b: Never, check_finite: Obj := Obj) -> Never
._get_axis_len: |K <: Float, K: Type, Self <: global::Indexable(?K, ?V), R: Type, Type_109404 <: Structural({.ndim = ?R; .shape = ?Self}), V: Type|(aname: Obj, a: Type_109404, axis: K) -> Never
.solve_circulant: |E :> Int, E :> {"raise"}, R :> {None}, K :> Int, K <: Float, K :> {0}, K <: Float|(c: Obj, b: Obj, singular: E := E and E, tol: R := R and R, caxis: K := K and K, baxis: K := K and K, outaxis: E := E and E) -> Never
.inv: |Type_109431 :> {True}|(a: Obj, overwrite_a: {False} := {False} and {False}, check_finite: Type_109431 := Type_109431 and Type_109431) -> Never
.det: (a: Obj, overwrite_a: Bool := Bool, check_finite: Bool := Bool) -> Never
.lstsq: |O <: Structural({.__or__ = (self: Never, ?R) -> ?O}), R: Type, O: Type, O <: Structural({.__or__ = (self: Never, ?R) -> ?O})|(a: Obj, b: Obj, cond: Never := Never, overwrite_a: O := {False} and O, overwrite_b: O := {False} and O, check_finite: Obj := {True}, lapack_driver: {"gelss"} := {None} and {"gelss"}) -> NoneType

.pinv: (a: Obj, atol: {0.0} := {0.0}, rtol: Never := Never, return_rank: Bool := Bool, check_finite: Obj := Obj) -> Never
.pinvh: (a: Obj, atol: {0.0} := {0.0}, rtol: Never := Never, lower: Obj := Obj, return_rank: Bool := Bool, check_finite: Obj := Obj) -> Never
.matrix_balance: |Type_109499 :> {True}, Type_109503 :> {True}, Type_109510 :> {False}, Type_109507 :> {False}, Type_109507 <: Bool|(A: Obj, permute: Type_109499 := Type_109499 and Type_109499, scale: Type_109503 := Type_109503 and Type_109503, separate: Type_109507 := Type_109507 and Type_109507, overwrite_a: Type_109510 := Type_109510 and Type_109510) -> global::Tuple([Never, Never])
._validate_args_for_toeplitz_ops: (c_or_cr: Obj, b: Never, check_finite: Obj, keep_b_shape: Obj, enforce_square: Structural({.__and__ = (self: Never, Obj) -> Structural({.__or__ = (self: Never, Obj) -> Bool})}) := {True} and Structural({.__and__ = (self: Never, Obj) -> Structural({.__or__ = (self: Never, Obj) -> Bool})})) -> global::Tuple([Never, Never, Never, Never, Never])
.matmul_toeplitz: (c_or_cr: Obj, x: Never, check_finite: Obj := Obj, workers: Obj := Obj) -> Never
