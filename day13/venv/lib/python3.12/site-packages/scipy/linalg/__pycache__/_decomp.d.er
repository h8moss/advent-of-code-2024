##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/linalg/_decomp.py 1734628983 61881
.__all__: global::List!({"eig_banded", "eigh_tridiagonal", "eigvals_banded", "eig", "eigvalsh", "hessenberg", "eigvalsh_tridiagonal", "eigvals", "cdf2rdf", "eigh"}, 10)
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "__init__"

.array: Never
.isfinite: Never
.inexact: Never
.nonzero: Never
.iscomplexobj: Never
.flatnonzero: Never
.conj: Never
.asarray: Never
.argsort: Never
.empty: Never
.iscomplex: Never
.zeros: Never
.einsum: Never
.eye: Never
.inf: Never
.___v_desugar_2 = pyimport "_util"
._util = pyimport "_util"
._asarray_validated: (a: Obj, check_finite: Bool := Bool and Bool, sparse_ok: Bool := Bool and Bool, objects_ok: Bool := Bool and Bool, mask_ok: Bool := Bool and Bool, as_inexact: Bool := Bool and Bool) -> Never
.___v_desugar_3 = pyimport "_misc"
._misc = pyimport "_misc"
.LinAlgError: Never
._datacopied: Never
.norm: Never
.___v_desugar_4 = pyimport "lapack"
.lapack = pyimport "lapack"
.get_lapack_funcs: (names: global::Iterable(Never), arrays: Never := Never, dtype: Obj := Obj, ilp64: Bool := Bool and Bool) -> Never
._compute_lwork: Never
._I: Never
._make_complex_eigvecs: |Type_484038 <: Structural({.__gt__ = (self: Never, R) -> Bool}), R :> {0}, Type_483606 <: Structural({.imag = Type_484038})|(w: Type_483606, vin: global::Indexable(Obj, Never), dtype: Obj) -> Never
._make_eigvals: |Type_484178: Type, Type_484162 <: Structural({.__div__ = (self: Never, R) -> O}), O: Type, Type_484161: Type, E <: Structural({.__getitem__ = (self: Obj, Type_484161) -> Type_484162; .imag = E}), E <: Structural({.__getitem__ = (self: Obj, Type_484178) -> R}), E :> {0}, R: Type|(alpha: E, beta: E, homogeneous_eigvals: Bool) -> Never
._geneig: (a1: Obj, b1: Obj, left: Obj, right: Bool, overwrite_a: Obj, overwrite_b: Obj, homogeneous_eigvals: Bool) -> global::Tuple([Never, Never])
.eig: |Type_483612 :> {False}, Type_483612 <: Bool, Type_483633 :> {True}, Type_483633 <: Bool, Type_483623 :> {None}, R :> {True}, R <: Bool|(a: Obj, b: Type_483623 := Type_483623 and Type_483623, left: {False} := {False} and {False}, right: R := R and R, overwrite_a: {False} := {False} and {False}, overwrite_b: {False} := {False} and {False}, check_finite: Type_483633 := Type_483633 and Type_483633, homogeneous_eigvals: Type_483612 := Type_483612 and Type_483612) -> global::Tuple([Never, Never])
.eigh: |Type_483639 :> {None}, V :> {True}, V <: Bool, Type_483643 :> {False}, Type_483643 <: Bool, Type_483649 :> {1}, Type_483651 :> {True}, Type_483651 <: Bool, V: Type|(a: Obj, b: Type_483639 := Type_483639 and Type_483639, lower: V := V and V, eigvals_only: Type_483643 := Type_483643 and Type_483643, overwrite_a: {False} := {False} and {False}, overwrite_b: {False} := {False} and {False}, Type: Type_483649 := Type_483649 and Type_483649, check_finite: Type_483651 := Type_483651 and Type_483651, subset_by_index: {None} := {None} and {None}, subset_by_value: {None} := {None} and {None}, driver: {"gvx", "gvd", "evr"} := {"gvx", "gvd", "evr"} and {"gvx", "gvd", "evr"}) -> global::Indexable(Obj, V)
._conv_dict: global::Dict!({{1}: {1}, {"all"}: {0}, {"index"}: {2}, {2}: {2}, {"v"}: {1}, {"a"}: {0}, {0}: {0}, {"value"}: {1}, {"i"}: {2}})
._check_select: |R <: {_: E and Nat | _ == 0}, E :> {0}, O <: Structural({.__add__ = (self: Never, R) -> E}), R <: global::Iterable(Never) and global::Ord and Structural({.__lt__ = (self: Never, R) -> Bool}) and Structural({.__gt__ = (self: Never, R) -> Bool}) and Structural({.__sub__ = (self: Never, Never) -> O}), R :> {1}, R <: global::Iterable(R) and global::Ord and Structural({.__lt__ = (self: Never, R) -> Bool}) and Structural({.__gt__ = (self: Never, R) -> Bool}) and Structural({.__sub__ = (self: Never, R) -> O})|(select: {1}, select_range: Obj, max_ev: E, max_len: R) -> global::Tuple([{1}, Never, Never, R, R, E])
.eig_banded: |E :> {1, 0}, Type_483682 :> {False}, Type_483682 <: Structural({.__or__ = (self: Never, R) -> O}), Type_483703 :> {True}, Type_483703 <: Bool, Type_483678 :> {False}, R :> {False}, R <: Structural({.__or__ = (self: Never, R) -> R}), Type_483668 :> {None}, R :> {False}, R <: Structural({.__or__ = (self: Never, R) -> R}), O <: Bool, R :> {False}, R <: Structural({.__or__ = (self: Never, R) -> Obj}), Type_483682 :> {False}, Type_483682 <: Structural({.__or__ = (self: Never, R) -> O}), R :> {False}, R <: Structural({.__or__ = (self: Never, R) -> R}), R :> {False}, R <: Structural({.__or__ = (self: Never, R) -> R}), R: Type, R :> {False}, R <: Structural({.__or__ = (self: Never, R) -> Type_483682}), Type_483682 :> {False}, Type_483682 <: Structural({.__or__ = (self: Never, R) -> O})|(a_band: Obj, lower: Type_483678 := Type_483678 and Type_483678, eigvals_only: Type_483682 := Type_483682 and Type_483682, overwrite_a_band: R := R and R, select: {"a"} := {"a"} and {"a"}, select_range: Type_483668 := Type_483668 and Type_483668, max_ev: E := E and E, check_finite: Type_483703 := Type_483703 and Type_483703) -> global::Tuple([Never, Never])
.eigvals: (a: Obj, b: Obj := Obj, overwrite_a: {False} := {False}, check_finite: Bool := Bool, homogeneous_eigvals: Bool := Bool) -> global::Tuple([Never, Never])
.eigvalsh: |V :> {True}, V <: Bool|(a: Obj, b: Obj := Obj, lower: V := V, overwrite_a: {False} := {False}, overwrite_b: {False} := {False}, Type: Obj := Obj, check_finite: Bool := Bool, subset_by_index: {None} := {None}, subset_by_value: {None} := {None}, driver: {"gvd", "gvx", "evr"} := {"gvd", "gvx", "evr"}) -> global::Indexable(Obj, V)
.eigvals_banded: (a_band: Obj, lower: Obj := Obj, overwrite_a_band: {False} := {False}, select: {"a"} := {"a"}, select_range: Obj := Obj, check_finite: Bool := Bool) -> global::Tuple([Never, Never])
.eigvalsh_tridiagonal: (d: Obj, e: Obj, select: Obj := Obj, select_range: Obj := Obj, check_finite: Bool := Bool, tol: Obj := Obj, lapack_driver: Obj := Obj) -> Never
.eigh_tridiagonal: (d: Obj, e: Obj, eigvals_only: Bool := Bool, select: Obj := Obj, select_range: Obj := Obj, check_finite: Bool := Bool, tol: Obj := Obj, lapack_driver: Obj := Obj) -> Never
._check_info: |V <: Structural({.__len__ = (self: Never) -> Nat; .__lt__ = (self: Never, R) -> Bool; .__gt__ = (self: Never, R) -> Bool}), R :> {"did not converge (LAPACK info=Type_d)", "did not converge (only eigenvalues with order >= Type_d have converged)", "Type_d eigenvectors failed to converge"}, R :> {0}|(info: V, driver: Str, positive: R := R and R) -> NoneType
.hessenberg: |O :> {False}, O <: Structural({.__or__ = (self: Never, R) -> O}), O :> {False}, O <: Structural({.__or__ = (self: Never, R) -> O}), Type_483830 :> {True}, Type_483830 <: Bool, Type_483826 :> {True, False}, Type_483826 <: Bool, O :> {False}, O <: Structural({.__or__ = (self: Never, R) -> Obj}), O :> {False}, O <: Structural({.__or__ = (self: Never, R) -> O}), R: Type, O :> {False}, O <: Structural({.__or__ = (self: Never, R) -> O})|(a: Obj, calc_q: Type_483826 := Type_483826 and Type_483826, overwrite_a: O := O and O, check_finite: Type_483830 := Type_483830 and Type_483830) -> global::Tuple([Never, Never])
.cdf2rdf: (w: Obj, v: Obj) -> global::Tuple([Never, Never])
