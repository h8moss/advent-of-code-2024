##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/_lib/_util.py 1734628983 32488
.re = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.___v_desugar_1 = pyimport "<failure>"

.contextmanager: Never
.functools = pyimport "<failure>"


.operator = pyimport "<failure>"


.warnings = pyimport "<failure>"


.numbers = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.namedtuple: Never
.inspect = pyimport "<failure>"


.math = pyimport "<failure>"


.___v_desugar_3 = pyimport "<failure>"

.Optional: Never
.Union: Never
.TYPE_CHECKING: Never
.TypeVar: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_4 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.array_namespace: (*arrays: Obj) -> Never
.is_numpy: (xp: Obj) -> Bool
.xp_size: |Type_37510: Type, Type_18633 <: Structural({.shape = ?37510 and ?37535}), Type_37535: Type|(x: Type_18633) -> Never







.IntNumber: Never
.DecimalNumber: Never



.___v_desugar_7 = pyimport "__init__"

.Generator: Never
.Generator: ClassType


._lazywhere: (cond: Obj, arrays: Obj, f: () -> Never, fillvalue: Structural({.dtype = Ref(Obj)}) := {None} and Structural({.dtype = Ref(Obj)}), f2: () -> Never := {None} and () -> Never) -> Never
._lazyselect: (condlist: global::Iterable(Never), choicelist: global::Iterable(() -> Never), arrays: Obj, default: Obj := {0}) -> Never
._aligned_zeros: (shape: Obj, dtype: Obj := Obj, order: Obj := Obj, align: Structural({.__sub__ = (self: Never, Obj) -> {Type_v_global_50463: Obj | Type_v_global_50463 != 0}}) := {None} and Structural({.__sub__ = (self: Never, Obj) -> {Type_v_global_50463: Obj | Type_v_global_50463 != 0}})) -> Never
._prune_array: |Type_85431 <: Structural({.base = ?86348 and ?86356; .size = ?86352; .copy = (self: Obj) -> ?86368}), Type_86356: Type, Type_86368: Type, Type_86348: Type, Type_86352: Type, Type_85431 <: Structural({.base = ?86348 and ?86356; .size = ?86352; .copy = (self: Never) -> ?86368})|(array: Type_85431) -> Type_85431
.float_factorial: (n: Int) -> Float
.check_random_state: (seed: Obj) -> Never
._asarray_validated: (a: Obj, check_finite: Bool := Bool, sparse_ok: Bool := Bool, objects_ok: Bool := Bool, mask_ok: Bool := Bool, as_inexact: Bool := Bool) -> Never
._validate_int: |Type_85448 <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), R: Type|(k: Type_85448, name: Obj, minimum: R := {None} and R) -> Type_85448
.FullArgSpec: Never
.getfullargspec_no_self: (func: Obj) -> Never
.Type__FunctionWrapper: ClassType
.Type__FunctionWrapper.f: Never
.Type__FunctionWrapper.args: Never
.Type__FunctionWrapper.__call__: (self: scipy._lib._util.Type__FunctionWrapper, x: Obj) -> Never
.Type__FunctionWrapper.__call__: (self: scipy._lib._util.Type__FunctionWrapper, x: Obj) -> Never

.MapWrapper: ClassType
.MapWrapper.pool: Never
.MapWrapper._mapfunc: Never
.MapWrapper._own_pool: Never
.MapWrapper.__call__: (self: scipy._lib._util.MapWrapper, func: Obj, iterable: Obj) -> Never
.MapWrapper.__enter__: |Type_85481 <: scipy._lib._util.MapWrapper|(self: Type_85481) -> Type_85481
.MapWrapper.terminate: (self: scipy._lib._util.MapWrapper) -> NoneType
.MapWrapper.join: (self: scipy._lib._util.MapWrapper) -> NoneType or global::Bytes or Str
.MapWrapper.close: (self: scipy._lib._util.MapWrapper) -> NoneType
.MapWrapper.__exit__: (self: scipy._lib._util.MapWrapper, exc_type: Obj, exc_value: Obj, traceback: Obj) -> NoneType
.MapWrapper.__call__: (self: scipy._lib._util.MapWrapper, func: Obj, iterable: Obj) -> Never

.rng_integers: |R: Type, O: Type, Type_85539 <: Structural({.__add__ = (self: Never, ?R) -> ?O})|(gen: Obj, low: Type_85539, high: Obj := {None}, size: Obj := {None}, dtype: Obj := {"int64"}, endpoint: Bool := {False} and Bool) -> Never
._fixed_default_rng: (seed: Obj := Obj) -> Never
._rng_html_rewrite: |T: Type|(func: () -> global::Iterable(T)) -> (*args: Obj, **kwargs := ?87181) -> global::List!(Never, _: Nat)
._argmin: (a: Obj, keepdims: Structural({.__and__ = (self: Never, Obj) -> Bool}) := {False} and Structural({.__and__ = (self: Never, Obj) -> Bool}), axis: Obj := {None}) -> Never
._first_nonnan: (a: Obj, axis: Obj) -> Never
._nan_allsame: |E: Type, E <: Structural({.size = ?E; .ravel = (self: Obj) -> ?E; .shape = ?Self}), K: Type, Self <: global::Indexable(?K, ?V), V: Type|(a: E, axis: global::Slice, keepdims: Obj := {False}) -> Never
._contains_nan: |E :> {"raise"}|(a: Never, nan_policy: E := E, policies: Structural({.__contains__ = (self: Never, E) -> Bool}) := {None} and Structural({.__contains__ = (self: Never, E) -> Bool}), xp: Obj := {None}) -> global::Tuple([Bool, E])
._rename_parameter: |R: Type, Type_87824: Type|(old_name: R, new_name: R, dep_version: Never := Never) -> |Type_87824: Type|(fun: () -> Type_87824) -> (*args: Obj, **kwargs := ?87617) -> Never
._rng_spawn: |Type_85599 <: Structural({._bit_generator = ?87838}), Type_87838: Type|(rng: Type_85599, n_children: Obj) -> global::List!(Never, _: Nat)
._get_nan: (*data: Obj, xp: Never := Never) -> Never
.normalize_axis_index: |R: Type, Type_85609 <: Structural({.__lt__ = (self: Never, ?R) -> Bool and (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool}), R <: Nat|(axis: Type_85609, ndim: R) -> Type_85609
._call_callback_maybe_halt: |Type_85615: Type|(callback: (Type_85615) -> Never, res: Type_85615) -> Never
.Type__RichResult: ClassType
.Type__RichResult <: global::GenericDict
.Type__RichResult.__getattr__: (self: scipy._lib._util.Type__RichResult, name: global::Tuple([{Never}, {Never}])) -> Never
.Type__RichResult.__setattr__: Never
.Type__RichResult.__delattr__: Never
.Type__RichResult.__repr__: (self: Never) -> Never
.Type__RichResult.__dir__: (self: Never) -> global::List!(Never, _: Nat)

._indenter: (s: Str, n: Nat := Nat) -> Str
._float_formatter_10: (x: Obj) -> Never
._dict_formatter: |R :> {0}, R <: Nat, R :> {1}, R <: Nat|(d: Obj, n: R := R and R, mplus: R := R and R, sorter: Obj := Obj) -> Str
