##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/_lib/_array_api.py 1734628983 18632

.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.os = pyimport "<failure>"


.warnings = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.GeneticModule: Never
.___v_desugar_3 = pyimport "<failure>"

.Any: Never
.Literal: Never
.TYPE_CHECKING: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.npt = pyimport "__init__"


.array_api_compat = pyimport "__init__"


.np_compat = pyimport "__init__"

.___v_desugar_4 = pyimport "__init__"

.is_array_api_obj: (x: Obj) -> Bool
.size: |Type_37510: Type, Type_18633 <: Structural({.shape = ?37510 and ?37535}), Type_37535: Type|(x: Type_18633) -> Never
.device: (x: Obj) -> Never

.__all__: global::List!({"size", "_asarray", "device", "array_namespace"}, 4)
.SCIPY_ARRAY_API: Never
.SCIPY_DEVICE: Never
._GLOBAL_CONFIG: Never

.compliance_scipy: Never
._check_finite: (array: Obj, xp: Obj) -> NoneType
.array_namespace: (*arrays: Obj) -> Never
._asarray: (array: Obj, dtype: Obj := Obj, order: NoneType or {"K", "A", "C", "F"} := NoneType or {"K", "A", "C", "F"}, copy: NoneType or Bool := NoneType or Bool, xp: Obj := Obj, check_finite: Bool := Bool, subok: Bool := Bool) -> Never
.atleast_nd: (x: Obj, ndim: Int, xp: Obj := Obj) -> Never
.copy: (x: Obj, xp: Obj := Obj) -> Never
.is_numpy: (xp: Obj) -> Bool
.is_cupy: (xp: Obj) -> Bool
.is_torch: (xp: Obj) -> Bool
.is_jax: |Type_20401 <: Structural({.__name__ = ?T}), T: Type|(xp: Type_20401) -> Bool
._strict_check: |E: Type, Type_83828: Type, Type_83978 <: Structural({.shape = ?E and ?83862; .dtype = ?E and ?83828}), Type_83862: Type|(actual: Type_83978, desired: Obj, xp: Obj, check_namespace: Bool := Bool, check_dtype: Bool := Bool, check_shape: Bool := Bool) -> Never
._assert_matching_namespace: |E: Type, Type_83828: Type, Type_83978 <: Structural({.shape = ?E and ?83862; .dtype = ?E and ?83828}), Type_83862: Type|(actual: Type_83978, desired: Obj) -> NoneType
._check_scalar: |E: Type, Type_83828: Type, E :> global::Tuple([]), Type_83978 <: Structural({.shape = ?E and ?83862; .dtype = ?E and ?83828}), Type_83862: Type|(actual: Type_83978, desired: Structural({.shape = E; .__getitem__ = (self: Obj, Obj) -> Structural({.shape = E; .__getitem__ = (self: Obj, Obj) -> Never})}), xp: Obj) -> NoneType
.xp_assert_equal: |E: Type, Type_83828: Type, Type_83978 <: Structural({.shape = ?E and ?Type_83862; .dtype = ?E and ?Type_83828}), Type_83862: Type|(actual: Type_83978, desired: Obj, check_namespace: Bool := Bool, check_dtype: Bool := Bool, check_shape: Bool := Bool, err_msg: {Type_v_global_49047: NoneType or Str | (Type_v_global_49047 == None or Type_v_global_49047 == "")} := {Type_v_global_49047: NoneType or Str | (Type_v_global_49047 == None or Type_v_global_49047 == "")}, xp: Structural({.testing = Never}) := Structural({.testing = Never})) -> Never
.xp_assert_close: |E: Type, Type_83978 <: Structural({.shape = ?Type_83862 and ?E; .dtype = ?Type_83828 and ?E}), Type_83828: Type, Type_83862: Type|(actual: Type_83978, desired: Obj, rtol: Obj := Obj, atol: Obj := Obj, check_namespace: Bool := Bool, check_dtype: Bool := Bool, check_shape: Bool := Bool, err_msg: {Type_v_global_49102: NoneType or Str | (Type_v_global_49102 == "" or Type_v_global_49102 == None)} := {Type_v_global_49102: NoneType or Str | (Type_v_global_49102 == "" or Type_v_global_49102 == None)}, xp: Obj := Obj) -> Never
.xp_assert_less: |E: Type, Type_83862: Type, Type_84414: Type, Type_83978 <: Structural({.cpu = (self: Obj) -> ?Type_83978; .shape = ?Type_83862 and ?E; .dtype = ?Type_83828 and ?E; .device = ?84414}), Type_83828: Type, Type_83978 <: Structural({.shape = ?E and ?Type_83862; .dtype = ?E and ?Type_83828})|(actual: Type_83978, desired: Obj, check_namespace: Bool := {True} and Bool, check_dtype: Bool := {True} and Bool, check_shape: Bool := {True} and Bool, err_msg: Obj := {""}, verbose: Obj := {True}, xp: Structural({.testing = Never}) := {None} and Structural({.testing = Never})) -> Never
.cov: (x: Obj, xp: Obj := Obj) -> Never
.xp_unsupported_param_msg: (param: Obj) -> Str
.is_complex: (x: Obj, xp: Obj) -> Bool
.get_xp_devices: (xp: Obj) -> global::List!(_: Type, _: Nat)
.scipy_namespace_for: (xp: Obj) -> Never
.xp_minimum: (x1: Obj, x2: Obj) -> Never
.xp_clip: (x: Obj, min: Float or NoneType := Float or NoneType, max: Float or NoneType := Float or NoneType, xp: Obj := Obj) -> Never
.xp_moveaxis_to_end: (x: Obj, source: Int, xp: Obj := Obj) -> Never
.xp_copysign: (x1: Obj, x2: Obj, xp: Obj := Obj) -> Never
.xp_sign: (x: Obj, xp: Obj := Obj) -> Never
