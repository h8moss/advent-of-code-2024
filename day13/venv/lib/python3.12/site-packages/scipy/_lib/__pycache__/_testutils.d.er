##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/_lib/_testutils.py 1734628983 11193

.inspect = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.os = pyimport "<failure>"


.re = pyimport "<failure>"


.shutil = pyimport "<failure>"


.subprocess = pyimport "<failure>"


.sys = pyimport "<failure>"


.sysconfig = pyimport "<failure>"


.___v_desugar_1 = pyimport "<failure>"

.module_from_spec: Never
.spec_from_file_location: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.scipy = pyimport "__init__"


.cython = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.cython_version: Never
.cython: Never
._pep440 = pyimport "_pep440"

.required_version: {"3.0.8"}


.__all__: global::List!({"IS_MUSL", "check_free_memory", "PytestTester", "_TestPythranFunc"}, 4)
.IS_MUSL: {False}
._v: Never

.IS_EDITABLE: Never
.FPUModeChangeWarning: ClassType
.FPUModeChangeWarning <: global::RuntimeWarning

.PytestTester: ClassType
.PytestTester.module_name: Never
.PytestTester.__call__: |R :> {.Int(.verbose) in {Type_v_global_26584: Nat | ((Type_v_global_26584 >= 1) and (Type_v_global_26584 != 1) or Type_v_global_26584 == 1)}}, R :> {1}|(self: _testutils.PytestTester, label: Obj := Obj, verbose: Structural({.__and__ = (self: Never, R) -> Bool}) := Structural({.__and__ = (self: Never, R) -> Bool}), extra_argv: Obj := Obj, doctests: Bool := Bool, coverage: Bool := Bool, tests: global::Iterable(Never) := global::Iterable(Never), parallel: Structural({.__gt__ = (self: Never, R) -> Bool}) := Structural({.__gt__ = (self: Never, R) -> Bool})) -> {code in {0}}
.PytestTester.__call__: |R :> {.Int(.verbose) in {Type_v_global_26584: Nat | ((Type_v_global_26584 >= 1) and (Type_v_global_26584 != 1) or Type_v_global_26584 == 1)}}, R :> {1}|(self: _testutils.PytestTester, label: Obj := Obj, verbose: Structural({.__and__ = (self: Never, R) -> Bool}) := Structural({.__and__ = (self: Never, R) -> Bool}), extra_argv: Obj := Obj, doctests: Bool := Bool, coverage: Bool := Bool, tests: global::Iterable(Never) := global::Iterable(Never), parallel: Structural({.__gt__ = (self: Never, R) -> Bool}) := Structural({.__gt__ = (self: Never, R) -> Bool})) -> {code in {0}}

.Type__TestPythranFunc: ClassType
.Type__TestPythranFunc.__call__: () -> _testutils.Type__TestPythranFunc
.Type__TestPythranFunc.ALL_INTEGER: Never
.Type__TestPythranFunc.ALL_FLOAT: Never
.Type__TestPythranFunc.ALL_COMPLEX: Never
.Type__TestPythranFunc.setup_method: (self: _testutils.Type__TestPythranFunc) -> NoneType
.Type__TestPythranFunc.get_optional_args: (self: _testutils.Type__TestPythranFunc, func: Obj) -> global::Dict!({Never: Never})
.Type__TestPythranFunc.get_max_dtype_list_length: (self: _testutils.Type__TestPythranFunc) -> Nat
.Type__TestPythranFunc.get_dtype: |Type_30397 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?R) -> ?34056 and (self: Obj, ?R) -> ?34076}), R :> Int, R <: Structural({.__gt__ = (self: Never, ?R) -> Bool}), R: Type, Type_34076: Type, Type_34056: Type|(self: _testutils.Type__TestPythranFunc, dtype_list: Type_30397, dtype_idx: R) -> Never
.Type__TestPythranFunc.test_all_dtypes: (self: _testutils.Type__TestPythranFunc) -> NoneType
.Type__TestPythranFunc.test_views: (self: _testutils.Type__TestPythranFunc) -> Never
.Type__TestPythranFunc.test_strided: (self: _testutils.Type__TestPythranFunc) -> Never

._pytest_has_xdist: () -> {.find_spec("xdist") in {Type_v_global_28342: Obj | Type_v_global_28342 != None}}
.check_free_memory: |Type_30422 <: Structural({.__mul__ = (self: Never, ?R) -> ?R}), R: Type|(free_mb: Type_30422) -> NoneType
._parse_size: (size_str: Obj) -> Never
._get_mem_available: () -> Never
._test_cython_extension: |Type_30430 <: Structural({.__div__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O}), R: Type, O: Type|(tmp_path: Type_30430, srcdir: Obj) -> global::Tuple([Never, Never])
