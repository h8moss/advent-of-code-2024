##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/_lib/_pep440.py 1734628983 14005

.collections = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.itertools = pyimport "<failure>"


.re = pyimport "<failure>"


.__all__: global::List!({"parse", "VERSION_PATTERN", "Version", "LegacyVersion", "InvalidVersion"}, 5)
.Infinity: ClassType
.Infinity.__call__: () -> scipy._lib._pep440.Infinity
.Infinity.__repr__: (self: scipy._lib._pep440.Infinity) -> {"Infinity"}
.Infinity.__hash__: (self: scipy._lib._pep440.Infinity) -> Int
.Infinity.__lt__: (self: scipy._lib._pep440.Infinity, other: Obj) -> {False}
.Infinity.__le__: (self: scipy._lib._pep440.Infinity, other: Obj) -> {False}
.Infinity.__eq__: (self: scipy._lib._pep440.Infinity, other: Obj) -> Bool
.Infinity.__ne__: (self: scipy._lib._pep440.Infinity, other: Obj) -> Never
.Infinity.__gt__: (self: scipy._lib._pep440.Infinity, other: Obj) -> {True}
.Infinity.__ge__: (self: scipy._lib._pep440.Infinity, other: Obj) -> {True}
.Infinity.__neg__: (self: scipy._lib._pep440.Infinity) -> {scipy._lib._pep440.NegativeInfinity}

.Infinity: Never
.NegativeInfinity: ClassType
.NegativeInfinity.__call__: () -> scipy._lib._pep440.NegativeInfinity
.NegativeInfinity.__repr__: (self: scipy._lib._pep440.NegativeInfinity) -> {"-Infinity"}
.NegativeInfinity.__hash__: (self: scipy._lib._pep440.NegativeInfinity) -> Int
.NegativeInfinity.__lt__: (self: scipy._lib._pep440.NegativeInfinity, other: Obj) -> {True}
.NegativeInfinity.__le__: (self: scipy._lib._pep440.NegativeInfinity, other: Obj) -> {True}
.NegativeInfinity.__eq__: (self: scipy._lib._pep440.NegativeInfinity, other: Obj) -> Bool
.NegativeInfinity.__ne__: (self: scipy._lib._pep440.NegativeInfinity, other: Obj) -> Never
.NegativeInfinity.__gt__: (self: scipy._lib._pep440.NegativeInfinity, other: Obj) -> {False}
.NegativeInfinity.__ge__: (self: scipy._lib._pep440.NegativeInfinity, other: Obj) -> {False}
.NegativeInfinity.__neg__: (self: scipy._lib._pep440.NegativeInfinity) -> {scipy._lib._pep440.Infinity}


._Version: Never
.parse: (version: Obj) -> Never
.InvalidVersion: ClassType
.InvalidVersion <: global::ValueError

.Type__BaseVersion: ClassType
.Type__BaseVersion.__call__: () -> scipy._lib._pep440.Type__BaseVersion
.Type__BaseVersion.__hash__: (self: scipy._lib._pep440.Type__BaseVersion) -> Int
.Type__BaseVersion.__lt__: |R: Type, Type_20797 <: Structural({._key = ?R}), R <: Structural({.__lt__ = (self: Never, ?R) -> Bool})|(self: scipy._lib._pep440.Type__BaseVersion, other: Type_20797) -> Bool
.Type__BaseVersion.__le__: (self: scipy._lib._pep440.Type__BaseVersion, other: Obj) -> Never
.Type__BaseVersion.__eq__: (self: scipy._lib._pep440.Type__BaseVersion, other: Obj) -> Never
.Type__BaseVersion.__ge__: (self: scipy._lib._pep440.Type__BaseVersion, other: Obj) -> Never
.Type__BaseVersion.__gt__: (self: scipy._lib._pep440.Type__BaseVersion, other: Obj) -> Never
.Type__BaseVersion.__ne__: (self: scipy._lib._pep440.Type__BaseVersion, other: Obj) -> Never
.Type__BaseVersion._compare: |R <: Structural({.__lt__ = (self: Never, Obj) -> Bool}), R: Type, Type_20797 <: Structural({._key = ?R}), R <: Structural({.__lt__ = (self: Never, ?R) -> Bool})|(self: scipy._lib._pep440.Type__BaseVersion, other: Type_20797, method: |R <: Structural({.__lt__ = (self: Never, Obj) -> Bool})|(s: R, o: R) -> Bool) -> Bool

.LegacyVersion: ClassType
scipy = pyimport "scipy"
.LegacyVersion <: scipy._lib._pep440.Type__BaseVersion
.LegacyVersion._version: Never
.LegacyVersion._key: Never
.LegacyVersion.__call__: (version: Obj) -> scipy._lib._pep440.LegacyVersion
.LegacyVersion.__str__: (self: scipy._lib._pep440.LegacyVersion) -> Never
.LegacyVersion.__repr__: (self: scipy._lib._pep440.LegacyVersion) -> Str
.LegacyVersion.public: (self: scipy._lib._pep440.LegacyVersion) -> Never
.LegacyVersion.base_version: (self: scipy._lib._pep440.LegacyVersion) -> Never
.LegacyVersion.local: (self: scipy._lib._pep440.LegacyVersion) -> {None}
.LegacyVersion.is_prerelease: (self: scipy._lib._pep440.LegacyVersion) -> {False}
.LegacyVersion.is_postrelease: (self: scipy._lib._pep440.LegacyVersion) -> {False}

._legacy_version_component_re: Never
._legacy_version_replacement_map: global::Dict!({{"dev"}: {"@"}, {"-"}: {"final-"}, {"pre"}: {"c"}, {"preview"}: {"c"}, {"rc"}: {"c"}})
._parse_version_parts: (s: Obj) -> Never
._legacy_cmpkey: |Type_17424 <: Structural({.lower = (self: Obj) -> ?Type_17417}), Type_17417: Type|(version: Type_17424) -> global::Tuple([Int, global::Tuple([{"*final-"}])])
.VERSION_PATTERN: {"\n    v?\n    (?:\n        (?:(?P<epoch>[0-9]+)!)?                           # epoch\n        (?P<release>[0-9]+(?:\\.[0-9]+)*)                  # release segment\n        (?P<pre>                                          # pre-release\n            [-_\\.]?\n            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))\n            [-_\\.]?\n            (?P<pre_n>[0-9]+)?\n        )?\n        (?P<post>                                         # post release\n            (?:-(?P<post_n1>[0-9]+))\n            |\n            (?:\n                [-_\\.]?\n                (?P<post_l>post|rev|r)\n                [-_\\.]?\n                (?P<post_n2>[0-9]+)?\n            )\n        )?\n        (?P<dev>                                          # dev release\n            [-_\\.]?\n            (?P<dev_l>dev)\n            [-_\\.]?\n            (?P<dev_n>[0-9]+)?\n        )?\n    )\n    (?:\\+(?P<local>[a-z0-9]+(?:[-_\\.][a-z0-9]+)*))?       # local version\n"}
.Version: ClassType
.Version <: scipy._lib._pep440.Type__BaseVersion
.Version._version: Never
.Version._key: Never
.Version.__call__: (version: Obj) -> scipy._lib._pep440.Version
.Version._regex: Never
.Version.__repr__: (self: scipy._lib._pep440.Version) -> Str
.Version.__str__: (self: scipy._lib._pep440.Version) -> Str
.Version.public: (self: scipy._lib._pep440.Version) -> Str
.Version.base_version: (self: scipy._lib._pep440.Version) -> Str
.Version.local: (self: scipy._lib._pep440.Version) -> NoneType
.Version.is_prerelease: (self: scipy._lib._pep440.Version) -> Bool
.Version.is_postrelease: (self: scipy._lib._pep440.Version) -> Bool

._parse_letter_version: (letter: Never, number: Obj) -> NoneType
._local_version_seperators: Never
._parse_local_version: (local: Obj) -> NoneType
._cmpkey: |T: Type, Type_17537: Type, Type_17552 :> global::Tuple([?T]), Type_17550 :> {scipy._lib._pep440.Infinity}, Type_17543 :> {scipy._lib._pep440.Infinity}, Type_17545: Type|(epoch: Type_17537, release: global::Sequence(T), pre: Type_17543, post: Type_17545, dev: Type_17550, local: Type_17552) -> global::Tuple([Type_17537, global::Tuple([T]), Type_17543, Type_17545, Type_17550, Type_17552])
