##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/_lib/_uarray/_backend.py 1734628983 20432
.typing = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.types = pyimport "<failure>"


.inspect = pyimport "<failure>"


.functools = pyimport "<failure>"


.___v_desugar_1 = pyimport "__init__"
.__init__ = pyimport "__init__"
._uarray: Never
.copyreg = pyimport "<failure>"


.pickle = pyimport "<failure>"


.contextlib = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.BackendNotImplementedError: Never
._Function: Never
._SkipBackendContext: Never
._SetBackendContext: Never
._BackendState: Never
.__all__: global::List!({"skip_backend", "determine_backend", "_Function", "create_multimethod", "BackendNotImplementedError", "wrap_single_convertor_instance", "set_global_backend", "wrap_single_convertor", "get_state", "reset_state", "set_state", "_SetBackendContext", "determine_backend_multi", "generate_multimethod", "_SkipBackendContext", "register_backend", "all_of_type", "clear_backends", "mark_as", "Dispatchable", "_BackendState", "set_backend"}, 22)
.ArgumentExtractorType: Never
.ArgumentReplacerType: Never
.unpickle_function: (mod_name: Obj, qname: Str, self_: Obj) -> Never
.pickle_function: (func: Obj) -> global::Tuple([(mod_name: Obj, qname: Str, self_: Obj) -> Never, global::Tuple([{None}, {None}, {None}])])
.pickle_state: (state: Obj) -> global::Tuple([Never, Never])
.pickle_set_backend_context: (ctx: Obj) -> global::Tuple([Never, Never])
.pickle_skip_backend_context: (ctx: Obj) -> global::Tuple([Never, Never])




.get_state: () -> Never
.reset_state: () -> NoneType
.set_state: (state: Obj) -> Structural(global::ContextManager)
.create_multimethod: (*args: Obj, **kwargs := ?114990) -> (a: Obj) -> Never
.generate_multimethod: (argument_extractor: Obj, argument_replacer: Obj, domain: Str, default: Obj := Obj) -> Never
.set_backend: |K: Type, Type_115028: Type, V: Type, Type_116157: Type, Type_115018 <: Structural({.__ua_cache__ = ?Self and ?116157}), Type_115023: Type, Self <: global::Indexable(?K, ?V)|(backend: Type_115018, coerce: Type_115023 := Type_115023, only: Type_115028 := Type_115028) -> Never
.skip_backend: |K: Type, Type_115034 <: Structural({.__ua_cache__ = ?Self and ?116287}), Self <: global::Indexable(?K, ?V), V: Type, Type_116287: Type|(backend: Type_115034) -> Never
.get_defaults: (f: Obj) -> global::Tuple([global::Dict!({Never: Never}), global::Tuple([Never]), Never])
.set_global_backend: (backend: Obj, coerce: Obj := Obj, only: Obj := Obj, try_last: Obj := Obj) -> Never
.register_backend: (backend: Obj) -> Never
.clear_backends: (domain: Obj, registered: Obj := Obj, globals: Obj := Obj) -> Never
.Dispatchable: ClassType
.Dispatchable.value: Never
.Dispatchable.coercible: Never
.Dispatchable.type: Never
.Dispatchable.__call__: (value: Obj, dispatch_type: Obj, coercible: Obj := Obj) -> _backend.Dispatchable
.Dispatchable.__getitem__: (self: _backend.Dispatchable, index: Never) -> global::Tuple([Never, Never])
.Dispatchable.__str__: (self: _backend.Dispatchable) -> Str
.Dispatchable.__repr__: (self: _backend.Dispatchable) -> Str

.mark_as: (dispatch_type: Obj) -> Never
.all_of_type: (arg_type: Obj) -> (func: () -> Never) -> (*args: Obj, **kwargs := ?116912) -> global::Tuple([Never])
.wrap_single_convertor: |T <: Structural({.value = ?117012; .coercible = ?R; .type = ?117020}), T: Type, O: Type, Type_116979 <: Structural({.__and__ = (self: Never, ?R) -> ?O}), Type_117020: Type, R: Type, Type_117012: Type|(convert_single: (Type_117012, Type_117020, O) -> T) -> |O: Type, T <: Structural({.value = ?117012; .coercible = ?R; .type = ?117020}), Type_116979 <: Structural({.__and__ = (self: Never, ?R) -> ?O}), T: Type, R: Type, Type_117020: Type, Type_117012: Type|(dispatchables: global::Iterable(T), coerce: Type_116979) -> global::List!(T, 1)
.wrap_single_convertor_instance: |T <: Structural({.value = ?117151; .coercible = ?R; .type = ?117154}), T: Type, O: Type, Type_117154: Type, Type_117102: Type, Type_117108 <: Structural({.__and__ = (self: Never, ?R) -> ?O}), R: Type, Type_117151: Type|(convert_single: (Type_117102, Type_117151, Type_117154, O) -> T) -> |Type_117151: Type, T <: Structural({.value = ?117151; .coercible = ?R; .type = ?117154}), Type_117108 <: Structural({.__and__ = (self: Never, ?R) -> ?O}), T: Type, R: Type, O: Type, Type_117154: Type|(self: Obj, dispatchables: global::Iterable(T), coerce: Type_117108) -> global::List!(T, 1)
.determine_backend: (value: Obj, dispatch_type: Obj, domain: Obj, only: Obj := Obj, coerce: Obj := Obj) -> Never
.determine_backend_multi: (dispatchables: global::Iterable(Never), domain: Obj, only: Obj := Obj, coerce: Obj := Obj, **kwargs := ?115253) -> Never
