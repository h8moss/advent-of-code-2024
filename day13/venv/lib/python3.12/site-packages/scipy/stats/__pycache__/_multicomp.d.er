##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/stats/_multicomp.py 1734628983 17282
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.warnings = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.dataclass: Never
.field: Never
.___v_desugar_3 = pyimport "<failure>"

.TYPE_CHECKING: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.stats = pyimport "__init__"


.___v_desugar_4 = pyimport "__init__"

.minimize_scalar: |Type_261916: Type, Type_258898: Type|(fun: Type_258898, bracket: Obj := Obj, bounds: Obj := Obj, args: Obj := Obj, method: (Type_258898) -> Type_261916 := {None} and (Type_258898) -> Type_261916, tol: Obj := {None}, options: global::Dict({global::Tuple([Obj, Never]): Never}) := {None} and global::Dict({global::Tuple([Obj, Never]): Never})) -> Type_261916
.___v_desugar_5 = pyimport "_common"
._common = pyimport "_common"
.ConfidenceInterval: Never
.___v_desugar_6 = pyimport "_qmc"
._qmc = pyimport "_qmc"
.check_random_state: (seed: Obj := Obj) -> Never
.___v_desugar_7 = pyimport "_stats_py"
._stats_py = pyimport "_stats_py"
._var: (x: Never, axis: Obj := Obj, ddof: Obj := Obj, mean: Obj := Obj, xp: Never := Never) -> Never

.__all__: global::List!({"dunnett"}, 1)
.DunnettResult: ClassType
.DunnettResult.pvalue: Never
.DunnettResult.statistic: Never
.DunnettResult.__call__: () -> _multicomp.DunnettResult
.DunnettResult._alternative: {"greater", "two-sided", "less"}
.DunnettResult._rho: Never
.DunnettResult._df: Int
.DunnettResult._std: Float
.DunnettResult._mean_samples: Never
.DunnettResult._mean_control: Never
.DunnettResult._n_samples: Never
.DunnettResult._n_control: Int
.DunnettResult._rng: Never
.DunnettResult._ci: Never
.DunnettResult._ci_cl: Never
.DunnettResult.__str__: (self: _multicomp.DunnettResult) -> Str
.DunnettResult._allowance: (self: _multicomp.DunnettResult, confidence_level: Obj := Obj, tol: Obj := Obj) -> Float
.DunnettResult.confidence_interval: (self: _multicomp.DunnettResult, confidence_level: Obj := Obj) -> Never

.dunnett: (control: Obj, *samples: Obj, alternative: {"greater", "two-sided", "less"} := {"greater", "two-sided", "less"}, random_state: Obj := Obj) -> _multicomp.DunnettResult
._iv_dunnett: Never
._params_dunnett: Never
._statistic_dunnett: Never
._pvalue_dunnett: (rho: Obj, df: Int, statistic: Obj, alternative: {"less", "two-sided", "greater"}, rng: Obj := Obj) -> Never
