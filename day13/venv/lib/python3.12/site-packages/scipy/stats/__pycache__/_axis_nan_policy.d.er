##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/stats/_axis_nan_policy.py 1734628983 31074
.warnings = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_1 = pyimport "<failure>"

.wraps: Never
.___v_desugar_2 = pyimport "_docscrape"
._docscrape = pyimport "_docscrape"
.FunctionDoc: {scipy._lib._docscrape.FunctionDoc}
.Parameter: Never
.___v_desugar_3 = pyimport "_util"
._util = pyimport "_util"
._contains_nan: |E :> {"raise"}|(a: Never, nan_policy: E := E, policies: Structural({.__contains__ = (self: Never, E) -> Bool}) := {None} and Structural({.__contains__ = (self: Never, E) -> Bool}), xp: Obj := {None}) -> global::Tuple([Bool, E])
.AxisError: Never
._get_nan: (*data: Obj, xp: Never := Never) -> Never
.___v_desugar_4 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.array_namespace: (*arrays: Obj) -> Never
.is_numpy: (xp: Obj) -> Bool
.inspect = pyimport "<failure>"


.too_small_1d_not_omit: {"One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements."}
.too_small_1d_omit: {"After omitting NaNs, one or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements."}
.too_small_nd_not_omit: {"All axis-slices of one or more sample arguments are too small; all elements of returned arrays will be NaN. See documentation for sample size requirements."}
.too_small_nd_omit: {"After omitting NaNs, one or more axis-slices of one or more sample arguments is too small; corresponding elements of returned arrays will be NaN. See documentation for sample size requirements."}
.SmallSampleWarning: ClassType
.SmallSampleWarning <: global::RuntimeWarning

._broadcast_arrays: (arrays: Never, axis: Obj := Obj, xp: Never := Never) -> Never
._broadcast_shapes: (shapes: global::List!(Never, _: Nat), axis: Obj := Obj) -> Never
._broadcast_array_shapes_remove_axis: |T: Type, T <: Structural({.shape = ?U}), U: Type|(arrays: global::Iterable(T), axis: Obj := Obj) -> global::Tuple([T])
._broadcast_shapes_remove_axis: (shapes: global::List!(Never, _: Nat), axis: Obj := Obj) -> global::Tuple([Never])
._broadcast_concatenate: (arrays: Never, axis: Obj, paired: Bool := Bool) -> Never
._remove_nans: |T: Type|(samples: global::Iterable(global::Indexable(Obj, T)) and global::Indexable(Obj, global::Iterable(T)), paired: Bool) -> global::List!(T, _: Nat)
._remove_sentinel: |K: Type, T: Type, K :> {0}, E <: global::Iterable(?T) and global::Indexable(?K, ?V), V: Type|(samples: global::Indexable(K, E) and global::Iterable(E), paired: Bool, sentinel: E) -> global::List!(T, _: Nat)
._masked_arrays_2_sentinel_arrays: (samples: Never) -> global::Tuple([global::List!(Structural({.__setitem__ = (self: Never, Obj, Obj) -> Never; .shape = Never; .data = Never}), 1), Never])
._check_empty_inputs: (samples: global::Iterable(Structural({.shape = Never})), axis: Obj) -> Never
._add_reduced_axes: |U <: global::Iterable(?T), T: Type, T :> ?T, T :> global::List!(?T, _: Nat)|(res: U, reduced_axes: Obj, keepdims: Bool) -> U or T
._name: {"axis"}
._desc: global::List!(Str, _: Nat)
._get_axis_params: (default_axis: Obj := Obj, _name: Obj := Obj, _desc: Obj := Obj) -> global::Tuple([Never, Never])
._name: {"nan_policy"}
._type: {"{\'propagate\', \'omit\', \'raise\'}"}
._desc: global::List!(Str, _: Nat)
._nan_policy_parameter_doc: Never
._nan_policy_parameter: Never
._name: {"keepdims"}
._type: {"bool, default: False"}
._desc: global::List!(Str, _: Nat)
._keepdims_parameter_doc: Never
._keepdims_parameter: Never
._standard_note_addition: global::List!(Str, _: Nat)
._axis_nan_policy_factory: |Type_163001: Type, T: Type, V: Type, Type_163002: Type, Type_166046: Type, R :> global::Dict!({?163001: ?163002}), R <: Bool, R: Type, U :> global::List!(?T, _: Nat)|(tuple_to_result: () -> Type_166046, default_axis: Obj := {0}, n_samples: (global::Dict({Str: V})) -> Never := {1} and (global::Dict({Str: V})) -> Never, paired: Bool := {False} and Bool, result_to_tuple: (Never) -> Never := {None} and (Never) -> Never, too_small: R := {0} and R, n_outputs: (global::Dict({Str: V})) -> Never := {2} and (global::Dict({Str: V})) -> Never, kwd_samples: global::Iterable(T) := global::List!(Never, 0) and global::Iterable(T), override: Structural({.__or__ = (self: Never, R) -> U; .update = (self: Obj, U) -> Never; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> R}) := {None} and Structural({.__or__ = (self: Never, R) -> U; .update = (self: Obj, U) -> Never; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> R})) -> (hypotest_fun_in: () -> Never) -> ||(*args: Obj, _no_deco: Bool := Obj, **kwds := ?V) -> Never
