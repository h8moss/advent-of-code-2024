##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/stats/_stats_py.py 1734628983 420397

.warnings = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.math = pyimport "<failure>"


.___v_desugar_1 = pyimport "<failure>"

.gcd: Never
.___v_desugar_2 = pyimport "<failure>"

.namedtuple: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.ma = pyimport "__init__"

.___v_desugar_3 = pyimport "__init__"

.array: Never
.asarray: Never

.sparse = pyimport "__init__"


.___v_desugar_4 = pyimport "__init__"

.distance_matrix: (x: Obj, y: Obj, p: Float := Float, threshold: Obj := Obj) -> Never
.___v_desugar_5 = pyimport "__init__"

.milp: Never
.LinearConstraint: {_constraints.LinearConstraint}
.___v_desugar_6 = pyimport "_util"
._util = pyimport "_util"
.check_random_state: (seed: Obj) -> Never
._get_nan: (*data: Obj, xp: Never := Never) -> Never
._rename_parameter: |R: Type|(old_name: R, new_name: R, dep_version: Never := Never) -> (fun: () -> Never) -> (*args: Obj, **kwargs := ?87617) -> Never
._contains_nan: |E :> {"raise"}|(a: Never, nan_policy: E := E, policies: Structural({.__contains__ = (self: Never, E) -> Bool}) := {None} and Structural({.__contains__ = (self: Never, E) -> Bool}), xp: Obj := {None}) -> global::Tuple([Bool, E])
.AxisError: Never
.special = pyimport "__init__"


.linalg = pyimport "__init__"


.___v_desugar_7 = pyimport "__init__"

.distributions: Never
.___v_desugar_8 = pyimport "__init__"

.mstats_basic: Never
.___v_desugar_9 = pyimport "_stats_mstats_common"
._stats_mstats_common = pyimport "_stats_mstats_common"
._find_repeats: |Type_278744: Type, Type_278745: Type, Type_278895 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?278744) -> ?278745})|(arr: Type_278895) -> global::Tuple([Never, Never])
.theilslopes: (y: Obj, x: Never := Never, alpha: Structural({.__div__ = (self: Never, Obj) -> Never; .__gt__ = (self: Never, Obj) -> Bool}) := {0.95} and Structural({.__div__ = (self: Never, Obj) -> Never; .__gt__ = (self: Never, Obj) -> Bool}), method: {"joint"} := {"separate"} and {"joint"}) -> Never
.siegelslopes: (y: Obj, x: Structural({.__len__ = (self: Never) -> Nat; .astype = (self: Obj, Obj) -> Structural({.__len__ = (self: Never) -> Nat; .astype = (self: Obj, Obj) -> Never})}) := {None} and Structural({.__len__ = (self: Never) -> Nat; .astype = (self: Obj, Obj) -> Structural({.__len__ = (self: Never) -> Nat; .astype = (self: Obj, Obj) -> Never})}), method: Obj := {"hierarchical"}) -> Never
.___v_desugar_10 = pyimport "<failure>"

._kendall_dis: Never
._toint64: Never
._weightedrankedtau: Never
.___v_desugar_11 = pyimport "<failure>"

.dataclass: Never
.field: Never
.___v_desugar_12 = pyimport "_hypotests"
._hypotests = pyimport "_hypotests"
._all_partitions: |Type_279103 <: Structural({.__add__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O}), R: Type, O: Type|(nx: Type_279103, ny: R) -> NoneType
.___v_desugar_13 = pyimport "<failure>"

._compute_outer_prob_inside_method: Never
.___v_desugar_14 = pyimport "_resampling"
._resampling = pyimport "_resampling"
.MonteCarloMethod: {_resampling.MonteCarloMethod}
.PermutationMethod: {_resampling.PermutationMethod}
.BootstrapMethod: {_resampling.BootstrapMethod}
.monte_carlo_test: |E :> Int or {_: ?E and NoneType | _ == None}, E :> Int|(data: global::Tuple([Never]), rvs: global::Tuple([Never]), statistic: (*data: Never, axis: Never := {0}) -> Never, vectorized: Never := Never, n_resamples: E := {9999} and E, batch: E := {None} and E, alternative: Never := Never, axis: E := {0} and E) -> Never
.permutation_test: |T: Type, T <: Bool, Type_157404 :> global::List!(?T, 1), Type_157404 <: Structural({.__len__ = (self: Never) -> Nat})|(data: Type_157404, statistic: (*data: Never, axis: Never := {0}) -> Never, permutation_type: {"independent"} := {"independent"} and {"independent"}, vectorized: T := {None} and T, n_resamples: {"independent"} := {9999} and {"independent"}, batch: {"independent"} := {None} and {"independent"}, alternative: T := {"two-sided"} and T, axis: Never := Never, random_state: Obj := {None}) -> Never
.bootstrap: |Type_156151 :> global::List!(Never, _: Nat), Type_156151 <: Structural({.__len__ = (self: Never) -> Nat})|(data: Type_156151, statistic: (*data: Never, axis: Int := {0}) -> Never, n_resamples: Int or {None} := {9999} and Int or {None}, batch: Int or {None} := {None} and Int or {None}, vectorized: Never := Never, paired: Never := Never, axis: Int := {0} and Int, confidence_level: Float := {0.95} and Float, alternative: Never := Never, method: Never := Never, bootstrap_result: Never := Never, random_state: Obj := {None}) -> Never
._batch_generator: |Type_157071 <: Structural({.__le__ = (self: Never, ?R) -> Bool}), R: Type|(iterable: global::Iterable(Never), batch: Type_157071) -> NoneType
.___v_desugar_15 = pyimport "_axis_nan_policy"
._axis_nan_policy = pyimport "_axis_nan_policy"
._axis_nan_policy_factory: |Type_163001: Type, T: Type, V: Type, Type_163002: Type, R :> global::Dict!({?163001: ?163002}), R <: Bool, R: Type|(tuple_to_result: () -> Never, default_axis: Obj := {0}, n_samples: (global::Dict({Str: V})) -> Never := {1} and (global::Dict({Str: V})) -> Never, paired: Bool := {False} and Bool, result_to_tuple: (Never) -> Never := {None} and (Never) -> Never, too_small: R := {0} and R, n_outputs: (global::Dict({Str: V})) -> Never := {2} and (global::Dict({Str: V})) -> Never, kwd_samples: global::Iterable(T) := global::List!(Never, 0) and global::Iterable(T), override: Structural({.__or__ = (self: Never, R) -> global::List!(Never, _: Nat); .update = (self: Obj, Obj) -> Never; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> R}) := {None} and Structural({.__or__ = (self: Never, R) -> global::List!(Never, _: Nat); .update = (self: Obj, Obj) -> Never; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> R})) -> (hypotest_fun_in: () -> Never) -> (*args: Obj, _no_deco: Bool := Obj, **kwds := ?V) -> Never
._broadcast_concatenate: (arrays: Never, axis: Obj, paired: Bool := Bool) -> Never
._broadcast_shapes: (shapes: global::List!(Never, _: Nat), axis: Obj := Obj) -> Never
.SmallSampleWarning: {_axis_nan_policy.SmallSampleWarning}
.___v_desugar_16 = pyimport "_binomtest"
._binomtest = pyimport "_binomtest"
._binary_search: (a: (x1: Obj) -> Obj, d: Obj, lo: {0}, hi: Obj) -> Never
.___v_desugar_17 = pyimport "_bunch"
._bunch = pyimport "_bunch"
._make_tuple_bunch: |T <: Str, T: Type, Type_3067 :> global::Tuple([?T]), Type_3067 <: Structural({.__len__ = (self: Never) -> Nat})|(typename: Obj, field_names: Type_3067, extra_field_names: global::List(T, _: Nat) := {None} and global::List(T, _: Nat), module: Obj := {None}) -> ClassType
.stats = pyimport "__init__"


.___v_desugar_18 = pyimport "__init__"

.root_scalar: (f: Never, args: Obj := Obj, method: Never := Never, bracket: Never := Never, fprime: |E: Type|(self: (E) -> Never, x: E, *args: Obj) -> Never := |E: Type|(self: (E) -> Never, x: E, *args: Obj) -> Never, fprime2: |E: Type|(self: (E) -> Never, x: E, *args: Obj) -> Never := |E: Type|(self: (E) -> Never, x: E, *args: Obj) -> Never, x0: Obj := Obj, x1: Obj := Obj, xtol: Obj := Obj, rtol: Obj := Obj, maxiter: Obj := Obj, options: Never := Never) -> Never
.___v_desugar_19 = pyimport "_util"

.normalize_axis_index: |R: Type, Type_85609 <: Structural({.__lt__ = (self: Never, ?R) -> Bool and (self: Never, ?R) -> Bool; .__ge__ = (self: Never, ?R) -> Bool}), R <: Nat|(axis: Type_85609, ndim: R) -> Type_85609
.___v_desugar_20 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.array_namespace: (*arrays: Obj) -> Never
.is_numpy: (xp: Obj) -> Bool
.atleast_nd: (x: Obj, ndim: Int, xp: Obj := Obj) -> Never
.xp_clip: (x: Obj, min: Float or NoneType := Float or NoneType, max: Float or NoneType := Float or NoneType, xp: Obj := Obj) -> Never
.xp_moveaxis_to_end: (x: Obj, source: Int, xp: Obj := Obj) -> Never
.xp_sign: (x: Obj, xp: Obj := Obj) -> Never
.xp_minimum: (x1: Obj, x2: Obj) -> Never
.___v_desugar_21 = pyimport "__init__"

.xp_size: |Type_37510: Type, Type_18633 <: Structural({.shape = ?37510 and ?37535}), Type_37535: Type|(x: Type_18633) -> Never
.__all__: global::List!({"tmin", "mode", "describe", "jarque_bera", "zmap", "chisquare", "ttest_ind_from_stats", "tvar", "friedmanchisquare", "relfreq", "ttest_1samp", "zscore", "kendalltau", "gmean", "power_divergence", "ks_2samp", "expectile", "kurtosis", "pmean", "trim1", "hmean", "median_abs_deviation", "wasserstein_distance_nd", "trimboth", "fisher_exact", "wasserstein_distance", "sem", "kruskal", "moment", "ks_1samp", "skew", "linregress", "trim_mean", "tsem", "f_oneway", "ranksums", "obrientransform", "percentileofscore", "find_repeats", "ttest_ind", "rankdata", "sigmaclip", "theilslopes", "alexandergovern", "weightedtau", "tmean", "spearmanr", "ttest_rel", "pearsonr", "combine_pvalues", "tstd", "kurtosistest", "quantile_test", "scoreatpercentile", "kstest", "gstd", "energy_distance", "iqr", "skewtest", "tiecorrect", "normaltest", "cumfreq", "gzscore", "tmax", "siegelslopes", "pointbiserialr", "brunnermunzel"}, 67)
._chk_asarray: |E: Type, Type_277797 <: Structural({.ndim = ?E}), Type_277798: Type|(a: Type_277797, axis: Type_277798, xp: Obj := Obj) -> global::Tuple([Type_277797, {0} or Type_277798])
._chk2_asarray: |Type_277802 <: Structural({.ndim = ?E}), E: Type, Type_277803 <: Structural({.ndim = ?E}), Type_277804: Type|(a: Type_277802, b: Type_277803, axis: Type_277804) -> global::Tuple([Type_277802, Type_277803, Type_277804 or {0}])
.SignificanceResult: Never
.gmean: (a: Obj, axis: Obj := Obj, dtype: Obj := Obj, weights: Obj := Obj) -> Never
.hmean: |R: Type, Type_277815 <: Structural({.__ge__ = (self: Never, ?R) -> Bool})|(a: Type_277815, axis: Obj := {0}, dtype: Bool := {None} and Bool, weights: Obj := {None}) -> NoneType
.pmean: |R :> {0}, R <: Nat, R: Type, Type_277807 <: Structural({.__ge__ = (self: Never, ?R) -> Bool})|(a: Type_277807, p: R, axis: Obj := {0}, dtype: Bool := {None} and Bool, weights: Obj := {None}) -> NoneType
.ModeResult: Never
._mode_result: (mode: Obj, count: Never) -> Never
.mode: |Type_277836 <: Structural({.size = ?E; .dtype = ?356409}), E: Type, Type_356409: Type|(a: Type_277836, axis: Obj := Obj, nan_policy: Obj := Obj, keepdims: Obj := Obj) -> Never
._put_nan_to_limits: |Self <: global::Indexable(?K, ?V), Type_356527: Type, Type_356533: Type, Self <: global::Indexable(?K, ?V), Type_356534: Type, K: Type, T: Type, Type_277844 <: Structural({.__ge__ = (self: Never, ?R) -> Bool; .__gt__ = (self: Never, ?R) -> Bool; .dtype = ?356527; .__setitem__ = (self: Obj, ?356533, ?356534) -> ?T; .astype = (self: Obj, ?356529) -> Never; .copy = (self: Obj) -> Never; .__le__ = (self: Never, ?R) -> Bool; .__lt__ = (self: Never, ?R) -> Bool}), V: Type, Type_277844 <: Structural({.__ge__ = (self: Never, ?R) -> Bool; .__gt__ = (self: Never, ?R) -> Bool; .dtype = ?356527; .__setitem__ = (self: Never, ?356533, ?356534) -> ?T; .astype = (self: Never, ?356529) -> Never; .copy = (self: Never) -> Never; .__le__ = (self: Never, ?R) -> Bool; .__lt__ = (self: Never, ?R) -> Bool}), R: Type, Type_356529: Type|(a: Type_277844, limits: Self, inclusive: Self) -> Type_277844
.tmean: |Self <: global::Indexable(?K, ?V), V: Type, K :> {0, 1}|(a: Never, limits: Self := Self, inclusive: Self := Self, axis: Obj := Obj) -> Never
.tvar: |Self <: global::Indexable(?K, ?V), V: Type, K :> {0, 1}|(a: Never, limits: Self := Self, inclusive: Self := Self, axis: Obj := Obj, ddof: Obj := Obj) -> Never
.tmin: |Type_277872: Type|(a: Never, lowerlimit: Type_277872 := Type_277872, axis: Obj := Obj, inclusive: Type_277872 := Type_277872, nan_policy: Obj := Obj) -> Never
.tmax: |Type_277882: Type|(a: Never, upperlimit: Type_277882 := Type_277882, axis: Obj := Obj, inclusive: Type_277882 := Type_277882, nan_policy: Obj := Obj) -> Never
.tstd: |K :> {0, 1}, V: Type, Self <: global::Indexable(?K, ?V)|(a: Never, limits: Self := Self, inclusive: Self := Self, axis: Obj := Obj, ddof: Obj := Obj) -> Never
.tsem: |Self <: global::Indexable(?K, ?V), V: Type, K :> {0, 1}|(a: Never, limits: Self := Self, inclusive: Self := Self, axis: Obj := Obj, ddof: Obj := Obj) -> Never
._moment_outputs: (kwds: global::GenericDict or global::List(Never, _: Nat)) -> Nat
._moment_result_object: (*args: Obj) -> Never
.moment: |U: Type, T: Type|(a: Never, order: Obj := Obj, axis: {0} := {0}, nan_policy: Obj := Obj, center: Obj := Obj) -> U or T
._moment: |K :> global::Tuple([Never, {Ellipsis}]), T: Type|(a: Never, order: {Type_v_global_189397: Nat | ((Type_v_global_189397 >= 1) and (Type_v_global_189397 != 1) or Type_v_global_189397 == 1)}, axis: Obj, mean: Obj := Obj, xp: {None} := {None} and {None}) -> global::Indexable(K, T)
._var: (x: Never, axis: Obj := Obj, ddof: Obj := Obj, mean: Obj := Obj, xp: Never := Never) -> Never
.skew: (a: Never, axis: {0} := {0}, bias: Bool := Bool, nan_policy: Obj := Obj) -> Never
.kurtosis: (a: Never, axis: {0} := {0}, fisher: Bool := Bool, bias: Bool := Bool, nan_policy: Obj := Obj) -> global::Indexable(Obj, Never)
.DescribeResult: Never
.describe: (a: Never, axis: {0} := {0}, ddof: Obj := Obj, bias: Bool := Bool, nan_policy: {"raise"} := {"raise"}) -> Never
._get_pvalue: |Type_277970 :> {True, False}, Type_277970 <: Bool|(statistic: Obj, distribution: Obj, alternative: Obj, symmetric: Type_277970 := Type_277970 and Type_277970, xp: global::PyModule("__init__.py") := global::PyModule("__init__.py")) -> Never
.SkewtestResult: Never
.skewtest: (a: Never, axis: {0} := {0}, nan_policy: Obj := Obj, alternative: Obj := Obj) -> Never
.KurtosistestResult: Never
.kurtosistest: (a: Never, axis: {0} := {0}, nan_policy: Obj := Obj, alternative: Obj := Obj) -> Never
.NormaltestResult: Never
.normaltest: (a: Never, axis: {0} := {0}, nan_policy: Obj := Obj) -> Never
.jarque_bera: (x: Obj, axis: {0} := {0}) -> Never
.scoreatpercentile: (a: Obj, per: Obj, limit: Never := Never, interpolation_method: Obj := Obj, axis: Obj := Obj) -> Never
._compute_qth_percentile: |Self <: global::Indexable(?K, ?V), K: Type, Type_278013 <: Structural({.shape = ?Self; .ndim = ?R and ?R; .__getitem__ = (self: Obj, ?358879) -> ?358880}), Type_358879: Type, V: Type, Type_358880: Type, R: Type|(sorted_: Type_278013, per: Obj, interpolation_method: {"lower"}, axis: K) -> Never
.percentileofscore: (a: Obj, score: Obj, kind: {"rank"} := {"rank"}, nan_policy: {"raise"} := {"raise"}) -> Never
.HistogramResult: Never
._histogram: |R <: Float, R :> {1.0}, R <: Bool|(a: Obj, numbins: Structural({.__sub__ = (self: Never, R) -> R}) := {10} and Structural({.__sub__ = (self: Never, R) -> R}), defaultlimits: global::Indexable(Obj, Structural({.__gt__ = (self: Never, Structural({.__gt__ = (self: Never, Never) -> Bool})) -> Bool})) := {None} and global::Indexable(Obj, Structural({.__gt__ = (self: Never, Structural({.__gt__ = (self: Never, Never) -> Bool})) -> Bool})), weights: Obj := {None}, printextras: R := {False} and R) -> Never
.CumfreqResult: Never
.cumfreq: (a: Obj, numbins: Structural({.__sub__ = (self: Never, Obj) -> {1.0} and (self: Never, Obj) -> {False, 1.0}}) := {10} and Structural({.__sub__ = (self: Never, Obj) -> {1.0} and (self: Never, Obj) -> {False, 1.0}}), defaultreallimits: Never := Never, weights: Obj := {None}) -> Never
.RelfreqResult: Never
.relfreq: (a: Obj, numbins: Structural({.__sub__ = (self: Never, Obj) -> {1.0} and (self: Never, Obj) -> {False, 1.0}}) := {10} and Structural({.__sub__ = (self: Never, Obj) -> {1.0} and (self: Never, Obj) -> {False, 1.0}}), defaultreallimits: Never := Never, weights: Obj := {None}) -> Never
.obrientransform: (*samples: Obj) -> Never
.sem: (a: Obj, axis: Obj := Obj, ddof: Obj := Obj, nan_policy: Obj := Obj) -> Never
._isconst: (x: global::Indexable(Obj, global::Indexable(Obj, Obj))) -> Never
._quiet_nanmean: (x: global::Indexable(Obj, Never)) -> Never
._quiet_nanstd: (x: global::Indexable(Obj, Never), ddof: Obj := Obj) -> Never
.zscore: |Type_359610 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(a: Type_359610, axis: Obj := Obj, ddof: Obj := Obj, nan_policy: Obj := Obj) -> Never
.gzscore: (a: Obj, axis: Obj := Obj, ddof: Obj := Obj, nan_policy: Obj := Obj) -> Never
.zmap: |Type_359610 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(scores: Type_359610, compare: Type_359610, axis: Obj := {0}, ddof: Obj := {0}, nan_policy: {"raise"} := {"propagate"} and {"raise"}) -> Never
.gstd: (a: Obj, axis: Obj := Obj, ddof: Obj := Obj) -> Never
._scale_conversions: Never
.iqr: (x: Obj, axis: Obj := Obj, rng: Structural({.__len__ = (self: Never) -> Nat}) := Structural({.__len__ = (self: Never) -> Nat}), scale: {1.0} := {1.0} and {1.0}, nan_policy: {"raise"} := {"propagate"} and {"raise"}, interpolation: Obj := {"linear"}, keepdims: Obj := {False}) -> Never
._mad_1d: (x: global::Indexable(Obj, global::Indexable(Obj, Obj)), center: (Never) -> Never, nan_policy: {"propagate"}) -> Never
.median_abs_deviation: (x: Obj, axis: Obj := Obj, center: Obj := Obj, scale: {"raise"} := {"raise"}, nan_policy: Obj := Obj) -> Never
.SigmaclipResult: Never
.sigmaclip: |R: Type|(a: Obj, low: R := R, high: R := R) -> Never
.trimboth: |Type_278140 <: Structural({.__mul__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(a: Obj, proportiontocut: Type_278140, axis: Obj := {0}) -> Never
.trim1: |R: Type, O: Type, Type_278145 <: Structural({.__ge__ = (self: Never, ?R) -> Bool; .__mul__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?O})|(a: Obj, proportiontocut: Type_278145, tail: Structural({.lower = (self: Obj) -> {"right"} and (self: Obj) -> Never}) := {"right"} and Structural({.lower = (self: Obj) -> {"right"} and (self: Obj) -> Never}), axis: Obj := {0}) -> Never
.trim_mean: |R: Type, O: Type, Type_278152 <: Structural({.__mul__ = (self: Never, ?R) -> ?O})|(a: Obj, proportiontocut: Type_278152, axis: Obj := {0}) -> Never
.F_onewayResult: Never
._create_f_oneway_nan_result: |Type_360292: Type, Type_360293: Type, R: Type, Type_278157 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?360292) -> ?360293 and (self: Obj, ?360296) -> ?R}), Type_360296: Type|(shape: Type_278157, axis: Never, samples: Obj) -> Never
._first: |Type_360310: Type, Type_278161 <: Structural({.ndim = ?360310})|(arr: Type_278161, axis: Obj) -> Never
._f_oneway_is_too_small: |Type_278164 <: Structural({.__len__ = (self: Never) -> Nat})|(samples: Type_278164, kwargs: Obj := global::Dict!({Never: Never}), axis: Obj := Int) -> {False}
.f_oneway: (*samples: Never, axis: Never := Never) -> Never
.AlexanderGovernResult: ClassType
.AlexanderGovernResult.pvalue: Float
.AlexanderGovernResult.statistic: Float
.AlexanderGovernResult.__call__: () -> _stats_py.AlexanderGovernResult

.alexandergovern: (*samples: Obj, nan_policy: Obj := Obj) -> Never
._alexandergovern_input_validation: (samples: global::List(Never, _: Nat), nan_policy: Obj) -> Never
._pearsonr_fisher_ci: |Type_360809: Type, Type_360810: Type, Type_278181 <: Structural({.dtype = ?360809 and ?360810})|(r: Type_278181, n: Obj, confidence_level: Obj, alternative: {"two-sided"}) -> Never
._pearsonr_bootstrap_ci: (confidence_level: Float, method: Obj, x: Obj, y: Obj, alternative: Never, axis: Int) -> Never
.ConfidenceInterval: Never
.PearsonRResultBase: Never
.PearsonRResult: ClassType
.PearsonRResult <: Never
.PearsonRResult._x: Never
.PearsonRResult._axis: Never
.PearsonRResult._alternative: Never
.PearsonRResult.correlation: Never
.PearsonRResult._n: Never
.PearsonRResult._y: Never
.PearsonRResult.__call__: (statistic: Obj, pvalue: Obj, alternative: Obj, n: Obj, x: Obj, y: Obj, axis: Obj) -> _stats_py.PearsonRResult
.PearsonRResult.confidence_interval: (self: _stats_py.PearsonRResult, confidence_level: Float := Float, method: Obj := Obj) -> Never

.pearsonr: (x: Obj, y: Obj, alternative: {"two-sided"} := {"two-sided"} and {"two-sided"}, method: {None} := {None} and {None}, axis: Obj := Obj) -> global::Indexable(Obj, Never)
.fisher_exact: (table: Obj, alternative: {"less"} := {"less"}) -> Never
.spearmanr: (a: Never, b: Never := Never, axis: Structural({.__gt__ = (self: Never, Obj) -> Bool}) := {0} and Structural({.__gt__ = (self: Never, Obj) -> Bool}), nan_policy: {"raise"} := {"propagate"} and {"raise"}, alternative: {"greater", "less"} := {"two-sided"} and {"greater", "less"}) -> Never
.pointbiserialr: (x: Obj, y: Obj) -> Never
.kendalltau: (x: Obj, y: Obj, nan_policy: {"raise"} := {"raise"}, method: {"exact"} := {"exact"}, variant: {"b"} := {"b"}, alternative: Obj := Obj) -> Never
.weightedtau: (x: Obj, y: Obj, rank: Obj := Obj, weigher: Obj := Obj, additive: Obj := Obj) -> Never
.TtestResultBase: Never
.TtestResult: ClassType
.TtestResult <: Never
.TtestResult._estimate: Never
.TtestResult._alternative: Never
.TtestResult._dtype: Never
.TtestResult._standard_error: Never
.TtestResult._xp: Never
.TtestResult._statistic_np: Never
.TtestResult.__call__: (statistic: Obj, pvalue: Obj, df: Obj, alternative: Obj, standard_error: Obj, estimate: Obj, statistic_np: Obj := Obj, xp: Obj := Obj) -> _stats_py.TtestResult
.TtestResult.confidence_interval: (self: _stats_py.TtestResult, confidence_level: Nat := Nat) -> Never

.pack_TtestResult: (statistic: Obj, pvalue: Obj, df: Obj, alternative: Obj, standard_error: Obj, estimate: Obj) -> _stats_py.TtestResult
.unpack_TtestResult: |Type_362994: Type, Type_362993: Type, Type_362990: Type, Type_362991: Type, Type_362992: Type, Type_362989: Type, Type_278275 <: Structural({.df = ?362991; .pvalue = ?362990; ._alternative = ?362992; ._standard_error = ?362993; .statistic = ?362989; ._estimate = ?362994})|(res: Type_278275) -> global::Tuple([Type_362989, Type_362990, Type_362991, Type_362992, Type_362993, Type_362994])
.ttest_1samp: (a: Never, popmean: Never, axis: {0} := {0}, nan_policy: Obj := Obj, alternative: Obj := Obj) -> _stats_py.TtestResult
._t_confidence_interval: |Type_278287 <: Structural({.dtype = Never}), R :> {0}, R <: Nat|(df: Obj, t: Type_278287, confidence_level: R, alternative: Structural({.__lt__ = (self: Never, R) -> Bool; .__gt__ = (self: Never, R) -> Bool}), dtype: Never := Never, xp: Never := Never) -> global::Tuple([Never, Never])
._ttest_ind_from_stats: |Type_278295 <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(mean1: Type_278295, mean2: R, denom: Obj, df: Obj, alternative: {"greater", "less"}) -> global::Tuple([Never, Never])
._unequal_var_ttest_denom: |O: Type, R <: Structural({.__pow__ = (self: Never, ?R) -> ?O}), Type_278301 <: Structural({.__div__ = (self: Never, ?R) -> ?O}), R <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R <: Structural({.__sub__ = (self: Never, ?R) -> ?O}), R: Type|(v1: Type_278301, n1: R, v2: Structural({.__div__ = (self: Never, R) -> R}), n2: R) -> global::Tuple([Never, Never])
._equal_var_ttest_denom: (v1: Obj, n1: {1}, v2: Obj, n2: Obj) -> global::Tuple([Never, Never])
.Ttest_indResult: Never
.ttest_ind_from_stats: |R <: {1}|(mean1: Obj, std1: Obj, nobs1: R, mean2: Obj, std2: Obj, nobs2: R, equal_var: Bool := Bool, alternative: {"greater", "less"} := {"greater", "less"}) -> Never
.ttest_ind: |E: Type, K: Type, Type_277922 :> Int, V: Type, E :> {"propagate"}, E :> {0}, E <: Float, Self <: global::Indexable(?K, ?V), Type_364111 <: Structural({.size = ?E; .shape = ?Self})|(a: Type_364111, b: Never, axis: Type_277922 := Type_277922, equal_var: Bool := Bool, nan_policy: E := E, permutations: {Type_v_global_192808: Nat | ((Type_v_global_192808 != None) and (Type_v_global_192808 != 0) or Type_v_global_192808 == 0)} := {Type_v_global_192808: Nat | ((Type_v_global_192808 != None) and (Type_v_global_192808 != 0) or Type_v_global_192808 == 0)}, random_state: Obj := Obj, alternative: {"less", "greater"} := {"less", "greater"}, trim: E := E) -> _stats_py.TtestResult
._ttest_trim_var_mean_len: |E: Type, K: Type, Type_277922 :> Int, Type_278347: Type, Self :> global::Tuple([?278347, ?Type_278155, ?O]), Self <: global::Indexable(?K, Never), V: Type, E :> {0}, E <: Float, O: Type, Self <: global::Indexable(?K, ?V), Type_364111 <: Structural({.size = ?E; .shape = ?Self}), Type_278155: Type|(a: Type_364111, trim: E, axis: Type_277922) -> Self
._calculate_winsorized_variance: (a: Never, g: Int, axis: Obj) -> Never
._permutation_distribution_t: |Type_364260: Type, K: Type, Self <: global::Indexable(?K, ?V), Type_364259: Type, V: Type, Type_278349 <: Structural({.__lt__ = (self: Never, ?R) -> Bool}), Type_278348 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?364259) -> ?364260}), R: Type|(data: Type_278348, permutations: Type_278349, size_a: NoneType or Int, equal_var: Bool, random_state: Obj := {None}) -> global::Tuple([Never, Type_278349, Never])
._calc_t_stat: |Type_278355 <: Structural({.shape = ?Self}), K: Type, Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V), Type_277922 :> Int, V: Type|(a: Type_278355, b: Structural({.shape = Self}), equal_var: Bool, axis: Type_277922 := Type_277922 and Type_277922) -> Never
._permutation_ttest: |E: Type, K: Type, Type_277922 :> Int, T: Type, V: Type, E :> {"propagate"}, O: Type, Self <: global::Indexable(?K, ?V), Self :> global::Tuple([?T, ?O]), Self <: global::Indexable(?K, ?V), Type_364111 <: Structural({.size = ?E; .shape = ?Self})|(a: Type_364111, b: Never, permutations: {Type_v_global_192808: Nat | ((Type_v_global_192808 != None) and (Type_v_global_192808 != 0) or Type_v_global_192808 == 0)}, axis: Type_277922 := Type_277922, equal_var: Bool := Bool, nan_policy: E := E, random_state: Obj := Obj, alternative: {"less", "greater"} := {"less", "greater"}) -> Self
._get_len: |Type_278375 <: Structural({.shape = ?Self}), K: Type, Self <: global::Indexable(?K, ?V), V: Type|(a: Type_278375, axis: K, msg: Obj) -> V
.ttest_rel: (a: Never, b: Never, axis: {0} := {0}, nan_policy: Obj := Obj, alternative: Obj := Obj) -> _stats_py.TtestResult
._power_div_lambda_names: global::Dict!({{"pearson"}: {1}, {"mod-log-likelihood"}: Int, {"cressie-read"}: Float, {"freeman-tukey"}: Float, {"neyman"}: Int, {"log-likelihood"}: {0}})
._m_count: |Type_37510: Type, Type_18633 <: Structural({.shape = ?37535 and ?37510}), Type_37535: Type|(a: Type_18633, axis: Obj, xp: Obj) -> Never
._m_broadcast_to: |Type_364850: Type, Type_278393 <: Structural({.mask = ?364850})|(a: Type_278393, shape: Obj, xp: Obj) -> Never
._m_sum: |T <: global::List(?T, _: Nat), T: Type|(a: T, axis: T, preserve_mask: Bool, xp: global::List(T, _: Nat)) -> T
._m_mean: (a: Obj, axis: Obj, keepdims: Obj, xp: Obj) -> Never
.Power_divergenceResult: Never
.power_divergence: (f_obs: Obj, f_exp: Structural({.__div__ = (self: Never, Obj) -> Never}) := {None} and Structural({.__div__ = (self: Never, Obj) -> Never}), ddof: Obj := {0}, axis: Never := Never, lambda_: {1} := {None} and {1}) -> Never
.chisquare: (f_obs: Obj, f_exp: Structural({.__div__ = (self: Never, Obj) -> Never}) := {None} and Structural({.__div__ = (self: Never, Obj) -> Never}), ddof: Obj := {0}, axis: Never := Never) -> Never
.KstestResult: Never
._compute_dplus: |R <: Structural({.__len__ = (self: Never) -> Nat}), V: Type|(cdfvals: R, x: global::Indexable(Obj, V)) -> global::Tuple([V, V])
._compute_dminus: |Type_278430 <: Structural({.__len__ = (self: Never) -> Nat; .__sub__ = (self: Never, ?R) -> Never}), R: Type, V: Type|(cdfvals: Type_278430, x: global::Indexable(Obj, V)) -> global::Tuple([V, V])
._tuple_to_KstestResult: (statistic: Obj, pvalue: Obj, statistic_location: Obj, statistic_sign: Obj) -> Never
._KstestResult_to_tuple: |Type_365422: Type, Type_278438 <: Structural({.statistic_sign = ?365422; .statistic_location = ?365421}), Type_365421: Type|(res: Type_278438) -> global::Tuple([Never, Type_365421, Type_365422])
.ks_1samp: |Type_278440 <: Structural({.__len__ = (self: Never) -> Nat})|(x: Type_278440, cdf: (Obj) -> Never, args: Obj := Obj, alternative: {"greater", "two-sided", "less"} := {"two-sided"} and {"greater", "two-sided", "less"}, method: {"exact", "auto"} := {"auto"} and {"exact", "auto"}) -> Never
.Ks_2sampResult: Never
._compute_prob_outside_square: |Type_278449 <: Structural({.__div__ = (self: Never, Never) -> ?O; .__sub__ = (self: Never, ?R) -> ?O; .__add__ = (self: Never, ?R) -> ?O}), O: Type, R: Type|(n: Type_278449, h: Never) -> Never
._count_paths_outside_method: |E: Type, R <: Structural({.__sub__ = (self: Never, ?R) -> ?O and (self: Never, ?R) -> ?R; .__add__ = (self: Never, ?R) -> ?E and (self: Never, ?R) -> ?O; .__lt__ = (self: Never, ?R) -> Bool; .__floordiv__ = (self: Never, ?R) -> ?R and (self: Never, ?R) -> ?R}), R: Type, O: Type, R <: Structural({.__add__ = (self: Never, ?R) -> ?O})|(m: R, n: R, g: R, h: R) -> Nat
._attempt_exact_2kssamp: |O <: Structural({.__mul__ = (self: Never, ?R) -> ?O}), R: Type, O: Type|(n1: Never, n2: Never, g: Never, d: O, alternative: {"two-sided"}) -> global::Tuple([{True}, O, Never])
.ks_2samp: (data1: Obj, data2: Obj, alternative: {"two-sided", "less", "greater"} := {"two-sided", "less", "greater"}, method: Obj := Obj) -> Never
._parse_kstest_args: (data1: {None}, data2: {None}, args: Obj, N: Obj) -> global::Tuple([Never, {None}, {None}])
._kstest_n_samples: (kwargs: global::Indexable(Obj, Never)) -> {2, 1}
.kstest: (rvs: {None}, cdf: {None}, args: Obj := Obj, N: Obj := Obj, alternative: Obj := Obj, method: {"exact", "auto"} := {"exact", "auto"}) -> Never
.tiecorrect: (rankvals: Obj) -> Float
.RanksumsResult: Never
.ranksums: (x: Obj, y: Obj, alternative: Obj := Obj) -> Never
.KruskalResult: Never
.kruskal: (*samples: Structural({.__len__ = (self: Never) -> Nat}), nan_policy: Obj := {"propagate"}) -> Never
.FriedmanchisquareResult: Never
.friedmanchisquare: (*samples: Structural({.__len__ = (self: Never) -> Nat})) -> Never
.BrunnerMunzelResult: Never
.brunnermunzel: |Type_368452 <: Structural({.__len__ = (self: Never) -> Nat})|(x: Type_368452, y: Type_368452, alternative: {"greater", "less"} := {"two-sided"} and {"greater", "less"}, distribution: {"t"} := {"t"} and {"t"}, nan_policy: Obj := {"propagate"}) -> Never
.combine_pvalues: |E: Type, Type_278514 <: Structural({.size = ?E; .__len__ = (self: Never) -> Nat; .__neg__ = (self: Never) -> ?R and (self: Never) -> ?R}), R: Type|(pvalues: Type_278514, method: {"fisher"} := {"fisher"} and {"fisher"}, weights: Structural({.__len__ = (self: Never) -> Nat}) := {None} and Structural({.__len__ = (self: Never) -> Nat})) -> Never
.QuantileTestResult: ClassType
.QuantileTestResult.statistic_type: Int
.QuantileTestResult.statistic: Float
.QuantileTestResult.pvalue: Float
.QuantileTestResult.__call__: () -> _stats_py.QuantileTestResult
.QuantileTestResult._alternative: global::List!(Str, _: Nat)
.QuantileTestResult._x: Never
.QuantileTestResult._p: Float
.QuantileTestResult.confidence_interval: (self: _stats_py.QuantileTestResult, confidence_level: Nat := Nat) -> Never

.quantile_test_iv: |T: Type|(x: Obj, q: Obj, p: Obj, alternative: T) -> global::Tuple([Never, Never, Never, T])
.quantile_test: Never
.wasserstein_distance_nd: |Type_368298 <: Structural({.__div__ = (self: Never, ?R) -> ?U and (self: Never, ?R) -> ?U; .__len__ = (self: Never) -> Nat}), R: Type, U: Type|(u_values: Type_368298, v_values: Type_368298, u_weights: Type_368298 := {None} and Type_368298, v_weights: Type_368298 := {None} and Type_368298) -> R
.wasserstein_distance: |K: Type, Type_368297 <: global::Indexable(?K, Never)|(u_values: Type_368297, v_values: Type_368297, u_weights: Never := Never, v_weights: Never := Never) -> Never
.energy_distance: (u_values: Obj, v_values: Obj, u_weights: Never := Never, v_weights: Never := Never) -> Never
._cdf_distance: |K: Type, R :> {1, 2}, R <: Nat, Type_368298 <: Structural({.__div__ = (self: Never, ?R) -> ?U and (self: Never, ?R) -> ?U; .__len__ = (self: Never) -> Nat}), U: Type, R: Type, Type_368297 <: global::Indexable(?K, Never)|(p: R, u_values: Type_368297, v_values: Type_368297, u_weights: Type_368298 := {None} and Type_368298, v_weights: Type_368298 := {None} and Type_368298) -> Never
._validate_distribution: |Type_368298 <: Structural({.__div__ = (self: Never, ?R) -> ?U and (self: Never, ?R) -> ?U; .__len__ = (self: Never) -> Nat}), R: Type, U: Type|(values: global::Indexable(Obj, Never), weights: Type_368298) -> global::Tuple([Never, {None}])
.RepeatedResults: Never
.find_repeats: (arr: Obj) -> global::Indexable(Obj, global::Iterable(Structural({.__mul__ = (self: Never, Never) -> Structural({.__sub__ = (self: Never, Obj) -> Never}) and (self: Never, Obj) -> Nat})))
._sum_of_squares: (a: Never, axis: {0} := {0}) -> Structural({.__sub__ = (self: Never, Nat) -> Structural({.__sub__ = (self: Never, Int) -> Structural({.__div__ = (self: Never, Obj) -> Float})})})
._square_of_sums: (a: Never, axis: {0} := {0} and {0}) -> Structural({.__div__ = (self: Never, Obj) -> Nat})
.rankdata: |E :> {"average", "ordinal"}, Type_278583 :> {None}, Type_368452 <: Structural({.__len__ = (self: Never) -> Nat})|(a: Type_368452, method: E := E and E, axis: Type_278583 := Type_278583 and Type_278583, nan_policy: {"propagate"} := {"propagate"} and {"propagate"}) -> global::Indexable(Obj, Never)
._order_ranks: |Type_278588 <: Structural({.dtype = ?368548}), Type_368548: Type|(ranks: Type_278588, j: Structural({.shape = Obj})) -> Never
._rankdata: |Self <: global::Indexable(?K, ?V), K: Type, V: Type, Type_278591 <: Structural({.shape = ?Self}), Type_278593 :> {False}, Type_278593 <: Bool|(x: Type_278591, method: Obj, return_ties: Type_278593 := Type_278593 and Type_278593) -> Never
.expectile: (a: Obj, alpha: Structural({.__gt__ = (self: Never, Obj) -> Bool; .__ge__ = (self: Never, Obj) -> Bool; .__lt__ = (self: Never, Obj) -> Bool}) := {0.5} and Structural({.__gt__ = (self: Never, Obj) -> Bool; .__ge__ = (self: Never, Obj) -> Bool; .__lt__ = (self: Never, Obj) -> Bool}), weights: Obj := {None}) -> Never
.LinregressResult: Never
.linregress: |E: Type, K: Type, E :> {0}, Type_278603 <: Structural({.shape = ?Self}), Self <: global::Indexable(?K, ?V), V: Type|(x: Type_278603, y: Structural({.size = E; .__getitem__ = (self: Obj, Obj) -> E}) := {None} and Structural({.size = E; .__getitem__ = (self: Obj, Obj) -> E}), alternative: {"greater", "less"} := {"two-sided"} and {"greater", "less"}) -> Never
._SimpleNormal: ClassType

._SimpleChi2: ClassType

