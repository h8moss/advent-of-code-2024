##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/stats/_resampling.py 1734628983 98486
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.warnings = pyimport "<failure>"


.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "<failure>"

.combinations: Never
.permutations: Never
.product: Never
.___v_desugar_3 = pyimport "<failure>"

.Sequence: Never
.___v_desugar_4 = pyimport "<failure>"

.dataclass: Never
.inspect = pyimport "<failure>"


.___v_desugar_5 = pyimport "_util"
._util = pyimport "_util"
.check_random_state: (seed: Obj) -> Never
._rename_parameter: |R: Type|(old_name: R, new_name: R, dep_version: Never := Never) -> (fun: () -> Never) -> (*args: Obj, **kwargs := ?87617) -> Never
.rng_integers: |R: Type, O: Type, Type_85539 <: Structural({.__add__ = (self: Never, ?R) -> ?O})|(gen: Obj, low: Type_85539, high: Obj := {None}, size: Obj := {None}, dtype: Obj := {"int64"}, endpoint: Bool := {False} and Bool) -> Never
.___v_desugar_6 = pyimport "_array_api"
._array_api = pyimport "_array_api"
.array_namespace: (*arrays: Obj) -> Never
.is_numpy: (xp: Obj) -> Bool
.xp_minimum: (x1: Obj, x2: Obj) -> Never
.xp_clip: (x: Obj, min: Float or NoneType := Float or NoneType, max: Float or NoneType := Float or NoneType, xp: Obj := Obj) -> Never
.xp_moveaxis_to_end: (x: Obj, source: Int, xp: Obj := Obj) -> Never
.___v_desugar_7 = pyimport "__init__"

.ndtr: Never
.ndtri: Never
.comb: Never
.factorial: Never
.___v_desugar_8 = pyimport "_common"
._common = pyimport "_common"
.ConfidenceInterval: Never
.___v_desugar_9 = pyimport "_axis_nan_policy"
._axis_nan_policy = pyimport "_axis_nan_policy"
._broadcast_concatenate: (arrays: Never, axis: Obj, paired: Bool := Bool) -> Never
._broadcast_arrays: (arrays: Never, axis: Obj := Obj, xp: Never := Never) -> Never
.___v_desugar_10 = pyimport "_warnings_errors"
._warnings_errors = pyimport "_warnings_errors"
.DegenerateDataWarning: {_warnings_errors.DegenerateDataWarning}
.__all__: global::List!({"monte_carlo_test", "bootstrap", "permutation_test"}, 3)
._vectorize_statistic: (statistic: () -> Never) -> (*data: Never, axis: Obj := Obj) -> Never
._jackknife_resample: |Type_171160: Type, K: Type, Type_156100 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?171159) -> ?171160}), Self <: global::Indexable(?K, ?V), Type_171159: Type, V: Type|(sample: Type_156100, batch: Structural({.__or__ = (self: Never, Obj) -> Never}) := {None} and Structural({.__or__ = (self: Never, Obj) -> Never})) -> NoneType
._bootstrap_resample: |Type_171206: Type, K: Type, Type_171205: Type, Type_156106 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?171205) -> ?171206}), Self <: global::Indexable(?K, ?V), V: Type|(sample: Type_156106, n_resamples: Obj := {None}, random_state: Obj := {None}) -> Type_171206
._percentile_of_score: |Type_156115 <: Structural({.__le__ = (self: Never, ?R) -> Bool; .shape = ?Self; .__lt__ = (self: Never, ?R) -> Bool}), K: Type, R: Type, V: Type, Self <: global::Indexable(?K, ?V)|(a: Type_156115, score: R, axis: K) -> Never
._percentile_along_axis: |K: Type, Type_171384: Type, Type_156122 <: Structural({.shape = ?Self; .__getitem__ = (self: Obj, ?V) -> ?171384}), Self <: global::Indexable(?K, ?V), V: Type|(theta_hat_b: Type_156122, alpha: Obj) -> Never
._bca_interval: |Type_156104 <: Structural({.__or__ = (self: Never, Obj) -> Never}), T: Type|(data: global::Iterable(T), statistic: () -> T, axis: Obj, alpha: Obj, theta_hat_b: Never, batch: Type_156104) -> global::Tuple([Never, Never, Float])
._bootstrap_iv: |T <: Structural({.lower = (self: Obj) -> ?T}), E :> Int, Type_172661: Type, Self <: global::Indexable(?K, ?V), E :> {_: ?E and NoneType | _ == None} or Int, Type_170669 :> {0}, Type_170937: Type, T <: Structural({.shape = ?172171 and ?Self}), Type_156154 :> (*data: Never, axis: ?K := ?Type_170669) -> ?Type_170937, Type_156154 <: () -> ?Type_170937, Type_156181 <: Structural({.bootstrap_distribution = ?172661}), T <: Structural({.lower = (self: Never) -> ?T}), E: Type, K: Type, Type_156151 :> global::List!(?T, _: Nat), Type_156151 <: Structural({.__len__ = (self: Never) -> Nat}), T: Type, T <: Bool, T <: Structural({.lower = (self: Obj) -> ?T}), V: Type, T <: Structural({.lower = (self: Never) -> ?T}), Type_172171: Type|(data: Type_156151, statistic: Type_156154, vectorized: T, paired: T, axis: Int, confidence_level: Obj, alternative: T, n_resamples: E, batch: E, method: T, bootstrap_result: Type_156181, random_state: Obj) -> global::Tuple([global::List!(T, 1), Type_156154, T, T, Int, Float, T, Int, {_: E and NoneType | _ == None} or Int, T, Type_156181, Never])
.BootstrapResult: ClassType
.BootstrapResult.bootstrap_distribution: Never
.BootstrapResult.standard_error: Never
.BootstrapResult.confidence_interval: Never
.BootstrapResult.__call__: () -> _resampling.BootstrapResult

.bootstrap: |Type_156151 :> global::List!(Never, _: Nat), Type_156151 <: Structural({.__len__ = (self: Never) -> Nat})|(data: Type_156151, statistic: (*data: Never, axis: Int := {0}) -> Never, n_resamples: Int or {None} := {9999} and Int or {None}, batch: Int or {None} := {None} and Int or {None}, vectorized: Never := Never, paired: Never := Never, axis: Int := {0} and Int, confidence_level: Float := {0.95} and Float, alternative: Never := Never, method: Never := Never, bootstrap_result: Never := Never, random_state: Obj := {None}) -> Never
._monte_carlo_test_iv: |E :> Int, K: Type, E: Type, T: Type, T <: Bool, Type_170669 :> {0}, T <: Structural({.lower = (self: Obj) -> ?T}), Type_170671: Type, E :> {_: ?E and NoneType | _ == None} or Int, T <: Structural({.lower = (self: Never) -> ?T})|(data: global::Tuple([Never]), rvs: global::Tuple([Never]), statistic: (*data: Never, axis: K := Type_170669) -> Type_170671, vectorized: T, n_resamples: E, batch: E, alternative: T, axis: E) -> global::Tuple([global::List!(T, 1), global::Tuple([Never]), (*data: Never, axis: K := Type_170669) -> Type_170671, T, Int, {_: E and NoneType | _ == None} or Int, T, Int, Never, Never])
.MonteCarloTestResult: ClassType
.MonteCarloTestResult.null_distribution: Never
.MonteCarloTestResult.pvalue: Never
.MonteCarloTestResult.statistic: Never
.MonteCarloTestResult.__call__: () -> _resampling.MonteCarloTestResult

.monte_carlo_test: |E :> Int or {_: ?E and NoneType | _ == None}, E :> Int|(data: global::Tuple([Never]), rvs: global::Tuple([Never]), statistic: (*data: Never, axis: Never := {0}) -> Never, vectorized: Never := Never, n_resamples: E := {9999} and E, batch: E := {None} and E, alternative: Never := Never, axis: E := {0} and E) -> Never
.PowerResult: ClassType
.PowerResult.power: Never
.PowerResult.pvalues: Never
.PowerResult.__call__: () -> _resampling.PowerResult

._wrap_kwargs: |Type_174548: Type, Type_156613: Type|(fun: Type_156613) -> |Type_174548: Type|(*args: Obj, keys: Obj := Obj, fun: () -> Type_174548 := Obj, **all_kwargs := ?174534) -> Type_174548
._power_iv: |Type_156622 <: () -> ?Type_170937, E :> Int, E: Type, Type_174530 :> global::Set({"size"}, 1), Type_174548: Type, T <: Bool, Type_170937: Type, Type_174529: Type, E :> {_: ?E and NoneType | _ == None} or Int, T :> (*args: ?Type_174529, keys: ?Type_174531 := ?Type_174530, fun: () -> ?Type_174548 := ?Type_156613, **all_kwargs := ?174534) -> ?Type_174548, Type_174531: Type, Type_156613: Type|(rvs: global::Tuple([Never]), test: Type_156622, n_observations: global::Tuple([Never]), significance: Obj, vectorized: T, n_resamples: E, batch: E, kwargs: global::GenericDict) -> global::Tuple([global::List!(T, _: Nat), (*args: Obj, keys: Obj := Obj, fun: () -> Never := Obj, **all_kwargs := ?174534) -> Never, Never, Never, T, Int, {_: E and NoneType | _ == None} or Int, Never, Never, Never])
.power: |E :> Int, E :> {_: ?E and NoneType | _ == None} or Int|(test: Never, rvs: global::Tuple([Never]), n_observations: global::Tuple([Never]), significance: Obj := Obj, vectorized: Never := Never, n_resamples: E := E, batch: E := E, kwargs: global::GenericDict := global::GenericDict) -> Never
.PermutationTestResult: ClassType
.PermutationTestResult.null_distribution: Never
.PermutationTestResult.pvalue: Never
.PermutationTestResult.statistic: Never
.PermutationTestResult.__call__: () -> _resampling.PermutationTestResult

._all_partitions_concatenated: (ns: global::Indexable(Obj, Never)) -> NoneType
._batch_generator: |Type_157071 <: Structural({.__le__ = (self: Never, ?R) -> Bool}), R: Type|(iterable: global::Iterable(Never), batch: Type_157071) -> NoneType
._pairings_permutations_gen: |O <: {_: Never | True}|(n_permutations: O, n_samples: Obj, n_obs_sample: Obj, batch: O, random_state: Obj) -> NoneType
._calculate_null_both: |R: Type, Type_157285 <: Structural({.__len__ = (self: Never) -> Nat}), Type_157303 <: Structural({.__ge__ = (self: Never, ?R) -> Bool})|(data: Type_157285, statistic: () -> Never, n_permutations: Type_157303, batch: Never, random_state: Obj := {None}) -> global::Tuple([Never, Type_157303, {True, False}])
._calculate_null_pairings: |K: Type, Type_175946: Type, R <: Structural({.__ge__ = (self: Never, ?R) -> Bool}), Type_157331 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?K) -> ?175946 and (self: Obj, ?K) -> ?Self}), Self <: global::Indexable(?K, ?V), V: Type, T: Type, R: Type|(data: Type_157331, statistic: () -> T, n_permutations: R, batch: Never, random_state: Obj := {None}) -> global::Tuple([Never, R, {True, False}])
._calculate_null_samples: |Type_176061: Type, T: Type, R <: Structural({.__ge__ = (self: Never, Never) -> Bool}), Type_157367 :> global::List!(?T or ?R, 2), Type_157367 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?176059) -> ?T and (self: Obj, ?176061) -> ?T}), R: Type, Type_176059: Type|(data: Type_157367, statistic: () -> Never, n_permutations: Never, batch: Never, random_state: Obj := {None}) -> global::Tuple([Never, R, {True, False}])
._permutation_test_iv: |E :> Int, E :> {"independent"}, E <: Structural({.lower = (self: Obj) -> ?E}), Type_170669 :> {0}, Type_170937: Type, E :> {"independent"}, E <: Structural({.lower = (self: Never) -> ?E}), T <: Structural({.lower = (self: Never) -> ?T}), T <: Structural({.shape = ?Self}), E: Type, K: Type, T <: Structural({.lower = (self: Obj) -> ?T}), T: Type, T <: Bool, V: Type, K :> Int, Type_157410 :> (*data: Never, axis: ?K := ?Type_170669) -> ?Type_170937, Type_157410 <: () -> ?Type_170937, Type_157404 <: Structural({.__len__ = (self: Never) -> Nat}), Self <: global::Indexable(?K, ?V), E :> Int or {_: ?E and NoneType | _ == None}|(data: Type_157404, statistic: Type_157410, permutation_type: E, vectorized: T, n_resamples: E, batch: E, alternative: T, axis: K, random_state: Obj) -> global::Tuple([global::List!(T, 1), Type_157410, E, T, Int, Int or {_: E and NoneType | _ == None}, T, Int, Never])
.permutation_test: |T: Type, T <: Bool, Type_157404 :> global::List!(?T, 1), Type_157404 <: Structural({.__len__ = (self: Never) -> Nat})|(data: Type_157404, statistic: (*data: Never, axis: Never := {0}) -> Never, permutation_type: {"independent"} := {"independent"} and {"independent"}, vectorized: T := {None} and T, n_resamples: {"independent"} := {9999} and {"independent"}, batch: {"independent"} := {None} and {"independent"}, alternative: T := {"two-sided"} and T, axis: Never := Never, random_state: Obj := {None}) -> Never
.ResamplingMethod: ClassType
.ResamplingMethod.__call__: () -> _resampling.ResamplingMethod
.ResamplingMethod.n_resamples: Int
.ResamplingMethod.batch: {None}

.MonteCarloMethod: ClassType
_resampling = pyimport "_resampling"
.MonteCarloMethod <: .ResamplingMethod
.MonteCarloMethod.rvs: Obj
.MonteCarloMethod._asdict: (self: _resampling.MonteCarloMethod) -> global::GenericDict

.PermutationMethod: ClassType
.PermutationMethod <: .ResamplingMethod
.PermutationMethod.random_state: Obj
.PermutationMethod._asdict: (self: _resampling.PermutationMethod) -> global::GenericDict

.BootstrapMethod: ClassType
.BootstrapMethod <: .ResamplingMethod
.BootstrapMethod.random_state: Obj
.BootstrapMethod.method: Str
.BootstrapMethod._asdict: (self: _resampling.BootstrapMethod) -> global::GenericDict

