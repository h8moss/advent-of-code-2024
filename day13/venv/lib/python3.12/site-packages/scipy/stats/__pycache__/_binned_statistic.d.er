##[pylyzer] failed /home/dani/advent-of-code-2024/day13/venv/lib/python3.12/site-packages/scipy/stats/_binned_statistic.py 1734628983 32712
.builtins = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.___v_desugar_1 = pyimport "<failure>"

.catch_warnings: Never
.simplefilter: Never
.np = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_2 = pyimport "<failure>"

.index: Never
.___v_desugar_3 = pyimport "<failure>"

.namedtuple: Never
.__all__: global::List!({"binned_statistic_dd", "binned_statistic_2d", "binned_statistic"}, 3)
.BinnedStatisticResult: Never
.binned_statistic: (x: Obj, values: Obj, statistic: Obj := Obj, bins: Structural({.__len__ = (self: Never) -> Nat}) := {10} and Structural({.__len__ = (self: Never) -> Nat}), range: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Obj) -> global::Indexable(Obj, Structural({.__lt__ = (self: Never, Obj) -> Bool})) and (self: Obj, Obj) -> global::Indexable(Obj, Never)}) := {None} and Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Obj) -> global::Indexable(Obj, Structural({.__lt__ = (self: Never, Obj) -> Bool})) and (self: Obj, Obj) -> global::Indexable(Obj, Never)})) -> Never
.BinnedStatistic2dResult: Never
.binned_statistic_2d: (x: Obj, y: Obj, values: Obj, statistic: Obj := Obj, bins: global::List!(Obj, 2) := global::List!(Obj, 2), range: Obj := Obj, expand_binnumbers: Structural({.__and__ = (self: Never, Obj) -> Bool}) := Structural({.__and__ = (self: Never, Obj) -> Bool})) -> Never
.BinnedStatisticddResult: Never
._bincount: (x: Obj, weights: Obj) -> Never
.binned_statistic_dd: |O :> global::List!(Obj, 1), O <: Structural({.__len__ = (self: Never) -> Nat}), Self <: global::Indexable(?K, ?V), Type_103263: Type, Self <: global::Indexable(?K, ?V), Type_104079: Type, Type_96568 <: Structural({.shape = ?Self and ?Self}), Self <: global::Indexable(?K, ?V), Type_96586 <: Structural({.binnumber = ?104079; .bin_edges = ?103263}), Self <: global::Indexable(?K, ?Self), K: Type, T :> {"count"}, V: Type, Self <: global::Indexable(?K, ?V), O: Type, R: Type, Self <: global::Indexable(?K, ?V), Type_100799 <: Structural({.__and__ = (self: Never, ?R) -> ?O})|(sample: Type_96568, values: Obj, statistic: T := T, bins: O := O, range: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, K) -> Self and (self: Obj, K) -> Self}) := Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, K) -> Self and (self: Obj, K) -> Self}), expand_binnumbers: Type_100799 := Type_100799 and Type_100799, binned_statistic_result: Type_96586 := Type_96586 and Type_96586) -> Self
._calc_binned_statistic: |Type_104079 <: global::Indexable(?K, ?V), K: Type, T: Type, Type_96673: Type, V: Type, K :> global::Tuple([?T, ?T]), T :> {"count"}, Type_112385 :> ?96673 or ?Type_104079, Type_112385 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?T) -> ?112453}), Type_112453: Type|(Vdim: Obj, bin_numbers: Type_112385, result: global::Dict!(_: global::GenericDict), values: global::Indexable(K, V), stat_func: T) -> NoneType
._create_binned_data: |Type_104079 <: global::Indexable(?K, ?V), K: Type, T: Type, Type_96673: Type, V: Type, Self <: global::Indexable(?K, ?V), Type_112385 :> ?96673 or ?Type_104079, Type_112385 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, ?T) -> ?112453}), Type_112453: Type, Self <: global::Indexable(?K, ?V)|(bin_numbers: Type_112385, unique_bin_numbers: global::Iterable(T), values: Self, vv: T) -> Self
._bin_edges: |O :> global::List!(Obj, 1), O <: Structural({.__len__ = (self: Never) -> Nat}), K: Type, Self <: global::Indexable(?K, ?V), V: Type, Self <: global::Indexable(?K, ?V), Type_96568 <: Structural({.shape = ?Self and ?Self}), Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V), Self <: global::Indexable(?K, ?V)|(sample: Type_96568, bins: O := O, range: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, K) -> Self and (self: Obj, K) -> Self}) := {None} and Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, K) -> Self and (self: Obj, K) -> Self})) -> Self
._bin_numbers: |Type_96568 <: Structural({.shape = ?Self and ?Self}), K: Type, V <: Never, Self <: global::Indexable(?K, ?V), V: Type, Self <: global::Indexable(?K, ?V)|(sample: Type_96568, nbin: V, edges: V, dedges: V) -> global::Indexable(K, V)
